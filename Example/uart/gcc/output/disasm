
output\a.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	10014000 	.word	0x10014000
       4:	00000701 	.word	0x00000701
       8:	00000749 	.word	0x00000749
       c:	00000749 	.word	0x00000749
	...
      3c:	00000749 	.word	0x00000749
      40:	00000749 	.word	0x00000749
      44:	00000749 	.word	0x00000749
      48:	00000749 	.word	0x00000749
      4c:	00000749 	.word	0x00000749
      50:	00000749 	.word	0x00000749
      54:	00000749 	.word	0x00000749
      58:	00000749 	.word	0x00000749
      5c:	00000749 	.word	0x00000749
      60:	00000749 	.word	0x00000749
      64:	00000749 	.word	0x00000749
      68:	00000749 	.word	0x00000749
      6c:	00000749 	.word	0x00000749
      70:	00000749 	.word	0x00000749
      74:	00000749 	.word	0x00000749
      78:	00000749 	.word	0x00000749
      7c:	00000749 	.word	0x00000749
      80:	00000749 	.word	0x00000749
      84:	00000749 	.word	0x00000749
      88:	00000749 	.word	0x00000749
      8c:	00000749 	.word	0x00000749
      90:	00000749 	.word	0x00000749
      94:	00000749 	.word	0x00000749

00000098 <main>:
/*for genie module*/
#define TX_PIN 27
#define RX_PIN 28

int main()
{	
      98:	b570      	push	{r4, r5, r6, lr}
      9a:	b094      	sub	sp, #80	; 0x50
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
      9c:	466a      	mov	r2, sp
      9e:	4c1b      	ldr	r4, [pc, #108]	; (10c <main+0x74>)
	bc_gpio_init(TX_PIN, &cfgTx);
      a0:	4669      	mov	r1, sp
#define RX_PIN 28

int main()
{	
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
      a2:	7823      	ldrb	r3, [r4, #0]
	bc_gpio_init(TX_PIN, &cfgTx);
      a4:	201b      	movs	r0, #27
#define RX_PIN 28

int main()
{	
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
      a6:	7013      	strb	r3, [r2, #0]
	bc_gpio_init(TX_PIN, &cfgTx);
      a8:	f000 f83a 	bl	120 <bc_gpio_init>
	
	GPIO_CFG cfgRx ={FUNC_UARTB_RXD, GFG_PULLUP};
      ac:	7863      	ldrb	r3, [r4, #1]
	bc_gpio_init(RX_PIN, &cfgRx);
      ae:	201c      	movs	r0, #28
{	
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
	bc_gpio_init(TX_PIN, &cfgTx);
	
	GPIO_CFG cfgRx ={FUNC_UARTB_RXD, GFG_PULLUP};
      b0:	a901      	add	r1, sp, #4
      b2:	700b      	strb	r3, [r1, #0]
	bc_gpio_init(RX_PIN, &cfgRx);
      b4:	f000 f834 	bl	120 <bc_gpio_init>

	/*cofig uart parameter*/	
	USART_InitTypeDef Uart = {BAUD921600, DATA_BITS_8b, STOP_BITS_1, PARITY_EVEN,
      b8:	a902      	add	r1, sp, #8
      ba:	000a      	movs	r2, r1
      bc:	1d23      	adds	r3, r4, #4
      be:	cb31      	ldmia	r3!, {r0, r4, r5}
      c0:	c231      	stmia	r2!, {r0, r4, r5}
      c2:	cb11      	ldmia	r3!, {r0, r4}
      c4:	c211      	stmia	r2!, {r0, r4}
								MODE_DUPLEX, FLOW_CTRL_NONE, 128, 128};
	USART_Init(UARTB, &Uart);
      c6:	2001      	movs	r0, #1
      c8:	f000 f8fc 	bl	2c4 <USART_Init>

	uint8_t buff[50];
	/*main process*/
	while(1){
		if(USART_GetRxCount(UARTB) > 0){
      cc:	2001      	movs	r0, #1
      ce:	f000 f9fd 	bl	4cc <USART_GetRxCount>
      d2:	2800      	cmp	r0, #0
      d4:	d101      	bne.n	da <main+0x42>
			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
			for(int i = 0; i < len; ++i)
      d6:	4b0e      	ldr	r3, [pc, #56]	; (110 <main+0x78>)
      d8:	e00f      	b.n	fa <main+0x62>

	uint8_t buff[50];
	/*main process*/
	while(1){
		if(USART_GetRxCount(UARTB) > 0){
			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
      da:	ad07      	add	r5, sp, #28
      dc:	2200      	movs	r2, #0
      de:	0029      	movs	r1, r5
      e0:	2001      	movs	r0, #1
      e2:	f000 fa05 	bl	4f0 <USART_ReadDatatoBuff>
			for(int i = 0; i < len; ++i)
      e6:	2400      	movs	r4, #0

	uint8_t buff[50];
	/*main process*/
	while(1){
		if(USART_GetRxCount(UARTB) > 0){
			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
      e8:	0006      	movs	r6, r0
			for(int i = 0; i < len; ++i)
      ea:	42b4      	cmp	r4, r6
      ec:	daf3      	bge.n	d6 <main+0x3e>
				USART_SendData(UARTB, buff[i]);
      ee:	5d29      	ldrb	r1, [r5, r4]
      f0:	2001      	movs	r0, #1
      f2:	f000 f987 	bl	404 <USART_SendData>
	uint8_t buff[50];
	/*main process*/
	while(1){
		if(USART_GetRxCount(UARTB) > 0){
			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
			for(int i = 0; i < len; ++i)
      f6:	3401      	adds	r4, #1
      f8:	e7f7      	b.n	ea <main+0x52>

#define BW(addr)			(int)*(addr) << 24 | (int)*(addr + 1) << 16 | (int)*(addr + 2) << 8 | *(addr + 3)

static inline void hw_delay() 
{
	__asm__ __volatile__("nop");
      fa:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
      fc:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
      fe:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     100:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     102:	46c0      	nop			; (mov r8, r8)
     104:	3b01      	subs	r3, #1
				USART_SendData(UARTB, buff[i]);
		}
		for(int i = 0; i < 5000; ++i){
     106:	2b00      	cmp	r3, #0
     108:	d1f7      	bne.n	fa <main+0x62>
     10a:	e7df      	b.n	cc <main+0x34>
     10c:	000022e4 	.word	0x000022e4
     110:	00001388 	.word	0x00001388

00000114 <hw_delay>:

#define BW(addr)			(int)*(addr) << 24 | (int)*(addr + 1) << 16 | (int)*(addr + 2) << 8 | *(addr + 3)

static inline void hw_delay() 
{
	__asm__ __volatile__("nop");
     114:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     116:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     118:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     11a:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     11c:	46c0      	nop			; (mov r8, r8)
}
     11e:	4770      	bx	lr

00000120 <bc_gpio_init>:
#define IS_VALID_PIN(PIN)
#endif

void bc_gpio_init(uint8_t pin, GPIO_CFG* t)
{
	ASSERT(t != NULL);
     120:	2900      	cmp	r1, #0
     122:	d100      	bne.n	126 <bc_gpio_init+0x6>
     124:	e7fe      	b.n	124 <bc_gpio_init+0x4>
     126:	2301      	movs	r3, #1
     128:	281c      	cmp	r0, #28
     12a:	d803      	bhi.n	134 <bc_gpio_init+0x14>
     12c:	4a07      	ldr	r2, [pc, #28]	; (14c <bc_gpio_init+0x2c>)
     12e:	2301      	movs	r3, #1
     130:	40c2      	lsrs	r2, r0
     132:	4393      	bics	r3, r2
     134:	b2db      	uxtb	r3, r3
	ASSERT(IS_VALID_PIN(pin));
     136:	2b00      	cmp	r3, #0
     138:	d1fd      	bne.n	136 <bc_gpio_init+0x16>
	HWRITE(CORE_GPIO_CONF + pin, *(uint8_t*)t);
     13a:	4b05      	ldr	r3, [pc, #20]	; (150 <bc_gpio_init+0x30>)
     13c:	18c0      	adds	r0, r0, r3
     13e:	2380      	movs	r3, #128	; 0x80
     140:	055b      	lsls	r3, r3, #21
     142:	4318      	orrs	r0, r3
     144:	780b      	ldrb	r3, [r1, #0]
     146:	7003      	strb	r3, [r0, #0]
}
     148:	4770      	bx	lr
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	1b884040 	.word	0x1b884040
     150:	00008080 	.word	0x00008080

00000154 <bc_gpio_deinit>:

void bc_gpio_deinit(uint8_t pin, GPIO_CFG* t)
{
	ASSERT(t != NULL);
     154:	2900      	cmp	r1, #0
     156:	d100      	bne.n	15a <bc_gpio_deinit+0x6>
     158:	e7fe      	b.n	158 <bc_gpio_deinit+0x4>
     15a:	2301      	movs	r3, #1
     15c:	281c      	cmp	r0, #28
     15e:	d803      	bhi.n	168 <bc_gpio_deinit+0x14>
     160:	4a03      	ldr	r2, [pc, #12]	; (170 <bc_gpio_deinit+0x1c>)
     162:	2301      	movs	r3, #1
     164:	40c2      	lsrs	r2, r0
     166:	4393      	bics	r3, r2
     168:	b2db      	uxtb	r3, r3
	ASSERT(IS_VALID_PIN(pin));
     16a:	2b00      	cmp	r3, #0
     16c:	d1fd      	bne.n	16a <bc_gpio_deinit+0x16>
}
     16e:	4770      	bx	lr
     170:	1b884040 	.word	0x1b884040

00000174 <bc_gpio_set>:

void bc_gpio_set(uint8_t pin, bool val)
{
     174:	b570      	push	{r4, r5, r6, lr}
     176:	2301      	movs	r3, #1
     178:	0004      	movs	r4, r0
     17a:	000d      	movs	r5, r1
     17c:	281c      	cmp	r0, #28
     17e:	d803      	bhi.n	188 <bc_gpio_set+0x14>
     180:	4a0b      	ldr	r2, [pc, #44]	; (1b0 <bc_gpio_set+0x3c>)
     182:	2301      	movs	r3, #1
     184:	40c2      	lsrs	r2, r0
     186:	4393      	bics	r3, r2
     188:	b2db      	uxtb	r3, r3
	ASSERT(IS_VALID_PIN(pin));
     18a:	2b00      	cmp	r3, #0
     18c:	d1fd      	bne.n	18a <bc_gpio_set+0x16>
	//GPIO_SetOut(pin, val);
	hw_delay();
     18e:	f7ff ffc1 	bl	114 <hw_delay>
     192:	4b08      	ldr	r3, [pc, #32]	; (1b4 <bc_gpio_set+0x40>)
     194:	18e4      	adds	r4, r4, r3
     196:	2380      	movs	r3, #128	; 0x80
     198:	055b      	lsls	r3, r3, #21
	if (val)
		HWRITE(CORE_GPIO_CONF + pin, GPCFG_OUTPUT_HIGH);
     19a:	431c      	orrs	r4, r3
void bc_gpio_set(uint8_t pin, bool val)
{
	ASSERT(IS_VALID_PIN(pin));
	//GPIO_SetOut(pin, val);
	hw_delay();
	if (val)
     19c:	2d00      	cmp	r5, #0
     19e:	d002      	beq.n	1a6 <bc_gpio_set+0x32>
		HWRITE(CORE_GPIO_CONF + pin, GPCFG_OUTPUT_HIGH);
     1a0:	233f      	movs	r3, #63	; 0x3f
     1a2:	7023      	strb	r3, [r4, #0]
     1a4:	e001      	b.n	1aa <bc_gpio_set+0x36>
	else
		HWRITE(CORE_GPIO_CONF + pin, GPCFG_OUTPUT_LOW);
     1a6:	233e      	movs	r3, #62	; 0x3e
     1a8:	7023      	strb	r3, [r4, #0]
	hw_delay();
     1aa:	f7ff ffb3 	bl	114 <hw_delay>
}
     1ae:	bd70      	pop	{r4, r5, r6, pc}
     1b0:	1b884040 	.word	0x1b884040
     1b4:	00008080 	.word	0x00008080

000001b8 <bc_gpio_get>:

bool bc_gpio_get(uint8_t pin)
{
     1b8:	b510      	push	{r4, lr}
     1ba:	2301      	movs	r3, #1
     1bc:	0004      	movs	r4, r0
     1be:	281c      	cmp	r0, #28
     1c0:	d803      	bhi.n	1ca <bc_gpio_get+0x12>
     1c2:	4a0d      	ldr	r2, [pc, #52]	; (1f8 <bc_gpio_get+0x40>)
     1c4:	2301      	movs	r3, #1
     1c6:	40c2      	lsrs	r2, r0
     1c8:	4393      	bics	r3, r2
     1ca:	b2db      	uxtb	r3, r3
	ASSERT(IS_VALID_PIN(pin));
     1cc:	2b00      	cmp	r3, #0
     1ce:	d1fd      	bne.n	1cc <bc_gpio_get+0x14>
	hw_delay();
     1d0:	f7ff ffa0 	bl	114 <hw_delay>
	register uint8_t group = 0;
	uint8_t st = 0;
	
	queue = (pin & 7);
	group = pin >> 3 & 3;
	st = HREAD(CORE_GPIO_IN+group);
     1d4:	06e3      	lsls	r3, r4, #27
     1d6:	4a09      	ldr	r2, [pc, #36]	; (1fc <bc_gpio_get+0x44>)
     1d8:	0f9b      	lsrs	r3, r3, #30
     1da:	189b      	adds	r3, r3, r2
     1dc:	2280      	movs	r2, #128	; 0x80
     1de:	0552      	lsls	r2, r2, #21
     1e0:	4313      	orrs	r3, r2
     1e2:	781a      	ldrb	r2, [r3, #0]
	return (st & (1 << queue));
     1e4:	2307      	movs	r3, #7
     1e6:	401c      	ands	r4, r3
     1e8:	3b06      	subs	r3, #6
     1ea:	40a3      	lsls	r3, r4
     1ec:	0018      	movs	r0, r3
     1ee:	4010      	ands	r0, r2
     1f0:	1e43      	subs	r3, r0, #1
     1f2:	4198      	sbcs	r0, r3
     1f4:	b2c0      	uxtb	r0, r0
}
     1f6:	bd10      	pop	{r4, pc}
     1f8:	1b884040 	.word	0x1b884040
     1fc:	0000831c 	.word	0x0000831c

00000200 <hw_delay>:

#define BW(addr)			(int)*(addr) << 24 | (int)*(addr + 1) << 16 | (int)*(addr + 2) << 8 | *(addr + 3)

static inline void hw_delay() 
{
	__asm__ __volatile__("nop");
     200:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     202:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     204:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     206:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     208:	46c0      	nop			; (mov r8, r8)
}
     20a:	4770      	bx	lr

0000020c <HW_REG_16BIT>:
#define OS_ENTER_CRITICAL() __disable_irq() 
#define OS_EXIT_CRITICAL() __enable_irq() 


static inline void HW_REG_16BIT(uint32_t reg, uint16_t word)
{
     20c:	b570      	push	{r4, r5, r6, lr}
     20e:	000c      	movs	r4, r1
     210:	0005      	movs	r5, r0
    HW_REG_8BIT(reg, word & 0x00FF);
     212:	b2cb      	uxtb	r3, r1
     214:	7003      	strb	r3, [r0, #0]
    hw_delay();
    HW_REG_8BIT(reg + 1,(word >> 8));
     216:	0a24      	lsrs	r4, r4, #8


static inline void HW_REG_16BIT(uint32_t reg, uint16_t word)
{
    HW_REG_8BIT(reg, word & 0x00FF);
    hw_delay();
     218:	f7ff fff2 	bl	200 <hw_delay>
    HW_REG_8BIT(reg + 1,(word >> 8));
     21c:	706c      	strb	r4, [r5, #1]
}
     21e:	bd70      	pop	{r4, r5, r6, pc}

00000220 <HR_REG_16BIT>:
static inline uint16_t HR_REG_16BIT(uint32_t reg)
{
     220:	b570      	push	{r4, r5, r6, lr}
     222:	0005      	movs	r5, r0
	uint16_t return_data = 0;
	uint16_t H_data = 0;
	hw_delay();
     224:	f7ff ffec 	bl	200 <hw_delay>
	return_data = HR_REG_8BIT(reg);
     228:	782c      	ldrb	r4, [r5, #0]
	hw_delay();
     22a:	f7ff ffe9 	bl	200 <hw_delay>
	H_data = HR_REG_8BIT(reg + 1);
     22e:	7868      	ldrb	r0, [r5, #1]
static inline uint16_t HR_REG_16BIT(uint32_t reg)
{
	uint16_t return_data = 0;
	uint16_t H_data = 0;
	hw_delay();
	return_data = HR_REG_8BIT(reg);
     230:	b2e4      	uxtb	r4, r4
	hw_delay();
	H_data = HR_REG_8BIT(reg + 1);
	return_data = (return_data | ((H_data << 8) & 0xFF00));
	return return_data;
     232:	0200      	lsls	r0, r0, #8
     234:	4320      	orrs	r0, r4
}
     236:	bd70      	pop	{r4, r5, r6, pc}

00000238 <usartInitByBackup>:

UartxRegControlBackup regBeck[UART_PER_NUM];


static void usartInitByBackup(USART_TypeDef USARTx)
{
     238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t UartxCtrlAdr = 0;
	UartxRegDef *UartAdr = NULL;
	/*set uart control*/
	if(USARTx == UARTA) {
     23a:	2800      	cmp	r0, #0
     23c:	d004      	beq.n	248 <usartInitByBackup+0x10>
		UartxCtrlAdr = CORE_UART_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
	}else if(USARTx == UARTB) {
     23e:	2801      	cmp	r0, #1
     240:	d105      	bne.n	24e <usartInitByBackup+0x16>
		UartxCtrlAdr = CORE_UARTB_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     242:	4e1b      	ldr	r6, [pc, #108]	; (2b0 <usartInitByBackup+0x78>)
	/*set uart control*/
	if(USARTx == UARTA) {
		UartxCtrlAdr = CORE_UART_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
	}else if(USARTx == UARTB) {
		UartxCtrlAdr = CORE_UARTB_CTRL;
     244:	4b1b      	ldr	r3, [pc, #108]	; (2b4 <usartInitByBackup+0x7c>)
     246:	e004      	b.n	252 <usartInitByBackup+0x1a>
	uint16_t UartxCtrlAdr = 0;
	UartxRegDef *UartAdr = NULL;
	/*set uart control*/
	if(USARTx == UARTA) {
		UartxCtrlAdr = CORE_UART_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
     248:	4e1b      	ldr	r6, [pc, #108]	; (2b8 <usartInitByBackup+0x80>)
{
	uint16_t UartxCtrlAdr = 0;
	UartxRegDef *UartAdr = NULL;
	/*set uart control*/
	if(USARTx == UARTA) {
		UartxCtrlAdr = CORE_UART_CTRL;
     24a:	4b1c      	ldr	r3, [pc, #112]	; (2bc <usartInitByBackup+0x84>)
     24c:	e001      	b.n	252 <usartInitByBackup+0x1a>


static void usartInitByBackup(USART_TypeDef USARTx)
{
	uint16_t UartxCtrlAdr = 0;
	UartxRegDef *UartAdr = NULL;
     24e:	2600      	movs	r6, #0
UartxRegControlBackup regBeck[UART_PER_NUM];


static void usartInitByBackup(USART_TypeDef USARTx)
{
	uint16_t UartxCtrlAdr = 0;
     250:	0033      	movs	r3, r6
	}else if(USARTx == UARTB) {
		UartxCtrlAdr = CORE_UARTB_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}

	HWCOR(UartxCtrlAdr, 1);
     252:	2580      	movs	r5, #128	; 0x80
     254:	2201      	movs	r2, #1
     256:	056d      	lsls	r5, r5, #21
     258:	431d      	orrs	r5, r3
     25a:	782b      	ldrb	r3, [r5, #0]

	/*init all reg by backup*/
	HW_REG_16BIT(((uint32_t)(&UartAdr->Baudrate)), regBeck[USARTx].rbu.Baudrate);
     25c:	4f18      	ldr	r7, [pc, #96]	; (2c0 <usartInitByBackup+0x88>)
	}else if(USARTx == UARTB) {
		UartxCtrlAdr = CORE_UARTB_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}

	HWCOR(UartxCtrlAdr, 1);
     25e:	4393      	bics	r3, r2
     260:	702b      	strb	r3, [r5, #0]

	/*init all reg by backup*/
	HW_REG_16BIT(((uint32_t)(&UartAdr->Baudrate)), regBeck[USARTx].rbu.Baudrate);
     262:	0104      	lsls	r4, r0, #4
     264:	5be1      	ldrh	r1, [r4, r7]
     266:	0030      	movs	r0, r6
     268:	f7ff ffd0 	bl	20c <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->TxSadr)), (uint32_t)regBeck[USARTx].rbu.TxSadr);
     26c:	0030      	movs	r0, r6
     26e:	193c      	adds	r4, r7, r4
     270:	8921      	ldrh	r1, [r4, #8]
     272:	3008      	adds	r0, #8
     274:	f7ff ffca 	bl	20c <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->TxEadr)), (uint32_t)regBeck[USARTx].rbu.TxEadr);
     278:	0030      	movs	r0, r6
     27a:	8961      	ldrh	r1, [r4, #10]
     27c:	300a      	adds	r0, #10
     27e:	f7ff ffc5 	bl	20c <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->TxWptr)), (uint32_t)regBeck[USARTx].rbu.TxSadr);
     282:	0030      	movs	r0, r6
     284:	8921      	ldrh	r1, [r4, #8]
     286:	300c      	adds	r0, #12
     288:	f7ff ffc0 	bl	20c <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->RxSadr)), (uint32_t)regBeck[USARTx].rbu.RxSadr);
     28c:	1cb0      	adds	r0, r6, #2
     28e:	8861      	ldrh	r1, [r4, #2]
     290:	f7ff ffbc 	bl	20c <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->RxEadr)), (uint32_t)regBeck[USARTx].rbu.RxEadr);
     294:	1d30      	adds	r0, r6, #4
     296:	88a1      	ldrh	r1, [r4, #4]
     298:	f7ff ffb8 	bl	20c <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->RxRptr)), (uint32_t)regBeck[USARTx].rbu.RxSadr);
     29c:	1db0      	adds	r0, r6, #6
     29e:	8861      	ldrh	r1, [r4, #2]
     2a0:	f7ff ffb4 	bl	20c <HW_REG_16BIT>
	HWOR(UartxCtrlAdr, regBeck[USARTx].cbu);
     2a4:	782a      	ldrb	r2, [r5, #0]
     2a6:	7ba3      	ldrb	r3, [r4, #14]
     2a8:	4313      	orrs	r3, r2
     2aa:	702b      	strb	r3, [r5, #0]
}
     2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	10008072 	.word	0x10008072
     2b4:	00008071 	.word	0x00008071
     2b8:	10008052 	.word	0x10008052
     2bc:	00008060 	.word	0x00008060
     2c0:	10010d7e 	.word	0x10010d7e

000002c4 <USART_Init>:
	return SUCCESS;
}
#endif

void USART_Init(USART_TypeDef USARTx, USART_InitTypeDef* USART_InitStruct)
{	
     2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2c6:	0006      	movs	r6, r0
     2c8:	1e0c      	subs	r4, r1, #0
#define BAUD_USE_SETTING (1<<7)
	void *Ptr = NULL;
	uint8_t CtrValue = 0;

	/*check parameter*/
	ASSERT(USART_InitStruct != NULL);
     2ca:	d100      	bne.n	2ce <USART_Init+0xa>
     2cc:	e7fe      	b.n	2cc <USART_Init+0x8>
	ASSERT(IS_USARTAB(USARTx));
     2ce:	2e01      	cmp	r6, #1
     2d0:	d8fd      	bhi.n	2ce <USART_Init+0xa>
	ASSERT(IS_UARTE_BAUDRATE(USART_InitStruct->USART_BaudRate));
     2d2:	6823      	ldr	r3, [r4, #0]
     2d4:	4a33      	ldr	r2, [pc, #204]	; (3a4 <USART_Init+0xe0>)
     2d6:	3b01      	subs	r3, #1
     2d8:	4293      	cmp	r3, r2
     2da:	d8fd      	bhi.n	2d8 <USART_Init+0x14>
	ASSERT(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
     2dc:	2204      	movs	r2, #4
     2de:	88a3      	ldrh	r3, [r4, #4]
     2e0:	4393      	bics	r3, r2
     2e2:	2b00      	cmp	r3, #0
     2e4:	d1fd      	bne.n	2e2 <USART_Init+0x1e>
	ASSERT(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
     2e6:	2208      	movs	r2, #8
     2e8:	88e3      	ldrh	r3, [r4, #6]
     2ea:	4393      	bics	r3, r2
     2ec:	2b00      	cmp	r3, #0
     2ee:	d1fd      	bne.n	2ec <USART_Init+0x28>
	ASSERT(IS_USART_PARITY(USART_InitStruct->USART_Parity));
     2f0:	2202      	movs	r2, #2
     2f2:	8923      	ldrh	r3, [r4, #8]
     2f4:	4393      	bics	r3, r2
     2f6:	2b00      	cmp	r3, #0
     2f8:	d1fd      	bne.n	2f6 <USART_Init+0x32>
	ASSERT(IS_USART_MODE(USART_InitStruct->USART_Mode));
     2fa:	2240      	movs	r2, #64	; 0x40
     2fc:	8963      	ldrh	r3, [r4, #10]
     2fe:	4393      	bics	r3, r2
     300:	2b00      	cmp	r3, #0
     302:	d1fd      	bne.n	300 <USART_Init+0x3c>
	ASSERT(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
     304:	2210      	movs	r2, #16
     306:	89a3      	ldrh	r3, [r4, #12]
     308:	4393      	bics	r3, r2
     30a:	2b00      	cmp	r3, #0
     30c:	d1fd      	bne.n	30a <USART_Init+0x46>
	ASSERT(IS_USART_TXLen(USART_InitStruct->USART_TXLen));
     30e:	89e3      	ldrh	r3, [r4, #14]
     310:	2b00      	cmp	r3, #0
     312:	d100      	bne.n	316 <USART_Init+0x52>
     314:	e7fe      	b.n	314 <USART_Init+0x50>
	ASSERT(IS_USART_RXLen(USART_InitStruct->USART_RXLen));
     316:	8a23      	ldrh	r3, [r4, #16]
     318:	2b00      	cmp	r3, #0
     31a:	d100      	bne.n	31e <USART_Init+0x5a>
     31c:	e7fe      	b.n	31c <USART_Init+0x58>

	HWRITE(CORE_UART_CLKSEL, 1);
     31e:	2101      	movs	r1, #1
	HWCOR(CORE_CLKOFF + 1, 0x80);
     320:	227f      	movs	r2, #127	; 0x7f
	ASSERT(IS_USART_MODE(USART_InitStruct->USART_Mode));
	ASSERT(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
	ASSERT(IS_USART_TXLen(USART_InitStruct->USART_TXLen));
	ASSERT(IS_USART_RXLen(USART_InitStruct->USART_RXLen));

	HWRITE(CORE_UART_CLKSEL, 1);
     322:	4b21      	ldr	r3, [pc, #132]	; (3a8 <USART_Init+0xe4>)
	HWCOR(CORE_CLKOFF + 1, 0x80);
     324:	4821      	ldr	r0, [pc, #132]	; (3ac <USART_Init+0xe8>)
	ASSERT(IS_USART_MODE(USART_InitStruct->USART_Mode));
	ASSERT(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
	ASSERT(IS_USART_TXLen(USART_InitStruct->USART_TXLen));
	ASSERT(IS_USART_RXLen(USART_InitStruct->USART_RXLen));

	HWRITE(CORE_UART_CLKSEL, 1);
     326:	7019      	strb	r1, [r3, #0]
	HWCOR(CORE_CLKOFF + 1, 0x80);
     328:	7805      	ldrb	r5, [r0, #0]
     32a:	402a      	ands	r2, r5
     32c:	7002      	strb	r2, [r0, #0]
	if(USART_InitStruct->USART_BaudRate == BAUD9600){
     32e:	6820      	ldr	r0, [r4, #0]
     330:	4a1f      	ldr	r2, [pc, #124]	; (3b0 <USART_Init+0xec>)
     332:	4290      	cmp	r0, r2
     334:	d102      	bne.n	33c <USART_Init+0x78>
		HWCOR(CORE_UART_CLKSEL, 0x01);
     336:	781a      	ldrb	r2, [r3, #0]
     338:	438a      	bics	r2, r1
     33a:	701a      	strb	r2, [r3, #0]
	}

	/*init baud backup*/
	regBeck[USARTx].rbu.Baudrate = USART_InitStruct->USART_BaudRate;
     33c:	4f1d      	ldr	r7, [pc, #116]	; (3b4 <USART_Init+0xf0>)
     33e:	8823      	ldrh	r3, [r4, #0]
     340:	0135      	lsls	r5, r6, #4
     342:	53eb      	strh	r3, [r5, r7]
	
	/*init tx ring buffer backup*/
	Ptr = malloc(USART_InitStruct->USART_TXLen);
     344:	89e3      	ldrh	r3, [r4, #14]
	regBeck[USARTx].rbu.TxSadr = (uint32_t)Ptr;
     346:	197d      	adds	r5, r7, r5

	/*init baud backup*/
	regBeck[USARTx].rbu.Baudrate = USART_InitStruct->USART_BaudRate;
	
	/*init tx ring buffer backup*/
	Ptr = malloc(USART_InitStruct->USART_TXLen);
     348:	0018      	movs	r0, r3
     34a:	9301      	str	r3, [sp, #4]
     34c:	f000 fa3e 	bl	7cc <malloc>
	regBeck[USARTx].rbu.TxSadr = (uint32_t)Ptr;
     350:	b283      	uxth	r3, r0
     352:	812b      	strh	r3, [r5, #8]

	ASSERT(Ptr != NULL);	
     354:	2800      	cmp	r0, #0
     356:	d100      	bne.n	35a <USART_Init+0x96>
     358:	e7fe      	b.n	358 <USART_Init+0x94>
	regBeck[USARTx].rbu.TxEadr = ((uint32_t)Ptr) + USART_InitStruct->USART_TXLen;
     35a:	9a01      	ldr	r2, [sp, #4]
     35c:	18d3      	adds	r3, r2, r3
     35e:	816b      	strh	r3, [r5, #10]
	Ptr = NULL;
	
	/*init rx ring buffer backup*/
	Ptr = malloc(USART_InitStruct->USART_RXLen);
     360:	8a27      	ldrh	r7, [r4, #16]
     362:	0038      	movs	r0, r7
     364:	f000 fa32 	bl	7cc <malloc>
	regBeck[USARTx].rbu.RxSadr = (uint32_t)Ptr;
     368:	b283      	uxth	r3, r0
     36a:	806b      	strh	r3, [r5, #2]
	ASSERT(Ptr != NULL);	
     36c:	2800      	cmp	r0, #0
     36e:	d100      	bne.n	372 <USART_Init+0xae>
     370:	e7fe      	b.n	370 <USART_Init+0xac>
	regBeck[USARTx].rbu.RxEadr = ((uint32_t)Ptr) + USART_InitStruct->USART_RXLen;
     372:	18ff      	adds	r7, r7, r3
     374:	80af      	strh	r7, [r5, #4]

	CtrValue =  USART_InitStruct->USART_Mode | USART_InitStruct->USART_HardwareFlowControl |\
			  USART_InitStruct->USART_Parity |USART_InitStruct->USART_StopBits| \
			  USART_InitStruct->USART_WordLength|BAUD_USE_SETTING|UARTC_BIT_ENABLE;
	
	regBeck[USARTx].cbu = CtrValue;
     376:	8962      	ldrh	r2, [r4, #10]
     378:	89a3      	ldrh	r3, [r4, #12]
     37a:	4313      	orrs	r3, r2
     37c:	227f      	movs	r2, #127	; 0x7f
     37e:	4252      	negs	r2, r2
     380:	4313      	orrs	r3, r2
     382:	8922      	ldrh	r2, [r4, #8]
     384:	4313      	orrs	r3, r2
     386:	88e2      	ldrh	r2, [r4, #6]
     388:	4313      	orrs	r3, r2
     38a:	88a2      	ldrh	r2, [r4, #4]
     38c:	4313      	orrs	r3, r2
     38e:	73ab      	strb	r3, [r5, #14]

	/*init rx ring buffer regs*/
	if(USARTx == UARTA) {
     390:	2e00      	cmp	r6, #0
     392:	d103      	bne.n	39c <USART_Init+0xd8>
		usartInitByBackup(UARTA);
     394:	0030      	movs	r0, r6
     396:	f7ff ff4f 	bl	238 <usartInitByBackup>
     39a:	e002      	b.n	3a2 <USART_Init+0xde>
		//DEV_Register(Device_Id_UartA, usartAReinit, NULL);
	}
	else {
		usartInitByBackup(UARTB);
     39c:	2001      	movs	r0, #1
     39e:	f7ff ff4b 	bl	238 <usartInitByBackup>
		//DEV_Register(Device_Id_UartB, usartBReinit, NULL);
	}

}
     3a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a4:	00008ffe 	.word	0x00008ffe
     3a8:	10008043 	.word	0x10008043
     3ac:	10008051 	.word	0x10008051
     3b0:	000089c4 	.word	0x000089c4
     3b4:	10010d7e 	.word	0x10010d7e

000003b8 <USART_DeInit>:


void USART_DeInit(USART_TypeDef USARTx)
{
     3b8:	b510      	push	{r4, lr}
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
     3ba:	2801      	cmp	r0, #1
     3bc:	d8fd      	bhi.n	3ba <USART_DeInit+0x2>
     3be:	2201      	movs	r2, #1
	
	if(USARTx == UARTA) {
     3c0:	2800      	cmp	r0, #0
     3c2:	d108      	bne.n	3d6 <USART_DeInit+0x1e>
		HWOR(reg_map(CORE_UART_CTRL), (1<<0));
     3c4:	4b0b      	ldr	r3, [pc, #44]	; (3f4 <USART_DeInit+0x3c>)
		HWOR(reg_map(CORE_UART_CTRL), (0<<0));
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
     3c6:	4c0c      	ldr	r4, [pc, #48]	; (3f8 <USART_DeInit+0x40>)
{
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
	
	if(USARTx == UARTA) {
		HWOR(reg_map(CORE_UART_CTRL), (1<<0));
     3c8:	7819      	ldrb	r1, [r3, #0]
     3ca:	430a      	orrs	r2, r1
     3cc:	701a      	strb	r2, [r3, #0]
		HWOR(reg_map(CORE_UART_CTRL), (0<<0));
     3ce:	781a      	ldrb	r2, [r3, #0]
     3d0:	b2d2      	uxtb	r2, r2
     3d2:	701a      	strb	r2, [r3, #0]
     3d4:	e007      	b.n	3e6 <USART_DeInit+0x2e>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
	}else {

		HWOR(reg_map(CORE_UARTB_CTRL), (1<<0));
     3d6:	4b09      	ldr	r3, [pc, #36]	; (3fc <USART_DeInit+0x44>)
		HWOR(reg_map(CORE_UARTB_CTRL), (0<<0));
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     3d8:	4c09      	ldr	r4, [pc, #36]	; (400 <USART_DeInit+0x48>)
		HWOR(reg_map(CORE_UART_CTRL), (1<<0));
		HWOR(reg_map(CORE_UART_CTRL), (0<<0));
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
	}else {

		HWOR(reg_map(CORE_UARTB_CTRL), (1<<0));
     3da:	7819      	ldrb	r1, [r3, #0]
     3dc:	430a      	orrs	r2, r1
     3de:	701a      	strb	r2, [r3, #0]
		HWOR(reg_map(CORE_UARTB_CTRL), (0<<0));
     3e0:	781a      	ldrb	r2, [r3, #0]
     3e2:	b2d2      	uxtb	r2, r2
     3e4:	701a      	strb	r2, [r3, #0]
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
	free((void *)((uint32_t)(UartAdr->TxSadr)));
     3e6:	8920      	ldrh	r0, [r4, #8]
     3e8:	f000 f9fa 	bl	7e0 <free>
	free((void *)((uint32_t)(UartAdr->RxSadr)));
     3ec:	8860      	ldrh	r0, [r4, #2]
     3ee:	f000 f9f7 	bl	7e0 <free>
}
     3f2:	bd10      	pop	{r4, pc}
     3f4:	10008060 	.word	0x10008060
     3f8:	10008052 	.word	0x10008052
     3fc:	10008071 	.word	0x10008071
     400:	10008072 	.word	0x10008072

00000404 <USART_SendData>:



void USART_SendData(USART_TypeDef USARTx, uint16_t Data)
{
     404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     406:	0006      	movs	r6, r0
     408:	9101      	str	r1, [sp, #4]
	UartxRegDef * UartAdr = NULL;
	uint16_t  WPtr = 0; 
	ASSERT(IS_USARTAB(USARTx));
     40a:	2e01      	cmp	r6, #1
     40c:	d8fd      	bhi.n	40a <USART_SendData+0x6>
	
	if(USARTx == UARTA) {
     40e:	2e00      	cmp	r6, #0
     410:	d001      	beq.n	416 <USART_SendData+0x12>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     412:	4c15      	ldr	r4, [pc, #84]	; (468 <USART_SendData+0x64>)
     414:	e000      	b.n	418 <USART_SendData+0x14>
	UartxRegDef * UartAdr = NULL;
	uint16_t  WPtr = 0; 
	ASSERT(IS_USARTAB(USARTx));
	
	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
     416:	4c15      	ldr	r4, [pc, #84]	; (46c <USART_SendData+0x68>)
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
	ASSERT((&UartAdr->TxSadr  != NULL));
	
	WPtr = HR_REG_16BIT((uint32_t)(&UartAdr->TxWptr));
     418:	0027      	movs	r7, r4
     41a:	370c      	adds	r7, #12
     41c:	0038      	movs	r0, r7
     41e:	f7ff feff 	bl	220 <HR_REG_16BIT>
     422:	0005      	movs	r5, r0
	if(USARTx == UARTA) {
     424:	2e00      	cmp	r6, #0
     426:	d104      	bne.n	432 <USART_SendData+0x2e>
		while(HREAD(CORE_UART_TX_ITEMS) > 0);
     428:	4a11      	ldr	r2, [pc, #68]	; (470 <USART_SendData+0x6c>)
     42a:	7813      	ldrb	r3, [r2, #0]
     42c:	2b00      	cmp	r3, #0
     42e:	d1fc      	bne.n	42a <USART_SendData+0x26>
     430:	e003      	b.n	43a <USART_SendData+0x36>
	}else {
		while(HREAD(CORE_UARTB_TX_ITEMS) > 0);
     432:	4a10      	ldr	r2, [pc, #64]	; (474 <USART_SendData+0x70>)
     434:	7813      	ldrb	r3, [r2, #0]
     436:	2b00      	cmp	r3, #0
     438:	d1fc      	bne.n	434 <USART_SendData+0x30>
	}	
	HW_REG_8BIT(WPtr|M0_MEMORY_BASE,Data);	
     43a:	466a      	mov	r2, sp
	RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	
     43c:	0020      	movs	r0, r4
	if(USARTx == UARTA) {
		while(HREAD(CORE_UART_TX_ITEMS) > 0);
	}else {
		while(HREAD(CORE_UARTB_TX_ITEMS) > 0);
	}	
	HW_REG_8BIT(WPtr|M0_MEMORY_BASE,Data);	
     43e:	4b0e      	ldr	r3, [pc, #56]	; (478 <USART_SendData+0x74>)
     440:	7912      	ldrb	r2, [r2, #4]
     442:	432b      	orrs	r3, r5
     444:	701a      	strb	r2, [r3, #0]
	RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	
     446:	300a      	adds	r0, #10
     448:	f7ff feea 	bl	220 <HR_REG_16BIT>
     44c:	1c69      	adds	r1, r5, #1
     44e:	b289      	uxth	r1, r1
     450:	4285      	cmp	r5, r0
     452:	d104      	bne.n	45e <USART_SendData+0x5a>
	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
	ASSERT((&UartAdr->TxSadr  != NULL));
     454:	0020      	movs	r0, r4
     456:	3008      	adds	r0, #8
		while(HREAD(CORE_UART_TX_ITEMS) > 0);
	}else {
		while(HREAD(CORE_UARTB_TX_ITEMS) > 0);
	}	
	HW_REG_8BIT(WPtr|M0_MEMORY_BASE,Data);	
	RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	
     458:	f7ff fee2 	bl	220 <HR_REG_16BIT>
     45c:	0001      	movs	r1, r0
	HW_REG_16BIT((uint32_t)(&UartAdr->TxWptr),  WPtr);                                                                                                		
     45e:	0038      	movs	r0, r7
     460:	f7ff fed4 	bl	20c <HW_REG_16BIT>
}
     464:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     466:	46c0      	nop			; (mov r8, r8)
     468:	10008072 	.word	0x10008072
     46c:	10008052 	.word	0x10008052
     470:	1000830e 	.word	0x1000830e
     474:	10008356 	.word	0x10008356
     478:	10010000 	.word	0x10010000

0000047c <USART_ReceiveData>:



uint16_t USART_ReceiveData(USART_TypeDef USARTx)
{	
     47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UartxRegDef *UartAdr = NULL;
	uint16_t  RPtr = 0;
	uint16_t  RdData = 0;
	ASSERT(IS_USARTAB(USARTx)); 
     47e:	2801      	cmp	r0, #1
     480:	d8fd      	bhi.n	47e <USART_ReceiveData+0x2>

	if(USARTx == UARTA) {
     482:	2800      	cmp	r0, #0
     484:	d001      	beq.n	48a <USART_ReceiveData+0xe>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     486:	4c0e      	ldr	r4, [pc, #56]	; (4c0 <USART_ReceiveData+0x44>)
     488:	e000      	b.n	48c <USART_ReceiveData+0x10>
	uint16_t  RPtr = 0;
	uint16_t  RdData = 0;
	ASSERT(IS_USARTAB(USARTx)); 

	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
     48a:	4c0e      	ldr	r4, [pc, #56]	; (4c4 <USART_ReceiveData+0x48>)
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
	RPtr = HR_REG_16BIT((uint32_t)(&UartAdr->RxRptr));
     48c:	1da5      	adds	r5, r4, #6
     48e:	0028      	movs	r0, r5
     490:	f7ff fec6 	bl	220 <HR_REG_16BIT>
     494:	0007      	movs	r7, r0
	RdData = HR_REG_16BIT(RPtr|M0_MEMORY_BASE);
     496:	480c      	ldr	r0, [pc, #48]	; (4c8 <USART_ReceiveData+0x4c>)
     498:	4338      	orrs	r0, r7
     49a:	f7ff fec1 	bl	220 <HR_REG_16BIT>
     49e:	0006      	movs	r6, r0
	RB_UPDATE_PTR(RPtr, HR_REG_16BIT((uint32_t)(&UartAdr->RxSadr)), HR_REG_16BIT((uint32_t)(&UartAdr->RxEadr)));
     4a0:	1d20      	adds	r0, r4, #4
     4a2:	f7ff febd 	bl	220 <HR_REG_16BIT>
     4a6:	1c79      	adds	r1, r7, #1
     4a8:	b289      	uxth	r1, r1
     4aa:	4287      	cmp	r7, r0
     4ac:	d103      	bne.n	4b6 <USART_ReceiveData+0x3a>
     4ae:	1ca0      	adds	r0, r4, #2
     4b0:	f7ff feb6 	bl	220 <HR_REG_16BIT>
     4b4:	0001      	movs	r1, r0
	HW_REG_16BIT((uint32_t)(&UartAdr->RxRptr), RPtr);	
     4b6:	0028      	movs	r0, r5
     4b8:	f7ff fea8 	bl	20c <HW_REG_16BIT>
	return RdData;
}
     4bc:	0030      	movs	r0, r6
     4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4c0:	10008072 	.word	0x10008072
     4c4:	10008052 	.word	0x10008052
     4c8:	10010000 	.word	0x10010000

000004cc <USART_GetRxCount>:


uint16_t USART_GetRxCount(USART_TypeDef USARTx)
{
     4cc:	b510      	push	{r4, lr}
	ASSERT(IS_USARTAB(USARTx));
     4ce:	2801      	cmp	r0, #1
     4d0:	d8fd      	bhi.n	4ce <USART_GetRxCount+0x2>
	if(USARTx == UARTA) {
     4d2:	2800      	cmp	r0, #0
     4d4:	d103      	bne.n	4de <USART_GetRxCount+0x12>
		return HR_REG_16BIT(reg_map(CORE_UART_RX_ITEMS));
     4d6:	4804      	ldr	r0, [pc, #16]	; (4e8 <USART_GetRxCount+0x1c>)
     4d8:	f7ff fea2 	bl	220 <HR_REG_16BIT>
     4dc:	e002      	b.n	4e4 <USART_GetRxCount+0x18>
	}else {
		return HR_REG_16BIT(reg_map(CORE_UARTB_RX_ITEMS));
     4de:	4803      	ldr	r0, [pc, #12]	; (4ec <USART_GetRxCount+0x20>)
     4e0:	f7ff fe9e 	bl	220 <HR_REG_16BIT>
	}
}
     4e4:	bd10      	pop	{r4, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	10008312 	.word	0x10008312
     4ec:	1000835a 	.word	0x1000835a

000004f0 <USART_ReadDatatoBuff>:


uint16_t USART_ReadDatatoBuff(USART_TypeDef USARTx, uint8_t* RxBuff, uint16_t RxSize)
{
     4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4f2:	000d      	movs	r5, r1
     4f4:	0016      	movs	r6, r2
	uint16_t RxLen = 0;	
	uint16_t RPtr = 0;
	uint16_t RdataLen = 0;
	uint32_t RxITEMS = 0;
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
     4f6:	2801      	cmp	r0, #1
     4f8:	d8fd      	bhi.n	4f6 <USART_ReadDatatoBuff+0x6>
	ASSERT(RxBuff != NULL);
     4fa:	2d00      	cmp	r5, #0
     4fc:	d100      	bne.n	500 <USART_ReadDatatoBuff+0x10>
     4fe:	e7fe      	b.n	4fe <USART_ReadDatatoBuff+0xe>
	
	if(USARTx == UARTA) {
     500:	2800      	cmp	r0, #0
     502:	d002      	beq.n	50a <USART_ReadDatatoBuff+0x1a>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
		RxITEMS = reg_map(CORE_UART_RX_ITEMS);
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     504:	4f1a      	ldr	r7, [pc, #104]	; (570 <USART_ReadDatatoBuff+0x80>)
		RxITEMS = reg_map(CORE_UARTB_RX_ITEMS);
     506:	481b      	ldr	r0, [pc, #108]	; (574 <USART_ReadDatatoBuff+0x84>)
     508:	e001      	b.n	50e <USART_ReadDatatoBuff+0x1e>
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
	ASSERT(RxBuff != NULL);
	
	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
     50a:	4f1b      	ldr	r7, [pc, #108]	; (578 <USART_ReadDatatoBuff+0x88>)
		RxITEMS = reg_map(CORE_UART_RX_ITEMS);
     50c:	481b      	ldr	r0, [pc, #108]	; (57c <USART_ReadDatatoBuff+0x8c>)
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
		RxITEMS = reg_map(CORE_UARTB_RX_ITEMS);
	}
	RxLen = HR_REG_16BIT(reg_map(RxITEMS)); 
     50e:	f7ff fe87 	bl	220 <HR_REG_16BIT>
	if (RxSize!=0) {
     512:	2e00      	cmp	r6, #0
     514:	d003      	beq.n	51e <USART_ReadDatatoBuff+0x2e>
		if (RxLen < RxSize) return 0; else RxLen = RxSize;
     516:	2300      	movs	r3, #0
     518:	42b0      	cmp	r0, r6
     51a:	d204      	bcs.n	526 <USART_ReadDatatoBuff+0x36>
     51c:	e025      	b.n	56a <USART_ReadDatatoBuff+0x7a>
     51e:	0033      	movs	r3, r6
	}
	if (0 == RxLen) {
     520:	2800      	cmp	r0, #0
     522:	d022      	beq.n	56a <USART_ReadDatatoBuff+0x7a>
     524:	0006      	movs	r6, r0
        return 0;
	} else {
		RPtr = HR_REG_16BIT((uint32_t)(&UartAdr->RxRptr));
     526:	1dbb      	adds	r3, r7, #6
     528:	0018      	movs	r0, r3
     52a:	9300      	str	r3, [sp, #0]
     52c:	f7ff fe78 	bl	220 <HR_REG_16BIT>
     530:	0004      	movs	r4, r0
     532:	19ab      	adds	r3, r5, r6
     534:	9301      	str	r3, [sp, #4]
		for(RdataLen = 0; RdataLen<RxLen; RdataLen++ ){
     536:	9b01      	ldr	r3, [sp, #4]
     538:	429d      	cmp	r5, r3
     53a:	d011      	beq.n	560 <USART_ReadDatatoBuff+0x70>
			RxBuff[RdataLen] = HR_REG_8BIT(RPtr|M0_MEMORY_BASE);   
     53c:	4b10      	ldr	r3, [pc, #64]	; (580 <USART_ReadDatatoBuff+0x90>)
			RB_UPDATE_PTR(RPtr, HR_REG_16BIT((uint32_t)(&UartAdr->RxSadr)), HR_REG_16BIT((uint32_t)(&UartAdr->RxEadr)));
     53e:	1d38      	adds	r0, r7, #4
	if (0 == RxLen) {
        return 0;
	} else {
		RPtr = HR_REG_16BIT((uint32_t)(&UartAdr->RxRptr));
		for(RdataLen = 0; RdataLen<RxLen; RdataLen++ ){
			RxBuff[RdataLen] = HR_REG_8BIT(RPtr|M0_MEMORY_BASE);   
     540:	4323      	orrs	r3, r4
     542:	781b      	ldrb	r3, [r3, #0]
     544:	702b      	strb	r3, [r5, #0]
			RB_UPDATE_PTR(RPtr, HR_REG_16BIT((uint32_t)(&UartAdr->RxSadr)), HR_REG_16BIT((uint32_t)(&UartAdr->RxEadr)));
     546:	f7ff fe6b 	bl	220 <HR_REG_16BIT>
     54a:	4284      	cmp	r4, r0
     54c:	d104      	bne.n	558 <USART_ReadDatatoBuff+0x68>
     54e:	1cb8      	adds	r0, r7, #2
     550:	f7ff fe66 	bl	220 <HR_REG_16BIT>
     554:	0004      	movs	r4, r0
     556:	e001      	b.n	55c <USART_ReadDatatoBuff+0x6c>
     558:	3401      	adds	r4, #1
     55a:	b2a4      	uxth	r4, r4
     55c:	3501      	adds	r5, #1
     55e:	e7ea      	b.n	536 <USART_ReadDatatoBuff+0x46>
		}
	}
	HW_REG_16BIT((uint32_t)(&UartAdr->RxRptr), (RPtr));
     560:	0021      	movs	r1, r4
     562:	9800      	ldr	r0, [sp, #0]
     564:	f7ff fe52 	bl	20c <HW_REG_16BIT>
	return RdataLen;
     568:	0033      	movs	r3, r6
}
     56a:	0018      	movs	r0, r3
     56c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	10008072 	.word	0x10008072
     574:	1000835a 	.word	0x1000835a
     578:	10008052 	.word	0x10008052
     57c:	10008312 	.word	0x10008312
     580:	10010000 	.word	0x10010000

00000584 <USART_SendDataFromBuff>:

uint16_t USART_SendDataFromBuff(USART_TypeDef USARTx, uint8_t* TxBuff, uint16_t TxLen)
{
     584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     586:	000d      	movs	r5, r1
     588:	0017      	movs	r7, r2
	uint16_t  WPtr = 0;
	uint16_t  SDataLen = 0;	
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
     58a:	2801      	cmp	r0, #1
     58c:	d8fd      	bhi.n	58a <USART_SendDataFromBuff+0x6>
	ASSERT(TxBuff != 0);
     58e:	2d00      	cmp	r5, #0
     590:	d100      	bne.n	594 <USART_SendDataFromBuff+0x10>
     592:	e7fe      	b.n	592 <USART_SendDataFromBuff+0xe>
	ASSERT(TxLen > 0);
     594:	2f00      	cmp	r7, #0
     596:	d100      	bne.n	59a <USART_SendDataFromBuff+0x16>
     598:	e7fe      	b.n	598 <USART_SendDataFromBuff+0x14>
	
	if(USARTx == UARTA) {
     59a:	2800      	cmp	r0, #0
     59c:	d001      	beq.n	5a2 <USART_SendDataFromBuff+0x1e>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     59e:	4e14      	ldr	r6, [pc, #80]	; (5f0 <USART_SendDataFromBuff+0x6c>)
     5a0:	e000      	b.n	5a4 <USART_SendDataFromBuff+0x20>
	ASSERT(IS_USARTAB(USARTx));
	ASSERT(TxBuff != 0);
	ASSERT(TxLen > 0);
	
	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
     5a2:	4e14      	ldr	r6, [pc, #80]	; (5f4 <USART_SendDataFromBuff+0x70>)
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
   	WPtr = HR_REG_16BIT((uint32_t)(&UartAdr->TxWptr));
     5a4:	0033      	movs	r3, r6
     5a6:	330c      	adds	r3, #12
     5a8:	0018      	movs	r0, r3
     5aa:	9300      	str	r3, [sp, #0]
     5ac:	f7ff fe38 	bl	220 <HR_REG_16BIT>
     5b0:	0004      	movs	r4, r0
     5b2:	19eb      	adds	r3, r5, r7
     5b4:	9301      	str	r3, [sp, #4]
   	for (uint16_t i=0; i<TxLen; i++)  {	
     5b6:	9b01      	ldr	r3, [sp, #4]
     5b8:	429d      	cmp	r5, r3
     5ba:	d013      	beq.n	5e4 <USART_SendDataFromBuff+0x60>
		HW_REG_8BIT(WPtr|M0_MEMORY_BASE,TxBuff[i]);	
		RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	   
     5bc:	0030      	movs	r0, r6
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
   	WPtr = HR_REG_16BIT((uint32_t)(&UartAdr->TxWptr));
   	for (uint16_t i=0; i<TxLen; i++)  {	
		HW_REG_8BIT(WPtr|M0_MEMORY_BASE,TxBuff[i]);	
     5be:	4b0e      	ldr	r3, [pc, #56]	; (5f8 <USART_SendDataFromBuff+0x74>)
     5c0:	782a      	ldrb	r2, [r5, #0]
     5c2:	4323      	orrs	r3, r4
     5c4:	701a      	strb	r2, [r3, #0]
		RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	   
     5c6:	300a      	adds	r0, #10
     5c8:	f7ff fe2a 	bl	220 <HR_REG_16BIT>
     5cc:	4284      	cmp	r4, r0
     5ce:	d105      	bne.n	5dc <USART_SendDataFromBuff+0x58>
     5d0:	0030      	movs	r0, r6
     5d2:	3008      	adds	r0, #8
     5d4:	f7ff fe24 	bl	220 <HR_REG_16BIT>
     5d8:	0004      	movs	r4, r0
     5da:	e001      	b.n	5e0 <USART_SendDataFromBuff+0x5c>
     5dc:	3401      	adds	r4, #1
     5de:	b2a4      	uxth	r4, r4
     5e0:	3501      	adds	r5, #1
     5e2:	e7e8      	b.n	5b6 <USART_SendDataFromBuff+0x32>
		SDataLen++;	
	}
	HW_REG_16BIT((uint32_t)(&UartAdr->TxWptr),  WPtr);  
     5e4:	9800      	ldr	r0, [sp, #0]
     5e6:	0021      	movs	r1, r4
     5e8:	f7ff fe10 	bl	20c <HW_REG_16BIT>
	return SDataLen;
}
     5ec:	0038      	movs	r0, r7
     5ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     5f0:	10008072 	.word	0x10008072
     5f4:	10008052 	.word	0x10008052
     5f8:	10010000 	.word	0x10010000

000005fc <UART_RemapToPrintf>:

static USART_TypeDef _printf_uart = UARTN;

int UART_RemapToPrintf(USART_TypeDef USARTx, uint8_t txPin, uint8_t rxPin)
{
     5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fe:	0007      	movs	r7, r0
	_printf_uart = USARTx;
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
     600:	4b17      	ldr	r3, [pc, #92]	; (660 <UART_RemapToPrintf+0x64>)
}

static USART_TypeDef _printf_uart = UARTN;

int UART_RemapToPrintf(USART_TypeDef USARTx, uint8_t txPin, uint8_t rxPin)
{
     602:	b089      	sub	sp, #36	; 0x24
     604:	0016      	movs	r6, r2
	_printf_uart = USARTx;
     606:	4d17      	ldr	r5, [pc, #92]	; (664 <UART_RemapToPrintf+0x68>)
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
     608:	781a      	ldrb	r2, [r3, #0]
}

static USART_TypeDef _printf_uart = UARTN;

int UART_RemapToPrintf(USART_TypeDef USARTx, uint8_t txPin, uint8_t rxPin)
{
     60a:	0008      	movs	r0, r1
	_printf_uart = USARTx;
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
     60c:	a901      	add	r1, sp, #4

static USART_TypeDef _printf_uart = UARTN;

int UART_RemapToPrintf(USART_TypeDef USARTx, uint8_t txPin, uint8_t rxPin)
{
	_printf_uart = USARTx;
     60e:	702f      	strb	r7, [r5, #0]
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
     610:	700a      	strb	r2, [r1, #0]
     612:	001c      	movs	r4, r3
	if(USARTx == UARTA)
     614:	2f00      	cmp	r7, #0
     616:	d105      	bne.n	624 <UART_RemapToPrintf+0x28>
		cfgTx.pin_func = FUNC_UART_TXD;
     618:	b2d3      	uxtb	r3, r2
     61a:	223f      	movs	r2, #63	; 0x3f
     61c:	4393      	bics	r3, r2
     61e:	3a37      	subs	r2, #55	; 0x37
     620:	4313      	orrs	r3, r2
     622:	700b      	strb	r3, [r1, #0]
	bc_gpio_init(txPin, &cfgTx);
     624:	f7ff fd7c 	bl	120 <bc_gpio_init>
	
	GPIO_CFG cfgRx ={FUNC_UARTB_RXD, GFG_PULLUP};
     628:	7863      	ldrb	r3, [r4, #1]
     62a:	a902      	add	r1, sp, #8
     62c:	700b      	strb	r3, [r1, #0]
	if(USARTx == UARTA)
     62e:	2f00      	cmp	r7, #0
     630:	d105      	bne.n	63e <UART_RemapToPrintf+0x42>
		cfgRx.pin_func = FUNC_UART_RXD;
     632:	223f      	movs	r2, #63	; 0x3f
     634:	b2db      	uxtb	r3, r3
     636:	4393      	bics	r3, r2
     638:	3a36      	subs	r2, #54	; 0x36
     63a:	4313      	orrs	r3, r2
     63c:	700b      	strb	r3, [r1, #0]
	bc_gpio_init(rxPin, &cfgRx);
     63e:	0030      	movs	r0, r6
     640:	f7ff fd6e 	bl	120 <bc_gpio_init>

	/*cofig uart parameter*/	
	USART_InitTypeDef Uart = {BAUD921600, DATA_BITS_8b, STOP_BITS_1, PARITY_EVEN,
     644:	a903      	add	r1, sp, #12
     646:	000a      	movs	r2, r1
     648:	1d23      	adds	r3, r4, #4
     64a:	cb51      	ldmia	r3!, {r0, r4, r6}
     64c:	c251      	stmia	r2!, {r0, r4, r6}
     64e:	cb11      	ldmia	r3!, {r0, r4}
     650:	c211      	stmia	r2!, {r0, r4}
								MODE_DUPLEX, FLOW_CTRL_NONE, 128, 128};
	USART_Init(_printf_uart, &Uart);
     652:	7828      	ldrb	r0, [r5, #0]
     654:	f7ff fe36 	bl	2c4 <USART_Init>
	return 0;
}
     658:	2000      	movs	r0, #0
     65a:	b009      	add	sp, #36	; 0x24
     65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	000022fc 	.word	0x000022fc
     664:	10010500 	.word	0x10010500

00000668 <UART_PutChar>:

void UART_PutChar(char c)
{
	if(_printf_uart != UARTN)
     668:	4b04      	ldr	r3, [pc, #16]	; (67c <UART_PutChar+0x14>)
	USART_Init(_printf_uart, &Uart);
	return 0;
}

void UART_PutChar(char c)
{
     66a:	0001      	movs	r1, r0
	if(_printf_uart != UARTN)
     66c:	7818      	ldrb	r0, [r3, #0]
	USART_Init(_printf_uart, &Uart);
	return 0;
}

void UART_PutChar(char c)
{
     66e:	b510      	push	{r4, lr}
	if(_printf_uart != UARTN)
     670:	2802      	cmp	r0, #2
     672:	d002      	beq.n	67a <UART_PutChar+0x12>
		USART_SendData(_printf_uart, (uint16_t)c);
     674:	b289      	uxth	r1, r1
     676:	f7ff fec5 	bl	404 <USART_SendData>
}
     67a:	bd10      	pop	{r4, pc}
     67c:	10010500 	.word	0x10010500

00000680 <_fstat>:
#include "bc62xx_ble.h"
//#include "Drv_debug.h"

int _fstat (int fd, struct stat *pStat)
{
	pStat->st_mode = S_IFCHR;
     680:	2380      	movs	r3, #128	; 0x80
     682:	019b      	lsls	r3, r3, #6
	return 0;
}
     684:	2000      	movs	r0, #0
#include "bc62xx_ble.h"
//#include "Drv_debug.h"

int _fstat (int fd, struct stat *pStat)
{
	pStat->st_mode = S_IFCHR;
     686:	604b      	str	r3, [r1, #4]
	return 0;
}
     688:	4770      	bx	lr

0000068a <_close>:

int _close(int fd)
{
	return -1;
}
     68a:	2001      	movs	r0, #1
     68c:	4240      	negs	r0, r0
     68e:	4770      	bx	lr

00000690 <_write>:

extern void UART_PutChar(char c);
int _write (int fd, char *ptr, int len)
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	000e      	movs	r6, r1
     694:	0014      	movs	r4, r2
     696:	000d      	movs	r5, r1
	int i = 0;

	if (fd > 2)
     698:	2802      	cmp	r0, #2
     69a:	dc09      	bgt.n	6b0 <_write+0x20>
		return -1;

	while(*ptr && (i < len))\
     69c:	7828      	ldrb	r0, [r5, #0]
     69e:	2800      	cmp	r0, #0
     6a0:	d009      	beq.n	6b6 <_write+0x26>
     6a2:	1bab      	subs	r3, r5, r6
     6a4:	429c      	cmp	r4, r3
     6a6:	dd06      	ble.n	6b6 <_write+0x26>
	{
		UART_PutChar(*ptr);
     6a8:	f7ff ffde 	bl	668 <UART_PutChar>
		i++;
		ptr++;
     6ac:	3501      	adds	r5, #1
     6ae:	e7f5      	b.n	69c <_write+0xc>
int _write (int fd, char *ptr, int len)
{
	int i = 0;

	if (fd > 2)
		return -1;
     6b0:	2001      	movs	r0, #1
     6b2:	4240      	negs	r0, r0
     6b4:	e000      	b.n	6b8 <_write+0x28>
     6b6:	0020      	movs	r0, r4
		i++;
		ptr++;
	}
   
 	return len;
}
     6b8:	bd70      	pop	{r4, r5, r6, pc}

000006ba <_isatty>:

int _isatty (int fd)
{
	return 1;
}
     6ba:	2001      	movs	r0, #1
     6bc:	4770      	bx	lr

000006be <_lseek>:

int _lseek(int fd, int offset, int fromwhere)
{
	return 0;
}
     6be:	2000      	movs	r0, #0
     6c0:	4770      	bx	lr

000006c2 <_read>:

int _read (int fd, char *pBuffer, int size)
{
	return 0;
}
     6c2:	2000      	movs	r0, #0
     6c4:	4770      	bx	lr

000006c6 <_sbrk>:
caddr_t _sbrk(int increment)
{
	extern char end asm("end");
	register char *pStack asm("sp");
	static char *s_pHeapEnd;
	if (!s_pHeapEnd)
     6c6:	4b08      	ldr	r3, [pc, #32]	; (6e8 <_sbrk+0x22>)
{
	return 0;
}

caddr_t _sbrk(int increment)
{
     6c8:	0002      	movs	r2, r0
	extern char end asm("end");
	register char *pStack asm("sp");
	static char *s_pHeapEnd;
	if (!s_pHeapEnd)
     6ca:	6819      	ldr	r1, [r3, #0]
     6cc:	2900      	cmp	r1, #0
     6ce:	d101      	bne.n	6d4 <_sbrk+0xe>
		s_pHeapEnd = &end;
     6d0:	4906      	ldr	r1, [pc, #24]	; (6ec <_sbrk+0x26>)
     6d2:	6019      	str	r1, [r3, #0]

	if (s_pHeapEnd + increment > pStack)
     6d4:	4669      	mov	r1, sp
     6d6:	6818      	ldr	r0, [r3, #0]
     6d8:	1882      	adds	r2, r0, r2
     6da:	428a      	cmp	r2, r1
     6dc:	d801      	bhi.n	6e2 <_sbrk+0x1c>
		return (caddr_t)-1;

	char *pOldHeapEnd = s_pHeapEnd;
	s_pHeapEnd += increment;
     6de:	601a      	str	r2, [r3, #0]
	return (caddr_t)pOldHeapEnd;
     6e0:	e001      	b.n	6e6 <_sbrk+0x20>
	static char *s_pHeapEnd;
	if (!s_pHeapEnd)
		s_pHeapEnd = &end;

	if (s_pHeapEnd + increment > pStack)
		return (caddr_t)-1;
     6e2:	2001      	movs	r0, #1
     6e4:	4240      	negs	r0, r0

	char *pOldHeapEnd = s_pHeapEnd;
	s_pHeapEnd += increment;
	return (caddr_t)pOldHeapEnd;
}
     6e6:	4770      	bx	lr
     6e8:	10010d44 	.word	0x10010d44
     6ec:	10010da8 	.word	0x10010da8

000006f0 <_exit>:

void _exit(int status)
{
     6f0:	e7fe      	b.n	6f0 <_exit>

000006f2 <Default_Handler>:
	while(1);
}


void Default_Handler(void)
{
     6f2:	b510      	push	{r4, lr}
	printf("\r\n\r\nDefault_Handler\r\n\r\n");
     6f4:	4801      	ldr	r0, [pc, #4]	; (6fc <Default_Handler+0xa>)
     6f6:	f000 fb63 	bl	dc0 <puts>
     6fa:	e7fe      	b.n	6fa <Default_Handler+0x8>
     6fc:	00002314 	.word	0x00002314

00000700 <Reset_Handler>:
     700:	490a      	ldr	r1, [pc, #40]	; (72c <Reset_Handler+0x2c>)
     702:	4a0b      	ldr	r2, [pc, #44]	; (730 <Reset_Handler+0x30>)
     704:	4b0b      	ldr	r3, [pc, #44]	; (734 <Reset_Handler+0x34>)
     706:	1a9b      	subs	r3, r3, r2
     708:	dd03      	ble.n	712 <Reset_Handler+0x12>
     70a:	3b04      	subs	r3, #4
     70c:	58c8      	ldr	r0, [r1, r3]
     70e:	50d0      	str	r0, [r2, r3]
     710:	dcfb      	bgt.n	70a <Reset_Handler+0xa>
     712:	4909      	ldr	r1, [pc, #36]	; (738 <Reset_Handler+0x38>)
     714:	4a09      	ldr	r2, [pc, #36]	; (73c <Reset_Handler+0x3c>)
     716:	2000      	movs	r0, #0
     718:	1a52      	subs	r2, r2, r1
     71a:	dd02      	ble.n	722 <Reset_Handler+0x22>
     71c:	3a04      	subs	r2, #4
     71e:	5088      	str	r0, [r1, r2]
     720:	dcfc      	bgt.n	71c <Reset_Handler+0x1c>
     722:	4807      	ldr	r0, [pc, #28]	; (740 <Reset_Handler+0x40>)
     724:	4b07      	ldr	r3, [pc, #28]	; (744 <Reset_Handler+0x44>)
     726:	f7ff fcb7 	bl	98 <main>
     72a:	0000      	.short	0x0000
     72c:	00002334 	.word	0x00002334
     730:	10010500 	.word	0x10010500
     734:	10010d44 	.word	0x10010d44
     738:	10010d44 	.word	0x10010d44
     73c:	10010da4 	.word	0x10010da4
     740:	00012345 	.word	0x00012345
     744:	00001111 	.word	0x00001111

00000748 <DEF_IRQHandler>:
     748:	e7fe      	b.n	748 <DEF_IRQHandler>

0000074a <__aeabi_idiv>:
     74a:	2800      	cmp	r0, #0
     74c:	da04      	bge.n	758 <L_num_pos>
     74e:	4240      	negs	r0, r0
     750:	2900      	cmp	r1, #0
     752:	da04      	bge.n	75e <L_neg_result>
     754:	4249      	negs	r1, r1
     756:	e020      	b.n	79a <__aeabi_uidiv>

00000758 <L_num_pos>:
     758:	2900      	cmp	r1, #0
     75a:	da1e      	bge.n	79a <__aeabi_uidiv>
     75c:	4249      	negs	r1, r1

0000075e <L_neg_result>:
     75e:	b500      	push	{lr}
     760:	f000 f81b 	bl	79a <__aeabi_uidiv>
     764:	4240      	negs	r0, r0
     766:	bd00      	pop	{pc}

00000768 <__aeabi_idivmod>:
     768:	2800      	cmp	r0, #0
     76a:	da0e      	bge.n	78a <L_num_pos_bis>
     76c:	4240      	negs	r0, r0
     76e:	2900      	cmp	r1, #0
     770:	da05      	bge.n	77e <L_neg_both>
     772:	4249      	negs	r1, r1
     774:	b500      	push	{lr}
     776:	f000 f810 	bl	79a <__aeabi_uidiv>
     77a:	4249      	negs	r1, r1
     77c:	bd00      	pop	{pc}

0000077e <L_neg_both>:
     77e:	b500      	push	{lr}
     780:	f000 f80b 	bl	79a <__aeabi_uidiv>
     784:	4240      	negs	r0, r0
     786:	4249      	negs	r1, r1
     788:	bd00      	pop	{pc}

0000078a <L_num_pos_bis>:
     78a:	2900      	cmp	r1, #0
     78c:	da05      	bge.n	79a <__aeabi_uidiv>
     78e:	4249      	negs	r1, r1
     790:	b500      	push	{lr}
     792:	f000 f802 	bl	79a <__aeabi_uidiv>
     796:	4240      	negs	r0, r0
     798:	bd00      	pop	{pc}

0000079a <__aeabi_uidiv>:
     79a:	2900      	cmp	r1, #0
     79c:	d100      	bne.n	7a0 <L_no_div0>
     79e:	e014      	b.n	7ca <__aeabi_idiv0>

000007a0 <L_no_div0>:
     7a0:	2201      	movs	r2, #1
     7a2:	2300      	movs	r3, #0
     7a4:	4288      	cmp	r0, r1
     7a6:	d906      	bls.n	7b6 <L_sub_loop0>
     7a8:	3100      	adds	r1, #0
     7aa:	d404      	bmi.n	7b6 <L_sub_loop0>

000007ac <L_denom_shift_loop>:
     7ac:	0052      	lsls	r2, r2, #1
     7ae:	0049      	lsls	r1, r1, #1
     7b0:	d401      	bmi.n	7b6 <L_sub_loop0>
     7b2:	4288      	cmp	r0, r1
     7b4:	d8fa      	bhi.n	7ac <L_denom_shift_loop>

000007b6 <L_sub_loop0>:
     7b6:	4288      	cmp	r0, r1
     7b8:	d301      	bcc.n	7be <L_dont_sub0>
     7ba:	1a40      	subs	r0, r0, r1
     7bc:	4313      	orrs	r3, r2

000007be <L_dont_sub0>:
     7be:	0849      	lsrs	r1, r1, #1
     7c0:	0852      	lsrs	r2, r2, #1
     7c2:	d1f8      	bne.n	7b6 <L_sub_loop0>
     7c4:	4601      	mov	r1, r0
     7c6:	4618      	mov	r0, r3
     7c8:	4770      	bx	lr

000007ca <__aeabi_idiv0>:
     7ca:	e7fe      	b.n	7ca <__aeabi_idiv0>

000007cc <malloc>:
     7cc:	b510      	push	{r4, lr}
     7ce:	4b03      	ldr	r3, [pc, #12]	; (7dc <malloc+0x10>)
     7d0:	0001      	movs	r1, r0
     7d2:	6818      	ldr	r0, [r3, #0]
     7d4:	f000 f80e 	bl	7f4 <_malloc_r>
     7d8:	bd10      	pop	{r4, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	10010d40 	.word	0x10010d40

000007e0 <free>:
     7e0:	b510      	push	{r4, lr}
     7e2:	4b03      	ldr	r3, [pc, #12]	; (7f0 <free+0x10>)
     7e4:	0001      	movs	r1, r0
     7e6:	6818      	ldr	r0, [r3, #0]
     7e8:	f000 fca2 	bl	1130 <_free_r>
     7ec:	bd10      	pop	{r4, pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	10010d40 	.word	0x10010d40

000007f4 <_malloc_r>:
     7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f6:	465f      	mov	r7, fp
     7f8:	464d      	mov	r5, r9
     7fa:	4656      	mov	r6, sl
     7fc:	4644      	mov	r4, r8
     7fe:	b4f0      	push	{r4, r5, r6, r7}
     800:	000d      	movs	r5, r1
     802:	350b      	adds	r5, #11
     804:	b083      	sub	sp, #12
     806:	0007      	movs	r7, r0
     808:	2d16      	cmp	r5, #22
     80a:	d800      	bhi.n	80e <_malloc_r+0x1a>
     80c:	e0a8      	b.n	960 <_malloc_r+0x16c>
     80e:	2307      	movs	r3, #7
     810:	439d      	bics	r5, r3
     812:	d500      	bpl.n	816 <_malloc_r+0x22>
     814:	e0ce      	b.n	9b4 <_malloc_r+0x1c0>
     816:	42a9      	cmp	r1, r5
     818:	d900      	bls.n	81c <_malloc_r+0x28>
     81a:	e0cb      	b.n	9b4 <_malloc_r+0x1c0>
     81c:	f000 fa94 	bl	d48 <__malloc_lock>
     820:	23f8      	movs	r3, #248	; 0xf8
     822:	33ff      	adds	r3, #255	; 0xff
     824:	429d      	cmp	r5, r3
     826:	d800      	bhi.n	82a <_malloc_r+0x36>
     828:	e284      	b.n	d34 <_malloc_r+0x540>
     82a:	0a6b      	lsrs	r3, r5, #9
     82c:	d100      	bne.n	830 <_malloc_r+0x3c>
     82e:	e0c5      	b.n	9bc <_malloc_r+0x1c8>
     830:	2b04      	cmp	r3, #4
     832:	d900      	bls.n	836 <_malloc_r+0x42>
     834:	e16c      	b.n	b10 <_malloc_r+0x31c>
     836:	2338      	movs	r3, #56	; 0x38
     838:	09a9      	lsrs	r1, r5, #6
     83a:	469c      	mov	ip, r3
     83c:	3301      	adds	r3, #1
     83e:	4698      	mov	r8, r3
     840:	4488      	add	r8, r1
     842:	4643      	mov	r3, r8
     844:	448c      	add	ip, r1
     846:	0059      	lsls	r1, r3, #1
     848:	4ec9      	ldr	r6, [pc, #804]	; (b70 <_malloc_r+0x37c>)
     84a:	0089      	lsls	r1, r1, #2
     84c:	1871      	adds	r1, r6, r1
     84e:	3908      	subs	r1, #8
     850:	68cc      	ldr	r4, [r1, #12]
     852:	42a1      	cmp	r1, r4
     854:	d017      	beq.n	886 <_malloc_r+0x92>
     856:	2303      	movs	r3, #3
     858:	6862      	ldr	r2, [r4, #4]
     85a:	439a      	bics	r2, r3
     85c:	0013      	movs	r3, r2
     85e:	1b52      	subs	r2, r2, r5
     860:	2a0f      	cmp	r2, #15
     862:	dd00      	ble.n	866 <_malloc_r+0x72>
     864:	e0b0      	b.n	9c8 <_malloc_r+0x1d4>
     866:	2003      	movs	r0, #3
     868:	2a00      	cmp	r2, #0
     86a:	db09      	blt.n	880 <_malloc_r+0x8c>
     86c:	e08d      	b.n	98a <_malloc_r+0x196>
     86e:	6863      	ldr	r3, [r4, #4]
     870:	4383      	bics	r3, r0
     872:	1b5a      	subs	r2, r3, r5
     874:	2a0f      	cmp	r2, #15
     876:	dd00      	ble.n	87a <_malloc_r+0x86>
     878:	e0a6      	b.n	9c8 <_malloc_r+0x1d4>
     87a:	2a00      	cmp	r2, #0
     87c:	db00      	blt.n	880 <_malloc_r+0x8c>
     87e:	e084      	b.n	98a <_malloc_r+0x196>
     880:	68e4      	ldr	r4, [r4, #12]
     882:	42a1      	cmp	r1, r4
     884:	d1f3      	bne.n	86e <_malloc_r+0x7a>
     886:	4643      	mov	r3, r8
     888:	9300      	str	r3, [sp, #0]
     88a:	0032      	movs	r2, r6
     88c:	6934      	ldr	r4, [r6, #16]
     88e:	3208      	adds	r2, #8
     890:	4294      	cmp	r4, r2
     892:	d100      	bne.n	896 <_malloc_r+0xa2>
     894:	e18f      	b.n	bb6 <_malloc_r+0x3c2>
     896:	2303      	movs	r3, #3
     898:	6861      	ldr	r1, [r4, #4]
     89a:	4399      	bics	r1, r3
     89c:	000b      	movs	r3, r1
     89e:	1b48      	subs	r0, r1, r5
     8a0:	280f      	cmp	r0, #15
     8a2:	dd00      	ble.n	8a6 <_malloc_r+0xb2>
     8a4:	e176      	b.n	b94 <_malloc_r+0x3a0>
     8a6:	6172      	str	r2, [r6, #20]
     8a8:	6132      	str	r2, [r6, #16]
     8aa:	2800      	cmp	r0, #0
     8ac:	da71      	bge.n	992 <_malloc_r+0x19e>
     8ae:	4ab1      	ldr	r2, [pc, #708]	; (b74 <_malloc_r+0x380>)
     8b0:	4291      	cmp	r1, r2
     8b2:	d900      	bls.n	8b6 <_malloc_r+0xc2>
     8b4:	e134      	b.n	b20 <_malloc_r+0x32c>
     8b6:	2301      	movs	r3, #1
     8b8:	08c8      	lsrs	r0, r1, #3
     8ba:	1082      	asrs	r2, r0, #2
     8bc:	4093      	lsls	r3, r2
     8be:	6872      	ldr	r2, [r6, #4]
     8c0:	431a      	orrs	r2, r3
     8c2:	00c3      	lsls	r3, r0, #3
     8c4:	199b      	adds	r3, r3, r6
     8c6:	6898      	ldr	r0, [r3, #8]
     8c8:	6072      	str	r2, [r6, #4]
     8ca:	60e3      	str	r3, [r4, #12]
     8cc:	60a0      	str	r0, [r4, #8]
     8ce:	609c      	str	r4, [r3, #8]
     8d0:	0013      	movs	r3, r2
     8d2:	60c4      	str	r4, [r0, #12]
     8d4:	2001      	movs	r0, #1
     8d6:	9900      	ldr	r1, [sp, #0]
     8d8:	108a      	asrs	r2, r1, #2
     8da:	4090      	lsls	r0, r2
     8dc:	4298      	cmp	r0, r3
     8de:	d900      	bls.n	8e2 <_malloc_r+0xee>
     8e0:	e075      	b.n	9ce <_malloc_r+0x1da>
     8e2:	4203      	tst	r3, r0
     8e4:	d10c      	bne.n	900 <_malloc_r+0x10c>
     8e6:	2203      	movs	r2, #3
     8e8:	4391      	bics	r1, r2
     8ea:	1d0a      	adds	r2, r1, #4
     8ec:	0040      	lsls	r0, r0, #1
     8ee:	9200      	str	r2, [sp, #0]
     8f0:	4203      	tst	r3, r0
     8f2:	d105      	bne.n	900 <_malloc_r+0x10c>
     8f4:	9a00      	ldr	r2, [sp, #0]
     8f6:	0040      	lsls	r0, r0, #1
     8f8:	3204      	adds	r2, #4
     8fa:	9200      	str	r2, [sp, #0]
     8fc:	4203      	tst	r3, r0
     8fe:	d0f9      	beq.n	8f4 <_malloc_r+0x100>
     900:	2303      	movs	r3, #3
     902:	4698      	mov	r8, r3
     904:	9a00      	ldr	r2, [sp, #0]
     906:	00d3      	lsls	r3, r2, #3
     908:	4699      	mov	r9, r3
     90a:	44b1      	add	r9, r6
     90c:	46cc      	mov	ip, r9
     90e:	4692      	mov	sl, r2
     910:	4663      	mov	r3, ip
     912:	68dc      	ldr	r4, [r3, #12]
     914:	45a4      	cmp	ip, r4
     916:	d107      	bne.n	928 <_malloc_r+0x134>
     918:	e14f      	b.n	bba <_malloc_r+0x3c6>
     91a:	2a00      	cmp	r2, #0
     91c:	db00      	blt.n	920 <_malloc_r+0x12c>
     91e:	e15f      	b.n	be0 <_malloc_r+0x3ec>
     920:	68e4      	ldr	r4, [r4, #12]
     922:	45a4      	cmp	ip, r4
     924:	d100      	bne.n	928 <_malloc_r+0x134>
     926:	e148      	b.n	bba <_malloc_r+0x3c6>
     928:	4642      	mov	r2, r8
     92a:	6863      	ldr	r3, [r4, #4]
     92c:	4393      	bics	r3, r2
     92e:	1b5a      	subs	r2, r3, r5
     930:	2a0f      	cmp	r2, #15
     932:	ddf2      	ble.n	91a <_malloc_r+0x126>
     934:	2101      	movs	r1, #1
     936:	1963      	adds	r3, r4, r5
     938:	430d      	orrs	r5, r1
     93a:	6065      	str	r5, [r4, #4]
     93c:	68e0      	ldr	r0, [r4, #12]
     93e:	68a5      	ldr	r5, [r4, #8]
     940:	3608      	adds	r6, #8
     942:	60e8      	str	r0, [r5, #12]
     944:	4311      	orrs	r1, r2
     946:	6085      	str	r5, [r0, #8]
     948:	60f3      	str	r3, [r6, #12]
     94a:	60b3      	str	r3, [r6, #8]
     94c:	0038      	movs	r0, r7
     94e:	60de      	str	r6, [r3, #12]
     950:	609e      	str	r6, [r3, #8]
     952:	6059      	str	r1, [r3, #4]
     954:	509a      	str	r2, [r3, r2]
     956:	f000 f9f9 	bl	d4c <__malloc_unlock>
     95a:	0020      	movs	r0, r4
     95c:	3008      	adds	r0, #8
     95e:	e022      	b.n	9a6 <_malloc_r+0x1b2>
     960:	2910      	cmp	r1, #16
     962:	d827      	bhi.n	9b4 <_malloc_r+0x1c0>
     964:	0038      	movs	r0, r7
     966:	f000 f9ef 	bl	d48 <__malloc_lock>
     96a:	2510      	movs	r5, #16
     96c:	2306      	movs	r3, #6
     96e:	2102      	movs	r1, #2
     970:	4e7f      	ldr	r6, [pc, #508]	; (b70 <_malloc_r+0x37c>)
     972:	009b      	lsls	r3, r3, #2
     974:	18f3      	adds	r3, r6, r3
     976:	001a      	movs	r2, r3
     978:	685c      	ldr	r4, [r3, #4]
     97a:	3a08      	subs	r2, #8
     97c:	4294      	cmp	r4, r2
     97e:	d100      	bne.n	982 <_malloc_r+0x18e>
     980:	e127      	b.n	bd2 <_malloc_r+0x3de>
     982:	2303      	movs	r3, #3
     984:	6862      	ldr	r2, [r4, #4]
     986:	439a      	bics	r2, r3
     988:	0013      	movs	r3, r2
     98a:	68e2      	ldr	r2, [r4, #12]
     98c:	68a1      	ldr	r1, [r4, #8]
     98e:	60ca      	str	r2, [r1, #12]
     990:	6091      	str	r1, [r2, #8]
     992:	2201      	movs	r2, #1
     994:	18e3      	adds	r3, r4, r3
     996:	6859      	ldr	r1, [r3, #4]
     998:	0038      	movs	r0, r7
     99a:	430a      	orrs	r2, r1
     99c:	605a      	str	r2, [r3, #4]
     99e:	f000 f9d5 	bl	d4c <__malloc_unlock>
     9a2:	0020      	movs	r0, r4
     9a4:	3008      	adds	r0, #8
     9a6:	b003      	add	sp, #12
     9a8:	bc3c      	pop	{r2, r3, r4, r5}
     9aa:	4690      	mov	r8, r2
     9ac:	4699      	mov	r9, r3
     9ae:	46a2      	mov	sl, r4
     9b0:	46ab      	mov	fp, r5
     9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9b4:	230c      	movs	r3, #12
     9b6:	2000      	movs	r0, #0
     9b8:	603b      	str	r3, [r7, #0]
     9ba:	e7f4      	b.n	9a6 <_malloc_r+0x1b2>
     9bc:	2340      	movs	r3, #64	; 0x40
     9be:	4698      	mov	r8, r3
     9c0:	3b01      	subs	r3, #1
     9c2:	2180      	movs	r1, #128	; 0x80
     9c4:	469c      	mov	ip, r3
     9c6:	e73f      	b.n	848 <_malloc_r+0x54>
     9c8:	4663      	mov	r3, ip
     9ca:	9300      	str	r3, [sp, #0]
     9cc:	e75d      	b.n	88a <_malloc_r+0x96>
     9ce:	2303      	movs	r3, #3
     9d0:	68b4      	ldr	r4, [r6, #8]
     9d2:	6862      	ldr	r2, [r4, #4]
     9d4:	439a      	bics	r2, r3
     9d6:	4690      	mov	r8, r2
     9d8:	42aa      	cmp	r2, r5
     9da:	d303      	bcc.n	9e4 <_malloc_r+0x1f0>
     9dc:	1b52      	subs	r2, r2, r5
     9de:	2a0f      	cmp	r2, #15
     9e0:	dd00      	ble.n	9e4 <_malloc_r+0x1f0>
     9e2:	e087      	b.n	af4 <_malloc_r+0x300>
     9e4:	0023      	movs	r3, r4
     9e6:	4443      	add	r3, r8
     9e8:	4a63      	ldr	r2, [pc, #396]	; (b78 <_malloc_r+0x384>)
     9ea:	9301      	str	r3, [sp, #4]
     9ec:	4b63      	ldr	r3, [pc, #396]	; (b7c <_malloc_r+0x388>)
     9ee:	4693      	mov	fp, r2
     9f0:	681b      	ldr	r3, [r3, #0]
     9f2:	6812      	ldr	r2, [r2, #0]
     9f4:	18eb      	adds	r3, r5, r3
     9f6:	3201      	adds	r2, #1
     9f8:	d100      	bne.n	9fc <_malloc_r+0x208>
     9fa:	e157      	b.n	cac <_malloc_r+0x4b8>
     9fc:	4a60      	ldr	r2, [pc, #384]	; (b80 <_malloc_r+0x38c>)
     9fe:	4694      	mov	ip, r2
     a00:	4463      	add	r3, ip
     a02:	0b1b      	lsrs	r3, r3, #12
     a04:	031b      	lsls	r3, r3, #12
     a06:	9300      	str	r3, [sp, #0]
     a08:	9900      	ldr	r1, [sp, #0]
     a0a:	0038      	movs	r0, r7
     a0c:	f000 f9e2 	bl	dd4 <_sbrk_r>
     a10:	0003      	movs	r3, r0
     a12:	4681      	mov	r9, r0
     a14:	3301      	adds	r3, #1
     a16:	d061      	beq.n	adc <_malloc_r+0x2e8>
     a18:	9b01      	ldr	r3, [sp, #4]
     a1a:	4283      	cmp	r3, r0
     a1c:	d900      	bls.n	a20 <_malloc_r+0x22c>
     a1e:	e0fd      	b.n	c1c <_malloc_r+0x428>
     a20:	4b58      	ldr	r3, [pc, #352]	; (b84 <_malloc_r+0x390>)
     a22:	9a00      	ldr	r2, [sp, #0]
     a24:	469a      	mov	sl, r3
     a26:	681b      	ldr	r3, [r3, #0]
     a28:	469c      	mov	ip, r3
     a2a:	4653      	mov	r3, sl
     a2c:	4462      	add	r2, ip
     a2e:	601a      	str	r2, [r3, #0]
     a30:	9b01      	ldr	r3, [sp, #4]
     a32:	0011      	movs	r1, r2
     a34:	454b      	cmp	r3, r9
     a36:	d100      	bne.n	a3a <_malloc_r+0x246>
     a38:	e143      	b.n	cc2 <_malloc_r+0x4ce>
     a3a:	465b      	mov	r3, fp
     a3c:	681b      	ldr	r3, [r3, #0]
     a3e:	3301      	adds	r3, #1
     a40:	d100      	bne.n	a44 <_malloc_r+0x250>
     a42:	e14f      	b.n	ce4 <_malloc_r+0x4f0>
     a44:	464b      	mov	r3, r9
     a46:	9a01      	ldr	r2, [sp, #4]
     a48:	1a9b      	subs	r3, r3, r2
     a4a:	1859      	adds	r1, r3, r1
     a4c:	4653      	mov	r3, sl
     a4e:	6019      	str	r1, [r3, #0]
     a50:	2307      	movs	r3, #7
     a52:	464a      	mov	r2, r9
     a54:	4013      	ands	r3, r2
     a56:	d100      	bne.n	a5a <_malloc_r+0x266>
     a58:	e117      	b.n	c8a <_malloc_r+0x496>
     a5a:	2108      	movs	r1, #8
     a5c:	4689      	mov	r9, r1
     a5e:	494a      	ldr	r1, [pc, #296]	; (b88 <_malloc_r+0x394>)
     a60:	1ad2      	subs	r2, r2, r3
     a62:	4491      	add	r9, r2
     a64:	1ac9      	subs	r1, r1, r3
     a66:	9b00      	ldr	r3, [sp, #0]
     a68:	0038      	movs	r0, r7
     a6a:	444b      	add	r3, r9
     a6c:	051b      	lsls	r3, r3, #20
     a6e:	0d1b      	lsrs	r3, r3, #20
     a70:	1acb      	subs	r3, r1, r3
     a72:	0019      	movs	r1, r3
     a74:	469b      	mov	fp, r3
     a76:	f000 f9ad 	bl	dd4 <_sbrk_r>
     a7a:	1c43      	adds	r3, r0, #1
     a7c:	d100      	bne.n	a80 <_malloc_r+0x28c>
     a7e:	e135      	b.n	cec <_malloc_r+0x4f8>
     a80:	464b      	mov	r3, r9
     a82:	1ac0      	subs	r0, r0, r3
     a84:	2301      	movs	r3, #1
     a86:	4458      	add	r0, fp
     a88:	4318      	orrs	r0, r3
     a8a:	4653      	mov	r3, sl
     a8c:	681b      	ldr	r3, [r3, #0]
     a8e:	445b      	add	r3, fp
     a90:	0019      	movs	r1, r3
     a92:	4653      	mov	r3, sl
     a94:	6019      	str	r1, [r3, #0]
     a96:	464b      	mov	r3, r9
     a98:	60b3      	str	r3, [r6, #8]
     a9a:	6058      	str	r0, [r3, #4]
     a9c:	42b4      	cmp	r4, r6
     a9e:	d013      	beq.n	ac8 <_malloc_r+0x2d4>
     aa0:	4643      	mov	r3, r8
     aa2:	2b0f      	cmp	r3, #15
     aa4:	d800      	bhi.n	aa8 <_malloc_r+0x2b4>
     aa6:	e0e1      	b.n	c6c <_malloc_r+0x478>
     aa8:	4643      	mov	r3, r8
     aaa:	2207      	movs	r2, #7
     aac:	6860      	ldr	r0, [r4, #4]
     aae:	3b0c      	subs	r3, #12
     ab0:	4393      	bics	r3, r2
     ab2:	3a06      	subs	r2, #6
     ab4:	4002      	ands	r2, r0
     ab6:	2005      	movs	r0, #5
     ab8:	431a      	orrs	r2, r3
     aba:	6062      	str	r2, [r4, #4]
     abc:	18e2      	adds	r2, r4, r3
     abe:	6050      	str	r0, [r2, #4]
     ac0:	6090      	str	r0, [r2, #8]
     ac2:	2b0f      	cmp	r3, #15
     ac4:	d900      	bls.n	ac8 <_malloc_r+0x2d4>
     ac6:	e115      	b.n	cf4 <_malloc_r+0x500>
     ac8:	4b30      	ldr	r3, [pc, #192]	; (b8c <_malloc_r+0x398>)
     aca:	681a      	ldr	r2, [r3, #0]
     acc:	4291      	cmp	r1, r2
     ace:	d900      	bls.n	ad2 <_malloc_r+0x2de>
     ad0:	6019      	str	r1, [r3, #0]
     ad2:	4b2f      	ldr	r3, [pc, #188]	; (b90 <_malloc_r+0x39c>)
     ad4:	681a      	ldr	r2, [r3, #0]
     ad6:	4291      	cmp	r1, r2
     ad8:	d900      	bls.n	adc <_malloc_r+0x2e8>
     ada:	6019      	str	r1, [r3, #0]
     adc:	2303      	movs	r3, #3
     ade:	68b4      	ldr	r4, [r6, #8]
     ae0:	6862      	ldr	r2, [r4, #4]
     ae2:	439a      	bics	r2, r3
     ae4:	0013      	movs	r3, r2
     ae6:	1b52      	subs	r2, r2, r5
     ae8:	429d      	cmp	r5, r3
     aea:	d900      	bls.n	aee <_malloc_r+0x2fa>
     aec:	e0c1      	b.n	c72 <_malloc_r+0x47e>
     aee:	2a0f      	cmp	r2, #15
     af0:	dc00      	bgt.n	af4 <_malloc_r+0x300>
     af2:	e0be      	b.n	c72 <_malloc_r+0x47e>
     af4:	2301      	movs	r3, #1
     af6:	0029      	movs	r1, r5
     af8:	1965      	adds	r5, r4, r5
     afa:	4319      	orrs	r1, r3
     afc:	4313      	orrs	r3, r2
     afe:	6061      	str	r1, [r4, #4]
     b00:	0038      	movs	r0, r7
     b02:	60b5      	str	r5, [r6, #8]
     b04:	606b      	str	r3, [r5, #4]
     b06:	f000 f921 	bl	d4c <__malloc_unlock>
     b0a:	0020      	movs	r0, r4
     b0c:	3008      	adds	r0, #8
     b0e:	e74a      	b.n	9a6 <_malloc_r+0x1b2>
     b10:	2b14      	cmp	r3, #20
     b12:	d974      	bls.n	bfe <_malloc_r+0x40a>
     b14:	2b54      	cmp	r3, #84	; 0x54
     b16:	d900      	bls.n	b1a <_malloc_r+0x326>
     b18:	e0b0      	b.n	c7c <_malloc_r+0x488>
     b1a:	0b29      	lsrs	r1, r5, #12
     b1c:	236e      	movs	r3, #110	; 0x6e
     b1e:	e68c      	b.n	83a <_malloc_r+0x46>
     b20:	0a4a      	lsrs	r2, r1, #9
     b22:	2a04      	cmp	r2, #4
     b24:	d974      	bls.n	c10 <_malloc_r+0x41c>
     b26:	2a14      	cmp	r2, #20
     b28:	d900      	bls.n	b2c <_malloc_r+0x338>
     b2a:	e0c2      	b.n	cb2 <_malloc_r+0x4be>
     b2c:	0010      	movs	r0, r2
     b2e:	325c      	adds	r2, #92	; 0x5c
     b30:	305b      	adds	r0, #91	; 0x5b
     b32:	0052      	lsls	r2, r2, #1
     b34:	2108      	movs	r1, #8
     b36:	4249      	negs	r1, r1
     b38:	468c      	mov	ip, r1
     b3a:	0092      	lsls	r2, r2, #2
     b3c:	18b2      	adds	r2, r6, r2
     b3e:	4494      	add	ip, r2
     b40:	4662      	mov	r2, ip
     b42:	6892      	ldr	r2, [r2, #8]
     b44:	310b      	adds	r1, #11
     b46:	4688      	mov	r8, r1
     b48:	4594      	cmp	ip, r2
     b4a:	d100      	bne.n	b4e <_malloc_r+0x35a>
     b4c:	e0a0      	b.n	c90 <_malloc_r+0x49c>
     b4e:	4641      	mov	r1, r8
     b50:	6850      	ldr	r0, [r2, #4]
     b52:	4388      	bics	r0, r1
     b54:	4283      	cmp	r3, r0
     b56:	d202      	bcs.n	b5e <_malloc_r+0x36a>
     b58:	6892      	ldr	r2, [r2, #8]
     b5a:	4594      	cmp	ip, r2
     b5c:	d1f7      	bne.n	b4e <_malloc_r+0x35a>
     b5e:	68d3      	ldr	r3, [r2, #12]
     b60:	469c      	mov	ip, r3
     b62:	6873      	ldr	r3, [r6, #4]
     b64:	4661      	mov	r1, ip
     b66:	60a2      	str	r2, [r4, #8]
     b68:	60e1      	str	r1, [r4, #12]
     b6a:	608c      	str	r4, [r1, #8]
     b6c:	60d4      	str	r4, [r2, #12]
     b6e:	e6b1      	b.n	8d4 <_malloc_r+0xe0>
     b70:	10010504 	.word	0x10010504
     b74:	000001ff 	.word	0x000001ff
     b78:	10010910 	.word	0x10010910
     b7c:	10010d50 	.word	0x10010d50
     b80:	0000100f 	.word	0x0000100f
     b84:	10010d54 	.word	0x10010d54
     b88:	00001008 	.word	0x00001008
     b8c:	10010d4c 	.word	0x10010d4c
     b90:	10010d48 	.word	0x10010d48
     b94:	2101      	movs	r1, #1
     b96:	1963      	adds	r3, r4, r5
     b98:	430d      	orrs	r5, r1
     b9a:	4301      	orrs	r1, r0
     b9c:	6065      	str	r5, [r4, #4]
     b9e:	6173      	str	r3, [r6, #20]
     ba0:	6133      	str	r3, [r6, #16]
     ba2:	60da      	str	r2, [r3, #12]
     ba4:	609a      	str	r2, [r3, #8]
     ba6:	6059      	str	r1, [r3, #4]
     ba8:	5018      	str	r0, [r3, r0]
     baa:	0038      	movs	r0, r7
     bac:	f000 f8ce 	bl	d4c <__malloc_unlock>
     bb0:	0020      	movs	r0, r4
     bb2:	3008      	adds	r0, #8
     bb4:	e6f7      	b.n	9a6 <_malloc_r+0x1b2>
     bb6:	6873      	ldr	r3, [r6, #4]
     bb8:	e68c      	b.n	8d4 <_malloc_r+0xe0>
     bba:	2308      	movs	r3, #8
     bbc:	469b      	mov	fp, r3
     bbe:	3b07      	subs	r3, #7
     bc0:	44dc      	add	ip, fp
     bc2:	469b      	mov	fp, r3
     bc4:	44da      	add	sl, fp
     bc6:	4643      	mov	r3, r8
     bc8:	4652      	mov	r2, sl
     bca:	4213      	tst	r3, r2
     bcc:	d000      	beq.n	bd0 <_malloc_r+0x3dc>
     bce:	e69f      	b.n	910 <_malloc_r+0x11c>
     bd0:	e033      	b.n	c3a <_malloc_r+0x446>
     bd2:	68dc      	ldr	r4, [r3, #12]
     bd4:	1c8a      	adds	r2, r1, #2
     bd6:	9200      	str	r2, [sp, #0]
     bd8:	42a3      	cmp	r3, r4
     bda:	d100      	bne.n	bde <_malloc_r+0x3ea>
     bdc:	e655      	b.n	88a <_malloc_r+0x96>
     bde:	e6d0      	b.n	982 <_malloc_r+0x18e>
     be0:	2201      	movs	r2, #1
     be2:	18e3      	adds	r3, r4, r3
     be4:	6859      	ldr	r1, [r3, #4]
     be6:	0038      	movs	r0, r7
     be8:	430a      	orrs	r2, r1
     bea:	605a      	str	r2, [r3, #4]
     bec:	68e3      	ldr	r3, [r4, #12]
     bee:	68a2      	ldr	r2, [r4, #8]
     bf0:	60d3      	str	r3, [r2, #12]
     bf2:	609a      	str	r2, [r3, #8]
     bf4:	f000 f8aa 	bl	d4c <__malloc_unlock>
     bf8:	0020      	movs	r0, r4
     bfa:	3008      	adds	r0, #8
     bfc:	e6d3      	b.n	9a6 <_malloc_r+0x1b2>
     bfe:	225b      	movs	r2, #91	; 0x5b
     c00:	4694      	mov	ip, r2
     c02:	3201      	adds	r2, #1
     c04:	4690      	mov	r8, r2
     c06:	4498      	add	r8, r3
     c08:	449c      	add	ip, r3
     c0a:	4643      	mov	r3, r8
     c0c:	0059      	lsls	r1, r3, #1
     c0e:	e61b      	b.n	848 <_malloc_r+0x54>
     c10:	098a      	lsrs	r2, r1, #6
     c12:	0010      	movs	r0, r2
     c14:	3239      	adds	r2, #57	; 0x39
     c16:	3038      	adds	r0, #56	; 0x38
     c18:	0052      	lsls	r2, r2, #1
     c1a:	e78b      	b.n	b34 <_malloc_r+0x340>
     c1c:	42b4      	cmp	r4, r6
     c1e:	d000      	beq.n	c22 <_malloc_r+0x42e>
     c20:	e75c      	b.n	adc <_malloc_r+0x2e8>
     c22:	e6fd      	b.n	a20 <_malloc_r+0x22c>
     c24:	9b00      	ldr	r3, [sp, #0]
     c26:	3b01      	subs	r3, #1
     c28:	9300      	str	r3, [sp, #0]
     c2a:	2308      	movs	r3, #8
     c2c:	425b      	negs	r3, r3
     c2e:	469c      	mov	ip, r3
     c30:	44e1      	add	r9, ip
     c32:	464b      	mov	r3, r9
     c34:	689b      	ldr	r3, [r3, #8]
     c36:	4599      	cmp	r9, r3
     c38:	d17a      	bne.n	d30 <_malloc_r+0x53c>
     c3a:	4643      	mov	r3, r8
     c3c:	9a00      	ldr	r2, [sp, #0]
     c3e:	4213      	tst	r3, r2
     c40:	d1f0      	bne.n	c24 <_malloc_r+0x430>
     c42:	6873      	ldr	r3, [r6, #4]
     c44:	4383      	bics	r3, r0
     c46:	6073      	str	r3, [r6, #4]
     c48:	0040      	lsls	r0, r0, #1
     c4a:	4298      	cmp	r0, r3
     c4c:	d900      	bls.n	c50 <_malloc_r+0x45c>
     c4e:	e6be      	b.n	9ce <_malloc_r+0x1da>
     c50:	2800      	cmp	r0, #0
     c52:	d100      	bne.n	c56 <_malloc_r+0x462>
     c54:	e6bb      	b.n	9ce <_malloc_r+0x1da>
     c56:	4203      	tst	r3, r0
     c58:	d170      	bne.n	d3c <_malloc_r+0x548>
     c5a:	4652      	mov	r2, sl
     c5c:	9200      	str	r2, [sp, #0]
     c5e:	9a00      	ldr	r2, [sp, #0]
     c60:	0040      	lsls	r0, r0, #1
     c62:	3204      	adds	r2, #4
     c64:	9200      	str	r2, [sp, #0]
     c66:	4203      	tst	r3, r0
     c68:	d0f9      	beq.n	c5e <_malloc_r+0x46a>
     c6a:	e64b      	b.n	904 <_malloc_r+0x110>
     c6c:	2301      	movs	r3, #1
     c6e:	464a      	mov	r2, r9
     c70:	6053      	str	r3, [r2, #4]
     c72:	0038      	movs	r0, r7
     c74:	f000 f86a 	bl	d4c <__malloc_unlock>
     c78:	2000      	movs	r0, #0
     c7a:	e694      	b.n	9a6 <_malloc_r+0x1b2>
     c7c:	22aa      	movs	r2, #170	; 0xaa
     c7e:	0052      	lsls	r2, r2, #1
     c80:	4293      	cmp	r3, r2
     c82:	d80d      	bhi.n	ca0 <_malloc_r+0x4ac>
     c84:	0be9      	lsrs	r1, r5, #15
     c86:	2377      	movs	r3, #119	; 0x77
     c88:	e5d7      	b.n	83a <_malloc_r+0x46>
     c8a:	2180      	movs	r1, #128	; 0x80
     c8c:	0149      	lsls	r1, r1, #5
     c8e:	e6ea      	b.n	a66 <_malloc_r+0x272>
     c90:	2301      	movs	r3, #1
     c92:	1080      	asrs	r0, r0, #2
     c94:	4083      	lsls	r3, r0
     c96:	6872      	ldr	r2, [r6, #4]
     c98:	4313      	orrs	r3, r2
     c9a:	6073      	str	r3, [r6, #4]
     c9c:	4662      	mov	r2, ip
     c9e:	e761      	b.n	b64 <_malloc_r+0x370>
     ca0:	4a28      	ldr	r2, [pc, #160]	; (d44 <_malloc_r+0x550>)
     ca2:	4293      	cmp	r3, r2
     ca4:	d818      	bhi.n	cd8 <_malloc_r+0x4e4>
     ca6:	0ca9      	lsrs	r1, r5, #18
     ca8:	237c      	movs	r3, #124	; 0x7c
     caa:	e5c6      	b.n	83a <_malloc_r+0x46>
     cac:	3310      	adds	r3, #16
     cae:	9300      	str	r3, [sp, #0]
     cb0:	e6aa      	b.n	a08 <_malloc_r+0x214>
     cb2:	2a54      	cmp	r2, #84	; 0x54
     cb4:	d826      	bhi.n	d04 <_malloc_r+0x510>
     cb6:	0b0a      	lsrs	r2, r1, #12
     cb8:	0010      	movs	r0, r2
     cba:	326f      	adds	r2, #111	; 0x6f
     cbc:	306e      	adds	r0, #110	; 0x6e
     cbe:	0052      	lsls	r2, r2, #1
     cc0:	e738      	b.n	b34 <_malloc_r+0x340>
     cc2:	051b      	lsls	r3, r3, #20
     cc4:	d000      	beq.n	cc8 <_malloc_r+0x4d4>
     cc6:	e6b8      	b.n	a3a <_malloc_r+0x246>
     cc8:	9b00      	ldr	r3, [sp, #0]
     cca:	68b2      	ldr	r2, [r6, #8]
     ccc:	4443      	add	r3, r8
     cce:	0018      	movs	r0, r3
     cd0:	2301      	movs	r3, #1
     cd2:	4303      	orrs	r3, r0
     cd4:	6053      	str	r3, [r2, #4]
     cd6:	e6f7      	b.n	ac8 <_malloc_r+0x2d4>
     cd8:	237f      	movs	r3, #127	; 0x7f
     cda:	4698      	mov	r8, r3
     cdc:	3b01      	subs	r3, #1
     cde:	21fe      	movs	r1, #254	; 0xfe
     ce0:	469c      	mov	ip, r3
     ce2:	e5b1      	b.n	848 <_malloc_r+0x54>
     ce4:	465b      	mov	r3, fp
     ce6:	464a      	mov	r2, r9
     ce8:	601a      	str	r2, [r3, #0]
     cea:	e6b1      	b.n	a50 <_malloc_r+0x25c>
     cec:	2300      	movs	r3, #0
     cee:	2001      	movs	r0, #1
     cf0:	469b      	mov	fp, r3
     cf2:	e6ca      	b.n	a8a <_malloc_r+0x296>
     cf4:	0021      	movs	r1, r4
     cf6:	0038      	movs	r0, r7
     cf8:	3108      	adds	r1, #8
     cfa:	f000 fa19 	bl	1130 <_free_r>
     cfe:	4653      	mov	r3, sl
     d00:	6819      	ldr	r1, [r3, #0]
     d02:	e6e1      	b.n	ac8 <_malloc_r+0x2d4>
     d04:	20aa      	movs	r0, #170	; 0xaa
     d06:	0040      	lsls	r0, r0, #1
     d08:	4282      	cmp	r2, r0
     d0a:	d805      	bhi.n	d18 <_malloc_r+0x524>
     d0c:	0bca      	lsrs	r2, r1, #15
     d0e:	0010      	movs	r0, r2
     d10:	3278      	adds	r2, #120	; 0x78
     d12:	3077      	adds	r0, #119	; 0x77
     d14:	0052      	lsls	r2, r2, #1
     d16:	e70d      	b.n	b34 <_malloc_r+0x340>
     d18:	480a      	ldr	r0, [pc, #40]	; (d44 <_malloc_r+0x550>)
     d1a:	4282      	cmp	r2, r0
     d1c:	d805      	bhi.n	d2a <_malloc_r+0x536>
     d1e:	0c8a      	lsrs	r2, r1, #18
     d20:	0010      	movs	r0, r2
     d22:	327d      	adds	r2, #125	; 0x7d
     d24:	307c      	adds	r0, #124	; 0x7c
     d26:	0052      	lsls	r2, r2, #1
     d28:	e704      	b.n	b34 <_malloc_r+0x340>
     d2a:	22fe      	movs	r2, #254	; 0xfe
     d2c:	207e      	movs	r0, #126	; 0x7e
     d2e:	e701      	b.n	b34 <_malloc_r+0x340>
     d30:	6873      	ldr	r3, [r6, #4]
     d32:	e789      	b.n	c48 <_malloc_r+0x454>
     d34:	08e9      	lsrs	r1, r5, #3
     d36:	1c4b      	adds	r3, r1, #1
     d38:	005b      	lsls	r3, r3, #1
     d3a:	e619      	b.n	970 <_malloc_r+0x17c>
     d3c:	4653      	mov	r3, sl
     d3e:	9300      	str	r3, [sp, #0]
     d40:	e5e0      	b.n	904 <_malloc_r+0x110>
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	00000554 	.word	0x00000554

00000d48 <__malloc_lock>:
     d48:	4770      	bx	lr
     d4a:	46c0      	nop			; (mov r8, r8)

00000d4c <__malloc_unlock>:
     d4c:	4770      	bx	lr
     d4e:	46c0      	nop			; (mov r8, r8)

00000d50 <_puts_r>:
     d50:	b530      	push	{r4, r5, lr}
     d52:	0005      	movs	r5, r0
     d54:	b089      	sub	sp, #36	; 0x24
     d56:	0008      	movs	r0, r1
     d58:	000c      	movs	r4, r1
     d5a:	f000 f84d 	bl	df8 <strlen>
     d5e:	ab04      	add	r3, sp, #16
     d60:	4a15      	ldr	r2, [pc, #84]	; (db8 <_puts_r+0x68>)
     d62:	9301      	str	r3, [sp, #4]
     d64:	2302      	movs	r3, #2
     d66:	9206      	str	r2, [sp, #24]
     d68:	2201      	movs	r2, #1
     d6a:	9302      	str	r3, [sp, #8]
     d6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
     d6e:	9005      	str	r0, [sp, #20]
     d70:	3001      	adds	r0, #1
     d72:	9404      	str	r4, [sp, #16]
     d74:	9207      	str	r2, [sp, #28]
     d76:	9003      	str	r0, [sp, #12]
     d78:	68ac      	ldr	r4, [r5, #8]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d017      	beq.n	dae <_puts_r+0x5e>
     d7e:	220c      	movs	r2, #12
     d80:	5ea3      	ldrsh	r3, [r4, r2]
     d82:	2280      	movs	r2, #128	; 0x80
     d84:	0192      	lsls	r2, r2, #6
     d86:	4213      	tst	r3, r2
     d88:	d105      	bne.n	d96 <_puts_r+0x46>
     d8a:	4313      	orrs	r3, r2
     d8c:	81a3      	strh	r3, [r4, #12]
     d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
     d90:	4b0a      	ldr	r3, [pc, #40]	; (dbc <_puts_r+0x6c>)
     d92:	4013      	ands	r3, r2
     d94:	6663      	str	r3, [r4, #100]	; 0x64
     d96:	aa01      	add	r2, sp, #4
     d98:	0021      	movs	r1, r4
     d9a:	0028      	movs	r0, r5
     d9c:	f000 faaa 	bl	12f4 <__sfvwrite_r>
     da0:	1e43      	subs	r3, r0, #1
     da2:	4198      	sbcs	r0, r3
     da4:	230a      	movs	r3, #10
     da6:	4240      	negs	r0, r0
     da8:	4318      	orrs	r0, r3
     daa:	b009      	add	sp, #36	; 0x24
     dac:	bd30      	pop	{r4, r5, pc}
     dae:	0028      	movs	r0, r5
     db0:	f000 f946 	bl	1040 <__sinit>
     db4:	e7e3      	b.n	d7e <_puts_r+0x2e>
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	0000232c 	.word	0x0000232c
     dbc:	ffffdfff 	.word	0xffffdfff

00000dc0 <puts>:
     dc0:	b510      	push	{r4, lr}
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <puts+0x10>)
     dc4:	0001      	movs	r1, r0
     dc6:	6818      	ldr	r0, [r3, #0]
     dc8:	f7ff ffc2 	bl	d50 <_puts_r>
     dcc:	bd10      	pop	{r4, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	10010d40 	.word	0x10010d40

00000dd4 <_sbrk_r>:
     dd4:	2300      	movs	r3, #0
     dd6:	b570      	push	{r4, r5, r6, lr}
     dd8:	4c06      	ldr	r4, [pc, #24]	; (df4 <_sbrk_r+0x20>)
     dda:	0005      	movs	r5, r0
     ddc:	0008      	movs	r0, r1
     dde:	6023      	str	r3, [r4, #0]
     de0:	f7ff fc71 	bl	6c6 <_sbrk>
     de4:	1c43      	adds	r3, r0, #1
     de6:	d000      	beq.n	dea <_sbrk_r+0x16>
     de8:	bd70      	pop	{r4, r5, r6, pc}
     dea:	6823      	ldr	r3, [r4, #0]
     dec:	2b00      	cmp	r3, #0
     dee:	d0fb      	beq.n	de8 <_sbrk_r+0x14>
     df0:	602b      	str	r3, [r5, #0]
     df2:	e7f9      	b.n	de8 <_sbrk_r+0x14>
     df4:	10010da0 	.word	0x10010da0

00000df8 <strlen>:
     df8:	b510      	push	{r4, lr}
     dfa:	0783      	lsls	r3, r0, #30
     dfc:	d027      	beq.n	e4e <strlen+0x56>
     dfe:	7803      	ldrb	r3, [r0, #0]
     e00:	2b00      	cmp	r3, #0
     e02:	d026      	beq.n	e52 <strlen+0x5a>
     e04:	0003      	movs	r3, r0
     e06:	2103      	movs	r1, #3
     e08:	e002      	b.n	e10 <strlen+0x18>
     e0a:	781a      	ldrb	r2, [r3, #0]
     e0c:	2a00      	cmp	r2, #0
     e0e:	d01c      	beq.n	e4a <strlen+0x52>
     e10:	3301      	adds	r3, #1
     e12:	420b      	tst	r3, r1
     e14:	d1f9      	bne.n	e0a <strlen+0x12>
     e16:	6819      	ldr	r1, [r3, #0]
     e18:	4a0f      	ldr	r2, [pc, #60]	; (e58 <strlen+0x60>)
     e1a:	4c10      	ldr	r4, [pc, #64]	; (e5c <strlen+0x64>)
     e1c:	188a      	adds	r2, r1, r2
     e1e:	438a      	bics	r2, r1
     e20:	4222      	tst	r2, r4
     e22:	d10f      	bne.n	e44 <strlen+0x4c>
     e24:	3304      	adds	r3, #4
     e26:	6819      	ldr	r1, [r3, #0]
     e28:	4a0b      	ldr	r2, [pc, #44]	; (e58 <strlen+0x60>)
     e2a:	188a      	adds	r2, r1, r2
     e2c:	438a      	bics	r2, r1
     e2e:	4222      	tst	r2, r4
     e30:	d108      	bne.n	e44 <strlen+0x4c>
     e32:	3304      	adds	r3, #4
     e34:	6819      	ldr	r1, [r3, #0]
     e36:	4a08      	ldr	r2, [pc, #32]	; (e58 <strlen+0x60>)
     e38:	188a      	adds	r2, r1, r2
     e3a:	438a      	bics	r2, r1
     e3c:	4222      	tst	r2, r4
     e3e:	d0f1      	beq.n	e24 <strlen+0x2c>
     e40:	e000      	b.n	e44 <strlen+0x4c>
     e42:	3301      	adds	r3, #1
     e44:	781a      	ldrb	r2, [r3, #0]
     e46:	2a00      	cmp	r2, #0
     e48:	d1fb      	bne.n	e42 <strlen+0x4a>
     e4a:	1a18      	subs	r0, r3, r0
     e4c:	bd10      	pop	{r4, pc}
     e4e:	0003      	movs	r3, r0
     e50:	e7e1      	b.n	e16 <strlen+0x1e>
     e52:	2000      	movs	r0, #0
     e54:	e7fa      	b.n	e4c <strlen+0x54>
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	fefefeff 	.word	0xfefefeff
     e5c:	80808080 	.word	0x80808080

00000e60 <__fp_unlock>:
     e60:	2000      	movs	r0, #0
     e62:	4770      	bx	lr

00000e64 <_cleanup_r>:
     e64:	b510      	push	{r4, lr}
     e66:	4902      	ldr	r1, [pc, #8]	; (e70 <_cleanup_r+0xc>)
     e68:	f000 fbf4 	bl	1654 <_fwalk_reent>
     e6c:	bd10      	pop	{r4, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	00001f1d 	.word	0x00001f1d

00000e74 <__sinit.part.1>:
     e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e76:	465f      	mov	r7, fp
     e78:	4656      	mov	r6, sl
     e7a:	464d      	mov	r5, r9
     e7c:	4644      	mov	r4, r8
     e7e:	4b34      	ldr	r3, [pc, #208]	; (f50 <__sinit.part.1+0xdc>)
     e80:	b4f0      	push	{r4, r5, r6, r7}
     e82:	63c3      	str	r3, [r0, #60]	; 0x3c
     e84:	23b8      	movs	r3, #184	; 0xb8
     e86:	2400      	movs	r4, #0
     e88:	2203      	movs	r2, #3
     e8a:	009b      	lsls	r3, r3, #2
     e8c:	50c4      	str	r4, [r0, r3]
     e8e:	3304      	adds	r3, #4
     e90:	6845      	ldr	r5, [r0, #4]
     e92:	50c2      	str	r2, [r0, r3]
     e94:	3308      	adds	r3, #8
     e96:	18c2      	adds	r2, r0, r3
     e98:	3b04      	subs	r3, #4
     e9a:	50c2      	str	r2, [r0, r3]
     e9c:	0006      	movs	r6, r0
     e9e:	2304      	movs	r3, #4
     ea0:	0028      	movs	r0, r5
     ea2:	602c      	str	r4, [r5, #0]
     ea4:	606c      	str	r4, [r5, #4]
     ea6:	60ac      	str	r4, [r5, #8]
     ea8:	81ab      	strh	r3, [r5, #12]
     eaa:	666c      	str	r4, [r5, #100]	; 0x64
     eac:	81ec      	strh	r4, [r5, #14]
     eae:	612c      	str	r4, [r5, #16]
     eb0:	616c      	str	r4, [r5, #20]
     eb2:	61ac      	str	r4, [r5, #24]
     eb4:	2208      	movs	r2, #8
     eb6:	2100      	movs	r1, #0
     eb8:	305c      	adds	r0, #92	; 0x5c
     eba:	f000 fcc3 	bl	1844 <memset>
     ebe:	4b25      	ldr	r3, [pc, #148]	; (f54 <__sinit.part.1+0xe0>)
     ec0:	4f25      	ldr	r7, [pc, #148]	; (f58 <__sinit.part.1+0xe4>)
     ec2:	469a      	mov	sl, r3
     ec4:	622b      	str	r3, [r5, #32]
     ec6:	4b25      	ldr	r3, [pc, #148]	; (f5c <__sinit.part.1+0xe8>)
     ec8:	62ef      	str	r7, [r5, #44]	; 0x2c
     eca:	4699      	mov	r9, r3
     ecc:	626b      	str	r3, [r5, #36]	; 0x24
     ece:	4b24      	ldr	r3, [pc, #144]	; (f60 <__sinit.part.1+0xec>)
     ed0:	61ed      	str	r5, [r5, #28]
     ed2:	62ab      	str	r3, [r5, #40]	; 0x28
     ed4:	68b5      	ldr	r5, [r6, #8]
     ed6:	4698      	mov	r8, r3
     ed8:	2309      	movs	r3, #9
     eda:	0028      	movs	r0, r5
     edc:	81ab      	strh	r3, [r5, #12]
     ede:	3b08      	subs	r3, #8
     ee0:	602c      	str	r4, [r5, #0]
     ee2:	606c      	str	r4, [r5, #4]
     ee4:	60ac      	str	r4, [r5, #8]
     ee6:	666c      	str	r4, [r5, #100]	; 0x64
     ee8:	81eb      	strh	r3, [r5, #14]
     eea:	612c      	str	r4, [r5, #16]
     eec:	616c      	str	r4, [r5, #20]
     eee:	61ac      	str	r4, [r5, #24]
     ef0:	2208      	movs	r2, #8
     ef2:	2100      	movs	r1, #0
     ef4:	305c      	adds	r0, #92	; 0x5c
     ef6:	469b      	mov	fp, r3
     ef8:	f000 fca4 	bl	1844 <memset>
     efc:	4653      	mov	r3, sl
     efe:	622b      	str	r3, [r5, #32]
     f00:	464b      	mov	r3, r9
     f02:	626b      	str	r3, [r5, #36]	; 0x24
     f04:	4643      	mov	r3, r8
     f06:	62ef      	str	r7, [r5, #44]	; 0x2c
     f08:	62ab      	str	r3, [r5, #40]	; 0x28
     f0a:	61ed      	str	r5, [r5, #28]
     f0c:	68f5      	ldr	r5, [r6, #12]
     f0e:	2312      	movs	r3, #18
     f10:	0028      	movs	r0, r5
     f12:	81ab      	strh	r3, [r5, #12]
     f14:	3b10      	subs	r3, #16
     f16:	81eb      	strh	r3, [r5, #14]
     f18:	602c      	str	r4, [r5, #0]
     f1a:	606c      	str	r4, [r5, #4]
     f1c:	60ac      	str	r4, [r5, #8]
     f1e:	666c      	str	r4, [r5, #100]	; 0x64
     f20:	612c      	str	r4, [r5, #16]
     f22:	616c      	str	r4, [r5, #20]
     f24:	61ac      	str	r4, [r5, #24]
     f26:	2208      	movs	r2, #8
     f28:	2100      	movs	r1, #0
     f2a:	305c      	adds	r0, #92	; 0x5c
     f2c:	f000 fc8a 	bl	1844 <memset>
     f30:	4653      	mov	r3, sl
     f32:	622b      	str	r3, [r5, #32]
     f34:	464b      	mov	r3, r9
     f36:	626b      	str	r3, [r5, #36]	; 0x24
     f38:	4643      	mov	r3, r8
     f3a:	62ab      	str	r3, [r5, #40]	; 0x28
     f3c:	465b      	mov	r3, fp
     f3e:	62ef      	str	r7, [r5, #44]	; 0x2c
     f40:	61ed      	str	r5, [r5, #28]
     f42:	63b3      	str	r3, [r6, #56]	; 0x38
     f44:	bc3c      	pop	{r2, r3, r4, r5}
     f46:	4690      	mov	r8, r2
     f48:	4699      	mov	r9, r3
     f4a:	46a2      	mov	sl, r4
     f4c:	46ab      	mov	fp, r5
     f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f50:	00000e65 	.word	0x00000e65
     f54:	00001d5d 	.word	0x00001d5d
     f58:	00001df1 	.word	0x00001df1
     f5c:	00001d89 	.word	0x00001d89
     f60:	00001dc5 	.word	0x00001dc5

00000f64 <__fp_lock>:
     f64:	2000      	movs	r0, #0
     f66:	4770      	bx	lr

00000f68 <__sfmoreglue>:
     f68:	2368      	movs	r3, #104	; 0x68
     f6a:	b570      	push	{r4, r5, r6, lr}
     f6c:	1e4c      	subs	r4, r1, #1
     f6e:	435c      	muls	r4, r3
     f70:	000e      	movs	r6, r1
     f72:	0021      	movs	r1, r4
     f74:	3174      	adds	r1, #116	; 0x74
     f76:	f7ff fc3d 	bl	7f4 <_malloc_r>
     f7a:	1e05      	subs	r5, r0, #0
     f7c:	d009      	beq.n	f92 <__sfmoreglue+0x2a>
     f7e:	2300      	movs	r3, #0
     f80:	0022      	movs	r2, r4
     f82:	6003      	str	r3, [r0, #0]
     f84:	6046      	str	r6, [r0, #4]
     f86:	300c      	adds	r0, #12
     f88:	60a8      	str	r0, [r5, #8]
     f8a:	3268      	adds	r2, #104	; 0x68
     f8c:	2100      	movs	r1, #0
     f8e:	f000 fc59 	bl	1844 <memset>
     f92:	0028      	movs	r0, r5
     f94:	bd70      	pop	{r4, r5, r6, pc}
     f96:	46c0      	nop			; (mov r8, r8)

00000f98 <__sfp>:
     f98:	4b22      	ldr	r3, [pc, #136]	; (1024 <Stack_Size+0x24>)
     f9a:	b570      	push	{r4, r5, r6, lr}
     f9c:	681d      	ldr	r5, [r3, #0]
     f9e:	0006      	movs	r6, r0
     fa0:	6bab      	ldr	r3, [r5, #56]	; 0x38
     fa2:	2b00      	cmp	r3, #0
     fa4:	d102      	bne.n	fac <__sfp+0x14>
     fa6:	0028      	movs	r0, r5
     fa8:	f7ff ff64 	bl	e74 <__sinit.part.1>
     fac:	23b8      	movs	r3, #184	; 0xb8
     fae:	009b      	lsls	r3, r3, #2
     fb0:	469c      	mov	ip, r3
     fb2:	4465      	add	r5, ip
     fb4:	686b      	ldr	r3, [r5, #4]
     fb6:	68ac      	ldr	r4, [r5, #8]
     fb8:	3b01      	subs	r3, #1
     fba:	d503      	bpl.n	fc4 <__sfp+0x2c>
     fbc:	e01f      	b.n	ffe <__sfp+0x66>
     fbe:	3468      	adds	r4, #104	; 0x68
     fc0:	3b01      	subs	r3, #1
     fc2:	d31c      	bcc.n	ffe <__sfp+0x66>
     fc4:	210c      	movs	r1, #12
     fc6:	5e62      	ldrsh	r2, [r4, r1]
     fc8:	2a00      	cmp	r2, #0
     fca:	d1f8      	bne.n	fbe <__sfp+0x26>
     fcc:	2301      	movs	r3, #1
     fce:	2500      	movs	r5, #0
     fd0:	0020      	movs	r0, r4
     fd2:	425b      	negs	r3, r3
     fd4:	81e3      	strh	r3, [r4, #14]
     fd6:	3302      	adds	r3, #2
     fd8:	81a3      	strh	r3, [r4, #12]
     fda:	6665      	str	r5, [r4, #100]	; 0x64
     fdc:	6025      	str	r5, [r4, #0]
     fde:	60a5      	str	r5, [r4, #8]
     fe0:	6065      	str	r5, [r4, #4]
     fe2:	6125      	str	r5, [r4, #16]
     fe4:	6165      	str	r5, [r4, #20]
     fe6:	61a5      	str	r5, [r4, #24]
     fe8:	305c      	adds	r0, #92	; 0x5c
     fea:	2208      	movs	r2, #8
     fec:	2100      	movs	r1, #0
     fee:	f000 fc29 	bl	1844 <memset>
     ff2:	0020      	movs	r0, r4
     ff4:	6325      	str	r5, [r4, #48]	; 0x30
     ff6:	6365      	str	r5, [r4, #52]	; 0x34
     ff8:	6465      	str	r5, [r4, #68]	; 0x44
     ffa:	64a5      	str	r5, [r4, #72]	; 0x48
     ffc:	bd70      	pop	{r4, r5, r6, pc}
     ffe:	682b      	ldr	r3, [r5, #0]
    1000:	2b00      	cmp	r3, #0
    1002:	d001      	beq.n	1008 <Stack_Size+0x8>
    1004:	001d      	movs	r5, r3
    1006:	e7d5      	b.n	fb4 <__sfp+0x1c>
    1008:	2104      	movs	r1, #4
    100a:	0030      	movs	r0, r6
    100c:	f7ff ffac 	bl	f68 <__sfmoreglue>
    1010:	6028      	str	r0, [r5, #0]
    1012:	2800      	cmp	r0, #0
    1014:	d001      	beq.n	101a <Stack_Size+0x1a>
    1016:	0005      	movs	r5, r0
    1018:	e7cc      	b.n	fb4 <__sfp+0x1c>
    101a:	230c      	movs	r3, #12
    101c:	2000      	movs	r0, #0
    101e:	6033      	str	r3, [r6, #0]
    1020:	e7ec      	b.n	ffc <__sfp+0x64>
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	00002330 	.word	0x00002330

00001028 <_cleanup>:
    1028:	b510      	push	{r4, lr}
    102a:	4b03      	ldr	r3, [pc, #12]	; (1038 <_cleanup+0x10>)
    102c:	4903      	ldr	r1, [pc, #12]	; (103c <_cleanup+0x14>)
    102e:	6818      	ldr	r0, [r3, #0]
    1030:	f000 fb10 	bl	1654 <_fwalk_reent>
    1034:	bd10      	pop	{r4, pc}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	00002330 	.word	0x00002330
    103c:	00001f1d 	.word	0x00001f1d

00001040 <__sinit>:
    1040:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1042:	b510      	push	{r4, lr}
    1044:	2b00      	cmp	r3, #0
    1046:	d101      	bne.n	104c <__sinit+0xc>
    1048:	f7ff ff14 	bl	e74 <__sinit.part.1>
    104c:	bd10      	pop	{r4, pc}
    104e:	46c0      	nop			; (mov r8, r8)

00001050 <__sfp_lock_acquire>:
    1050:	4770      	bx	lr
    1052:	46c0      	nop			; (mov r8, r8)

00001054 <__sfp_lock_release>:
    1054:	4770      	bx	lr
    1056:	46c0      	nop			; (mov r8, r8)

00001058 <__sinit_lock_acquire>:
    1058:	4770      	bx	lr
    105a:	46c0      	nop			; (mov r8, r8)

0000105c <__sinit_lock_release>:
    105c:	4770      	bx	lr
    105e:	46c0      	nop			; (mov r8, r8)

00001060 <__fp_lock_all>:
    1060:	b510      	push	{r4, lr}
    1062:	4b03      	ldr	r3, [pc, #12]	; (1070 <__fp_lock_all+0x10>)
    1064:	4903      	ldr	r1, [pc, #12]	; (1074 <__fp_lock_all+0x14>)
    1066:	6818      	ldr	r0, [r3, #0]
    1068:	f000 fad2 	bl	1610 <_fwalk>
    106c:	bd10      	pop	{r4, pc}
    106e:	46c0      	nop			; (mov r8, r8)
    1070:	10010d40 	.word	0x10010d40
    1074:	00000f65 	.word	0x00000f65

00001078 <__fp_unlock_all>:
    1078:	b510      	push	{r4, lr}
    107a:	4b03      	ldr	r3, [pc, #12]	; (1088 <__fp_unlock_all+0x10>)
    107c:	4903      	ldr	r1, [pc, #12]	; (108c <__fp_unlock_all+0x14>)
    107e:	6818      	ldr	r0, [r3, #0]
    1080:	f000 fac6 	bl	1610 <_fwalk>
    1084:	bd10      	pop	{r4, pc}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	10010d40 	.word	0x10010d40
    108c:	00000e61 	.word	0x00000e61

00001090 <_malloc_trim_r>:
    1090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1092:	000c      	movs	r4, r1
    1094:	0006      	movs	r6, r0
    1096:	f7ff fe57 	bl	d48 <__malloc_lock>
    109a:	4f20      	ldr	r7, [pc, #128]	; (111c <_malloc_trim_r+0x8c>)
    109c:	68bb      	ldr	r3, [r7, #8]
    109e:	685d      	ldr	r5, [r3, #4]
    10a0:	2303      	movs	r3, #3
    10a2:	439d      	bics	r5, r3
    10a4:	4b1e      	ldr	r3, [pc, #120]	; (1120 <_malloc_trim_r+0x90>)
    10a6:	1b2c      	subs	r4, r5, r4
    10a8:	469c      	mov	ip, r3
    10aa:	4464      	add	r4, ip
    10ac:	0b24      	lsrs	r4, r4, #12
    10ae:	4b1d      	ldr	r3, [pc, #116]	; (1124 <_malloc_trim_r+0x94>)
    10b0:	3c01      	subs	r4, #1
    10b2:	0324      	lsls	r4, r4, #12
    10b4:	429c      	cmp	r4, r3
    10b6:	dd07      	ble.n	10c8 <_malloc_trim_r+0x38>
    10b8:	2100      	movs	r1, #0
    10ba:	0030      	movs	r0, r6
    10bc:	f7ff fe8a 	bl	dd4 <_sbrk_r>
    10c0:	68bb      	ldr	r3, [r7, #8]
    10c2:	195b      	adds	r3, r3, r5
    10c4:	4298      	cmp	r0, r3
    10c6:	d004      	beq.n	10d2 <_malloc_trim_r+0x42>
    10c8:	0030      	movs	r0, r6
    10ca:	f7ff fe3f 	bl	d4c <__malloc_unlock>
    10ce:	2000      	movs	r0, #0
    10d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10d2:	4261      	negs	r1, r4
    10d4:	0030      	movs	r0, r6
    10d6:	f7ff fe7d 	bl	dd4 <_sbrk_r>
    10da:	1c43      	adds	r3, r0, #1
    10dc:	d00d      	beq.n	10fa <_malloc_trim_r+0x6a>
    10de:	2301      	movs	r3, #1
    10e0:	1b2d      	subs	r5, r5, r4
    10e2:	68ba      	ldr	r2, [r7, #8]
    10e4:	431d      	orrs	r5, r3
    10e6:	4b10      	ldr	r3, [pc, #64]	; (1128 <_malloc_trim_r+0x98>)
    10e8:	6055      	str	r5, [r2, #4]
    10ea:	681a      	ldr	r2, [r3, #0]
    10ec:	0030      	movs	r0, r6
    10ee:	1b14      	subs	r4, r2, r4
    10f0:	601c      	str	r4, [r3, #0]
    10f2:	f7ff fe2b 	bl	d4c <__malloc_unlock>
    10f6:	2001      	movs	r0, #1
    10f8:	e7ea      	b.n	10d0 <_malloc_trim_r+0x40>
    10fa:	2100      	movs	r1, #0
    10fc:	0030      	movs	r0, r6
    10fe:	f7ff fe69 	bl	dd4 <_sbrk_r>
    1102:	68bb      	ldr	r3, [r7, #8]
    1104:	1ac2      	subs	r2, r0, r3
    1106:	2a0f      	cmp	r2, #15
    1108:	ddde      	ble.n	10c8 <_malloc_trim_r+0x38>
    110a:	4908      	ldr	r1, [pc, #32]	; (112c <_malloc_trim_r+0x9c>)
    110c:	6809      	ldr	r1, [r1, #0]
    110e:	1a40      	subs	r0, r0, r1
    1110:	4905      	ldr	r1, [pc, #20]	; (1128 <_malloc_trim_r+0x98>)
    1112:	6008      	str	r0, [r1, #0]
    1114:	2101      	movs	r1, #1
    1116:	430a      	orrs	r2, r1
    1118:	605a      	str	r2, [r3, #4]
    111a:	e7d5      	b.n	10c8 <_malloc_trim_r+0x38>
    111c:	10010504 	.word	0x10010504
    1120:	00000fef 	.word	0x00000fef
    1124:	00000fff 	.word	0x00000fff
    1128:	10010d54 	.word	0x10010d54
    112c:	10010910 	.word	0x10010910

00001130 <_free_r>:
    1130:	b5f0      	push	{r4, r5, r6, r7, lr}
    1132:	4647      	mov	r7, r8
    1134:	0005      	movs	r5, r0
    1136:	b480      	push	{r7}
    1138:	1e0c      	subs	r4, r1, #0
    113a:	d03e      	beq.n	11ba <_free_r+0x8a>
    113c:	f7ff fe04 	bl	d48 <__malloc_lock>
    1140:	2301      	movs	r3, #1
    1142:	0021      	movs	r1, r4
    1144:	4698      	mov	r8, r3
    1146:	3908      	subs	r1, #8
    1148:	684e      	ldr	r6, [r1, #4]
    114a:	4642      	mov	r2, r8
    114c:	0033      	movs	r3, r6
    114e:	2003      	movs	r0, #3
    1150:	4393      	bics	r3, r2
    1152:	18cc      	adds	r4, r1, r3
    1154:	6862      	ldr	r2, [r4, #4]
    1156:	4382      	bics	r2, r0
    1158:	4860      	ldr	r0, [pc, #384]	; (12dc <_free_r+0x1ac>)
    115a:	6887      	ldr	r7, [r0, #8]
    115c:	42bc      	cmp	r4, r7
    115e:	d05a      	beq.n	1216 <_free_r+0xe6>
    1160:	4647      	mov	r7, r8
    1162:	6062      	str	r2, [r4, #4]
    1164:	4237      	tst	r7, r6
    1166:	d10b      	bne.n	1180 <_free_r+0x50>
    1168:	2708      	movs	r7, #8
    116a:	46bc      	mov	ip, r7
    116c:	680e      	ldr	r6, [r1, #0]
    116e:	4484      	add	ip, r0
    1170:	1b89      	subs	r1, r1, r6
    1172:	199b      	adds	r3, r3, r6
    1174:	688e      	ldr	r6, [r1, #8]
    1176:	4566      	cmp	r6, ip
    1178:	d066      	beq.n	1248 <_free_r+0x118>
    117a:	68cf      	ldr	r7, [r1, #12]
    117c:	60f7      	str	r7, [r6, #12]
    117e:	60be      	str	r6, [r7, #8]
    1180:	2601      	movs	r6, #1
    1182:	18a7      	adds	r7, r4, r2
    1184:	687f      	ldr	r7, [r7, #4]
    1186:	4237      	tst	r7, r6
    1188:	d036      	beq.n	11f8 <_free_r+0xc8>
    118a:	4a55      	ldr	r2, [pc, #340]	; (12e0 <_free_r+0x1b0>)
    118c:	431e      	orrs	r6, r3
    118e:	604e      	str	r6, [r1, #4]
    1190:	50cb      	str	r3, [r1, r3]
    1192:	4293      	cmp	r3, r2
    1194:	d814      	bhi.n	11c0 <_free_r+0x90>
    1196:	08db      	lsrs	r3, r3, #3
    1198:	3aff      	subs	r2, #255	; 0xff
    119a:	109c      	asrs	r4, r3, #2
    119c:	3aff      	subs	r2, #255	; 0xff
    119e:	40a2      	lsls	r2, r4
    11a0:	6844      	ldr	r4, [r0, #4]
    11a2:	00db      	lsls	r3, r3, #3
    11a4:	4322      	orrs	r2, r4
    11a6:	6042      	str	r2, [r0, #4]
    11a8:	1818      	adds	r0, r3, r0
    11aa:	6883      	ldr	r3, [r0, #8]
    11ac:	60c8      	str	r0, [r1, #12]
    11ae:	608b      	str	r3, [r1, #8]
    11b0:	6081      	str	r1, [r0, #8]
    11b2:	60d9      	str	r1, [r3, #12]
    11b4:	0028      	movs	r0, r5
    11b6:	f7ff fdc9 	bl	d4c <__malloc_unlock>
    11ba:	bc04      	pop	{r2}
    11bc:	4690      	mov	r8, r2
    11be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11c0:	0a5a      	lsrs	r2, r3, #9
    11c2:	2a04      	cmp	r2, #4
    11c4:	d84f      	bhi.n	1266 <_free_r+0x136>
    11c6:	099c      	lsrs	r4, r3, #6
    11c8:	0026      	movs	r6, r4
    11ca:	3439      	adds	r4, #57	; 0x39
    11cc:	3638      	adds	r6, #56	; 0x38
    11ce:	0064      	lsls	r4, r4, #1
    11d0:	00a4      	lsls	r4, r4, #2
    11d2:	1904      	adds	r4, r0, r4
    11d4:	3c08      	subs	r4, #8
    11d6:	68a2      	ldr	r2, [r4, #8]
    11d8:	2703      	movs	r7, #3
    11da:	4294      	cmp	r4, r2
    11dc:	d04a      	beq.n	1274 <_free_r+0x144>
    11de:	6850      	ldr	r0, [r2, #4]
    11e0:	43b8      	bics	r0, r7
    11e2:	4283      	cmp	r3, r0
    11e4:	d202      	bcs.n	11ec <_free_r+0xbc>
    11e6:	6892      	ldr	r2, [r2, #8]
    11e8:	4294      	cmp	r4, r2
    11ea:	d1f8      	bne.n	11de <_free_r+0xae>
    11ec:	68d4      	ldr	r4, [r2, #12]
    11ee:	60cc      	str	r4, [r1, #12]
    11f0:	608a      	str	r2, [r1, #8]
    11f2:	60a1      	str	r1, [r4, #8]
    11f4:	60d1      	str	r1, [r2, #12]
    11f6:	e7dd      	b.n	11b4 <_free_r+0x84>
    11f8:	189b      	adds	r3, r3, r2
    11fa:	4f3a      	ldr	r7, [pc, #232]	; (12e4 <_free_r+0x1b4>)
    11fc:	68a2      	ldr	r2, [r4, #8]
    11fe:	42ba      	cmp	r2, r7
    1200:	d040      	beq.n	1284 <_free_r+0x154>
    1202:	68e4      	ldr	r4, [r4, #12]
    1204:	431e      	orrs	r6, r3
    1206:	60d4      	str	r4, [r2, #12]
    1208:	60a2      	str	r2, [r4, #8]
    120a:	4a35      	ldr	r2, [pc, #212]	; (12e0 <_free_r+0x1b0>)
    120c:	604e      	str	r6, [r1, #4]
    120e:	50cb      	str	r3, [r1, r3]
    1210:	4293      	cmp	r3, r2
    1212:	d8d5      	bhi.n	11c0 <_free_r+0x90>
    1214:	e7bf      	b.n	1196 <_free_r+0x66>
    1216:	189b      	adds	r3, r3, r2
    1218:	4642      	mov	r2, r8
    121a:	4232      	tst	r2, r6
    121c:	d106      	bne.n	122c <_free_r+0xfc>
    121e:	680a      	ldr	r2, [r1, #0]
    1220:	1a89      	subs	r1, r1, r2
    1222:	688c      	ldr	r4, [r1, #8]
    1224:	189b      	adds	r3, r3, r2
    1226:	68ca      	ldr	r2, [r1, #12]
    1228:	60e2      	str	r2, [r4, #12]
    122a:	6094      	str	r4, [r2, #8]
    122c:	2401      	movs	r4, #1
    122e:	4a2e      	ldr	r2, [pc, #184]	; (12e8 <_free_r+0x1b8>)
    1230:	431c      	orrs	r4, r3
    1232:	6812      	ldr	r2, [r2, #0]
    1234:	604c      	str	r4, [r1, #4]
    1236:	6081      	str	r1, [r0, #8]
    1238:	4293      	cmp	r3, r2
    123a:	d3bb      	bcc.n	11b4 <_free_r+0x84>
    123c:	4b2b      	ldr	r3, [pc, #172]	; (12ec <_free_r+0x1bc>)
    123e:	0028      	movs	r0, r5
    1240:	6819      	ldr	r1, [r3, #0]
    1242:	f7ff ff25 	bl	1090 <_malloc_trim_r>
    1246:	e7b5      	b.n	11b4 <_free_r+0x84>
    1248:	4646      	mov	r6, r8
    124a:	18a0      	adds	r0, r4, r2
    124c:	6840      	ldr	r0, [r0, #4]
    124e:	4230      	tst	r0, r6
    1250:	d13e      	bne.n	12d0 <_free_r+0x1a0>
    1252:	68a0      	ldr	r0, [r4, #8]
    1254:	18d3      	adds	r3, r2, r3
    1256:	68e2      	ldr	r2, [r4, #12]
    1258:	60c2      	str	r2, [r0, #12]
    125a:	6090      	str	r0, [r2, #8]
    125c:	4642      	mov	r2, r8
    125e:	431a      	orrs	r2, r3
    1260:	604a      	str	r2, [r1, #4]
    1262:	50cb      	str	r3, [r1, r3]
    1264:	e7a6      	b.n	11b4 <_free_r+0x84>
    1266:	2a14      	cmp	r2, #20
    1268:	d814      	bhi.n	1294 <_free_r+0x164>
    126a:	0016      	movs	r6, r2
    126c:	325c      	adds	r2, #92	; 0x5c
    126e:	365b      	adds	r6, #91	; 0x5b
    1270:	0054      	lsls	r4, r2, #1
    1272:	e7ad      	b.n	11d0 <_free_r+0xa0>
    1274:	2301      	movs	r3, #1
    1276:	10b6      	asrs	r6, r6, #2
    1278:	40b3      	lsls	r3, r6
    127a:	6842      	ldr	r2, [r0, #4]
    127c:	4313      	orrs	r3, r2
    127e:	6043      	str	r3, [r0, #4]
    1280:	0022      	movs	r2, r4
    1282:	e7b4      	b.n	11ee <_free_r+0xbe>
    1284:	431e      	orrs	r6, r3
    1286:	60d1      	str	r1, [r2, #12]
    1288:	6091      	str	r1, [r2, #8]
    128a:	60ca      	str	r2, [r1, #12]
    128c:	608a      	str	r2, [r1, #8]
    128e:	604e      	str	r6, [r1, #4]
    1290:	50cb      	str	r3, [r1, r3]
    1292:	e78f      	b.n	11b4 <_free_r+0x84>
    1294:	2a54      	cmp	r2, #84	; 0x54
    1296:	d805      	bhi.n	12a4 <_free_r+0x174>
    1298:	0b1c      	lsrs	r4, r3, #12
    129a:	0026      	movs	r6, r4
    129c:	346f      	adds	r4, #111	; 0x6f
    129e:	366e      	adds	r6, #110	; 0x6e
    12a0:	0064      	lsls	r4, r4, #1
    12a2:	e795      	b.n	11d0 <_free_r+0xa0>
    12a4:	24aa      	movs	r4, #170	; 0xaa
    12a6:	0064      	lsls	r4, r4, #1
    12a8:	42a2      	cmp	r2, r4
    12aa:	d805      	bhi.n	12b8 <_free_r+0x188>
    12ac:	0bdc      	lsrs	r4, r3, #15
    12ae:	0026      	movs	r6, r4
    12b0:	3478      	adds	r4, #120	; 0x78
    12b2:	3677      	adds	r6, #119	; 0x77
    12b4:	0064      	lsls	r4, r4, #1
    12b6:	e78b      	b.n	11d0 <_free_r+0xa0>
    12b8:	4c0d      	ldr	r4, [pc, #52]	; (12f0 <_free_r+0x1c0>)
    12ba:	42a2      	cmp	r2, r4
    12bc:	d805      	bhi.n	12ca <_free_r+0x19a>
    12be:	0c9c      	lsrs	r4, r3, #18
    12c0:	0026      	movs	r6, r4
    12c2:	347d      	adds	r4, #125	; 0x7d
    12c4:	367c      	adds	r6, #124	; 0x7c
    12c6:	0064      	lsls	r4, r4, #1
    12c8:	e782      	b.n	11d0 <_free_r+0xa0>
    12ca:	24fe      	movs	r4, #254	; 0xfe
    12cc:	267e      	movs	r6, #126	; 0x7e
    12ce:	e77f      	b.n	11d0 <_free_r+0xa0>
    12d0:	4642      	mov	r2, r8
    12d2:	431a      	orrs	r2, r3
    12d4:	604a      	str	r2, [r1, #4]
    12d6:	50cb      	str	r3, [r1, r3]
    12d8:	e76c      	b.n	11b4 <_free_r+0x84>
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	10010504 	.word	0x10010504
    12e0:	000001ff 	.word	0x000001ff
    12e4:	1001050c 	.word	0x1001050c
    12e8:	1001090c 	.word	0x1001090c
    12ec:	10010d50 	.word	0x10010d50
    12f0:	00000554 	.word	0x00000554

000012f4 <__sfvwrite_r>:
    12f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12f6:	4656      	mov	r6, sl
    12f8:	4644      	mov	r4, r8
    12fa:	465f      	mov	r7, fp
    12fc:	464d      	mov	r5, r9
    12fe:	b4f0      	push	{r4, r5, r6, r7}
    1300:	6893      	ldr	r3, [r2, #8]
    1302:	b085      	sub	sp, #20
    1304:	9001      	str	r0, [sp, #4]
    1306:	000c      	movs	r4, r1
    1308:	4692      	mov	sl, r2
    130a:	2b00      	cmp	r3, #0
    130c:	d025      	beq.n	135a <__sfvwrite_r+0x66>
    130e:	898b      	ldrh	r3, [r1, #12]
    1310:	071a      	lsls	r2, r3, #28
    1312:	d52a      	bpl.n	136a <__sfvwrite_r+0x76>
    1314:	690a      	ldr	r2, [r1, #16]
    1316:	2a00      	cmp	r2, #0
    1318:	d027      	beq.n	136a <__sfvwrite_r+0x76>
    131a:	4652      	mov	r2, sl
    131c:	6812      	ldr	r2, [r2, #0]
    131e:	4693      	mov	fp, r2
    1320:	079a      	lsls	r2, r3, #30
    1322:	d52f      	bpl.n	1384 <__sfvwrite_r+0x90>
    1324:	4bb7      	ldr	r3, [pc, #732]	; (1604 <__sfvwrite_r+0x310>)
    1326:	2600      	movs	r6, #0
    1328:	2500      	movs	r5, #0
    132a:	4698      	mov	r8, r3
    132c:	2d00      	cmp	r5, #0
    132e:	d100      	bne.n	1332 <__sfvwrite_r+0x3e>
    1330:	e06d      	b.n	140e <__sfvwrite_r+0x11a>
    1332:	002b      	movs	r3, r5
    1334:	4545      	cmp	r5, r8
    1336:	d900      	bls.n	133a <__sfvwrite_r+0x46>
    1338:	4bb2      	ldr	r3, [pc, #712]	; (1604 <__sfvwrite_r+0x310>)
    133a:	0032      	movs	r2, r6
    133c:	69e1      	ldr	r1, [r4, #28]
    133e:	9801      	ldr	r0, [sp, #4]
    1340:	6a67      	ldr	r7, [r4, #36]	; 0x24
    1342:	47b8      	blx	r7
    1344:	2800      	cmp	r0, #0
    1346:	dc00      	bgt.n	134a <__sfvwrite_r+0x56>
    1348:	e079      	b.n	143e <__sfvwrite_r+0x14a>
    134a:	4653      	mov	r3, sl
    134c:	689b      	ldr	r3, [r3, #8]
    134e:	1836      	adds	r6, r6, r0
    1350:	1a2d      	subs	r5, r5, r0
    1352:	1a18      	subs	r0, r3, r0
    1354:	4653      	mov	r3, sl
    1356:	6098      	str	r0, [r3, #8]
    1358:	d1e8      	bne.n	132c <__sfvwrite_r+0x38>
    135a:	2000      	movs	r0, #0
    135c:	b005      	add	sp, #20
    135e:	bc3c      	pop	{r2, r3, r4, r5}
    1360:	4690      	mov	r8, r2
    1362:	4699      	mov	r9, r3
    1364:	46a2      	mov	sl, r4
    1366:	46ab      	mov	fp, r5
    1368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    136a:	0021      	movs	r1, r4
    136c:	9801      	ldr	r0, [sp, #4]
    136e:	f000 fd59 	bl	1e24 <__swsetup_r>
    1372:	2800      	cmp	r0, #0
    1374:	d000      	beq.n	1378 <__sfvwrite_r+0x84>
    1376:	e13b      	b.n	15f0 <__sfvwrite_r+0x2fc>
    1378:	4652      	mov	r2, sl
    137a:	89a3      	ldrh	r3, [r4, #12]
    137c:	6812      	ldr	r2, [r2, #0]
    137e:	4693      	mov	fp, r2
    1380:	079a      	lsls	r2, r3, #30
    1382:	d4cf      	bmi.n	1324 <__sfvwrite_r+0x30>
    1384:	07da      	lsls	r2, r3, #31
    1386:	d562      	bpl.n	144e <__sfvwrite_r+0x15a>
    1388:	2300      	movs	r3, #0
    138a:	2700      	movs	r7, #0
    138c:	4699      	mov	r9, r3
    138e:	001d      	movs	r5, r3
    1390:	9302      	str	r3, [sp, #8]
    1392:	2f00      	cmp	r7, #0
    1394:	d030      	beq.n	13f8 <__sfvwrite_r+0x104>
    1396:	9b02      	ldr	r3, [sp, #8]
    1398:	2b00      	cmp	r3, #0
    139a:	d100      	bne.n	139e <__sfvwrite_r+0xaa>
    139c:	e0c3      	b.n	1526 <__sfvwrite_r+0x232>
    139e:	002e      	movs	r6, r5
    13a0:	42bd      	cmp	r5, r7
    13a2:	d900      	bls.n	13a6 <__sfvwrite_r+0xb2>
    13a4:	003e      	movs	r6, r7
    13a6:	6820      	ldr	r0, [r4, #0]
    13a8:	6922      	ldr	r2, [r4, #16]
    13aa:	46b0      	mov	r8, r6
    13ac:	6963      	ldr	r3, [r4, #20]
    13ae:	4290      	cmp	r0, r2
    13b0:	d907      	bls.n	13c2 <__sfvwrite_r+0xce>
    13b2:	68a2      	ldr	r2, [r4, #8]
    13b4:	4694      	mov	ip, r2
    13b6:	449c      	add	ip, r3
    13b8:	4662      	mov	r2, ip
    13ba:	9203      	str	r2, [sp, #12]
    13bc:	4566      	cmp	r6, ip
    13be:	dd00      	ble.n	13c2 <__sfvwrite_r+0xce>
    13c0:	e0ef      	b.n	15a2 <__sfvwrite_r+0x2ae>
    13c2:	429e      	cmp	r6, r3
    13c4:	da00      	bge.n	13c8 <__sfvwrite_r+0xd4>
    13c6:	e092      	b.n	14ee <__sfvwrite_r+0x1fa>
    13c8:	464a      	mov	r2, r9
    13ca:	69e1      	ldr	r1, [r4, #28]
    13cc:	9801      	ldr	r0, [sp, #4]
    13ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
    13d0:	47b0      	blx	r6
    13d2:	4680      	mov	r8, r0
    13d4:	2800      	cmp	r0, #0
    13d6:	dd32      	ble.n	143e <__sfvwrite_r+0x14a>
    13d8:	4643      	mov	r3, r8
    13da:	1aed      	subs	r5, r5, r3
    13dc:	d100      	bne.n	13e0 <__sfvwrite_r+0xec>
    13de:	e095      	b.n	150c <__sfvwrite_r+0x218>
    13e0:	4643      	mov	r3, r8
    13e2:	1aff      	subs	r7, r7, r3
    13e4:	4653      	mov	r3, sl
    13e6:	4642      	mov	r2, r8
    13e8:	689b      	ldr	r3, [r3, #8]
    13ea:	44c1      	add	r9, r8
    13ec:	1a9b      	subs	r3, r3, r2
    13ee:	4652      	mov	r2, sl
    13f0:	6093      	str	r3, [r2, #8]
    13f2:	d0b2      	beq.n	135a <__sfvwrite_r+0x66>
    13f4:	2f00      	cmp	r7, #0
    13f6:	d1ce      	bne.n	1396 <__sfvwrite_r+0xa2>
    13f8:	465b      	mov	r3, fp
    13fa:	681b      	ldr	r3, [r3, #0]
    13fc:	4699      	mov	r9, r3
    13fe:	465b      	mov	r3, fp
    1400:	685f      	ldr	r7, [r3, #4]
    1402:	2308      	movs	r3, #8
    1404:	469c      	mov	ip, r3
    1406:	2300      	movs	r3, #0
    1408:	44e3      	add	fp, ip
    140a:	9302      	str	r3, [sp, #8]
    140c:	e7c1      	b.n	1392 <__sfvwrite_r+0x9e>
    140e:	465b      	mov	r3, fp
    1410:	681e      	ldr	r6, [r3, #0]
    1412:	685d      	ldr	r5, [r3, #4]
    1414:	2308      	movs	r3, #8
    1416:	469c      	mov	ip, r3
    1418:	44e3      	add	fp, ip
    141a:	e787      	b.n	132c <__sfvwrite_r+0x38>
    141c:	4b7a      	ldr	r3, [pc, #488]	; (1608 <__sfvwrite_r+0x314>)
    141e:	0030      	movs	r0, r6
    1420:	429e      	cmp	r6, r3
    1422:	d900      	bls.n	1426 <__sfvwrite_r+0x132>
    1424:	0018      	movs	r0, r3
    1426:	4641      	mov	r1, r8
    1428:	f7ff f98f 	bl	74a <__aeabi_idiv>
    142c:	4643      	mov	r3, r8
    142e:	003a      	movs	r2, r7
    1430:	4343      	muls	r3, r0
    1432:	69e1      	ldr	r1, [r4, #28]
    1434:	9801      	ldr	r0, [sp, #4]
    1436:	6a65      	ldr	r5, [r4, #36]	; 0x24
    1438:	47a8      	blx	r5
    143a:	2800      	cmp	r0, #0
    143c:	dc23      	bgt.n	1486 <__sfvwrite_r+0x192>
    143e:	230c      	movs	r3, #12
    1440:	5ee2      	ldrsh	r2, [r4, r3]
    1442:	2340      	movs	r3, #64	; 0x40
    1444:	2001      	movs	r0, #1
    1446:	4313      	orrs	r3, r2
    1448:	81a3      	strh	r3, [r4, #12]
    144a:	4240      	negs	r0, r0
    144c:	e786      	b.n	135c <__sfvwrite_r+0x68>
    144e:	2700      	movs	r7, #0
    1450:	2600      	movs	r6, #0
    1452:	2e00      	cmp	r6, #0
    1454:	d023      	beq.n	149e <__sfvwrite_r+0x1aa>
    1456:	2280      	movs	r2, #128	; 0x80
    1458:	0092      	lsls	r2, r2, #2
    145a:	68a5      	ldr	r5, [r4, #8]
    145c:	4213      	tst	r3, r2
    145e:	d025      	beq.n	14ac <__sfvwrite_r+0x1b8>
    1460:	46a8      	mov	r8, r5
    1462:	42ae      	cmp	r6, r5
    1464:	d35b      	bcc.n	151e <__sfvwrite_r+0x22a>
    1466:	2290      	movs	r2, #144	; 0x90
    1468:	00d2      	lsls	r2, r2, #3
    146a:	4213      	tst	r3, r2
    146c:	d168      	bne.n	1540 <__sfvwrite_r+0x24c>
    146e:	6820      	ldr	r0, [r4, #0]
    1470:	4642      	mov	r2, r8
    1472:	0039      	movs	r1, r7
    1474:	f000 f99a 	bl	17ac <memmove>
    1478:	0030      	movs	r0, r6
    147a:	68a3      	ldr	r3, [r4, #8]
    147c:	1b5d      	subs	r5, r3, r5
    147e:	6823      	ldr	r3, [r4, #0]
    1480:	60a5      	str	r5, [r4, #8]
    1482:	4443      	add	r3, r8
    1484:	6023      	str	r3, [r4, #0]
    1486:	4653      	mov	r3, sl
    1488:	689b      	ldr	r3, [r3, #8]
    148a:	183f      	adds	r7, r7, r0
    148c:	1a36      	subs	r6, r6, r0
    148e:	1a18      	subs	r0, r3, r0
    1490:	4653      	mov	r3, sl
    1492:	6098      	str	r0, [r3, #8]
    1494:	d100      	bne.n	1498 <__sfvwrite_r+0x1a4>
    1496:	e760      	b.n	135a <__sfvwrite_r+0x66>
    1498:	89a3      	ldrh	r3, [r4, #12]
    149a:	2e00      	cmp	r6, #0
    149c:	d1db      	bne.n	1456 <__sfvwrite_r+0x162>
    149e:	465a      	mov	r2, fp
    14a0:	6817      	ldr	r7, [r2, #0]
    14a2:	6856      	ldr	r6, [r2, #4]
    14a4:	2208      	movs	r2, #8
    14a6:	4694      	mov	ip, r2
    14a8:	44e3      	add	fp, ip
    14aa:	e7d2      	b.n	1452 <__sfvwrite_r+0x15e>
    14ac:	6820      	ldr	r0, [r4, #0]
    14ae:	6923      	ldr	r3, [r4, #16]
    14b0:	4298      	cmp	r0, r3
    14b2:	d803      	bhi.n	14bc <__sfvwrite_r+0x1c8>
    14b4:	6963      	ldr	r3, [r4, #20]
    14b6:	4698      	mov	r8, r3
    14b8:	429e      	cmp	r6, r3
    14ba:	d2af      	bcs.n	141c <__sfvwrite_r+0x128>
    14bc:	42b5      	cmp	r5, r6
    14be:	d900      	bls.n	14c2 <__sfvwrite_r+0x1ce>
    14c0:	0035      	movs	r5, r6
    14c2:	002a      	movs	r2, r5
    14c4:	0039      	movs	r1, r7
    14c6:	f000 f971 	bl	17ac <memmove>
    14ca:	68a3      	ldr	r3, [r4, #8]
    14cc:	6822      	ldr	r2, [r4, #0]
    14ce:	1b5b      	subs	r3, r3, r5
    14d0:	1952      	adds	r2, r2, r5
    14d2:	60a3      	str	r3, [r4, #8]
    14d4:	6022      	str	r2, [r4, #0]
    14d6:	2b00      	cmp	r3, #0
    14d8:	d001      	beq.n	14de <__sfvwrite_r+0x1ea>
    14da:	0028      	movs	r0, r5
    14dc:	e7d3      	b.n	1486 <__sfvwrite_r+0x192>
    14de:	0021      	movs	r1, r4
    14e0:	9801      	ldr	r0, [sp, #4]
    14e2:	f000 fe13 	bl	210c <_fflush_r>
    14e6:	2800      	cmp	r0, #0
    14e8:	d1a9      	bne.n	143e <__sfvwrite_r+0x14a>
    14ea:	0028      	movs	r0, r5
    14ec:	e7cb      	b.n	1486 <__sfvwrite_r+0x192>
    14ee:	0032      	movs	r2, r6
    14f0:	4649      	mov	r1, r9
    14f2:	f000 f95b 	bl	17ac <memmove>
    14f6:	68a3      	ldr	r3, [r4, #8]
    14f8:	1b9b      	subs	r3, r3, r6
    14fa:	60a3      	str	r3, [r4, #8]
    14fc:	6823      	ldr	r3, [r4, #0]
    14fe:	469c      	mov	ip, r3
    1500:	4643      	mov	r3, r8
    1502:	4466      	add	r6, ip
    1504:	6026      	str	r6, [r4, #0]
    1506:	1aed      	subs	r5, r5, r3
    1508:	d000      	beq.n	150c <__sfvwrite_r+0x218>
    150a:	e769      	b.n	13e0 <__sfvwrite_r+0xec>
    150c:	0021      	movs	r1, r4
    150e:	9801      	ldr	r0, [sp, #4]
    1510:	f000 fdfc 	bl	210c <_fflush_r>
    1514:	2800      	cmp	r0, #0
    1516:	d192      	bne.n	143e <__sfvwrite_r+0x14a>
    1518:	2300      	movs	r3, #0
    151a:	9302      	str	r3, [sp, #8]
    151c:	e760      	b.n	13e0 <__sfvwrite_r+0xec>
    151e:	0035      	movs	r5, r6
    1520:	6820      	ldr	r0, [r4, #0]
    1522:	46b0      	mov	r8, r6
    1524:	e7a4      	b.n	1470 <__sfvwrite_r+0x17c>
    1526:	003a      	movs	r2, r7
    1528:	210a      	movs	r1, #10
    152a:	4648      	mov	r0, r9
    152c:	f000 f8b8 	bl	16a0 <memchr>
    1530:	2800      	cmp	r0, #0
    1532:	d059      	beq.n	15e8 <__sfvwrite_r+0x2f4>
    1534:	464b      	mov	r3, r9
    1536:	3001      	adds	r0, #1
    1538:	1ac5      	subs	r5, r0, r3
    153a:	2301      	movs	r3, #1
    153c:	9302      	str	r3, [sp, #8]
    153e:	e72e      	b.n	139e <__sfvwrite_r+0xaa>
    1540:	6921      	ldr	r1, [r4, #16]
    1542:	6822      	ldr	r2, [r4, #0]
    1544:	1a52      	subs	r2, r2, r1
    1546:	4691      	mov	r9, r2
    1548:	6962      	ldr	r2, [r4, #20]
    154a:	0050      	lsls	r0, r2, #1
    154c:	1882      	adds	r2, r0, r2
    154e:	0fd0      	lsrs	r0, r2, #31
    1550:	1882      	adds	r2, r0, r2
    1552:	1052      	asrs	r2, r2, #1
    1554:	4690      	mov	r8, r2
    1556:	464a      	mov	r2, r9
    1558:	1c50      	adds	r0, r2, #1
    155a:	1980      	adds	r0, r0, r6
    155c:	4642      	mov	r2, r8
    155e:	4540      	cmp	r0, r8
    1560:	d901      	bls.n	1566 <__sfvwrite_r+0x272>
    1562:	4680      	mov	r8, r0
    1564:	0002      	movs	r2, r0
    1566:	055b      	lsls	r3, r3, #21
    1568:	d52d      	bpl.n	15c6 <__sfvwrite_r+0x2d2>
    156a:	0011      	movs	r1, r2
    156c:	9801      	ldr	r0, [sp, #4]
    156e:	f7ff f941 	bl	7f4 <_malloc_r>
    1572:	1e05      	subs	r5, r0, #0
    1574:	d03f      	beq.n	15f6 <__sfvwrite_r+0x302>
    1576:	464a      	mov	r2, r9
    1578:	6921      	ldr	r1, [r4, #16]
    157a:	f000 f8d9 	bl	1730 <memcpy>
    157e:	89a2      	ldrh	r2, [r4, #12]
    1580:	4b22      	ldr	r3, [pc, #136]	; (160c <__sfvwrite_r+0x318>)
    1582:	4013      	ands	r3, r2
    1584:	2280      	movs	r2, #128	; 0x80
    1586:	4313      	orrs	r3, r2
    1588:	81a3      	strh	r3, [r4, #12]
    158a:	4643      	mov	r3, r8
    158c:	0028      	movs	r0, r5
    158e:	464a      	mov	r2, r9
    1590:	4448      	add	r0, r9
    1592:	6163      	str	r3, [r4, #20]
    1594:	1a9b      	subs	r3, r3, r2
    1596:	6125      	str	r5, [r4, #16]
    1598:	6020      	str	r0, [r4, #0]
    159a:	0035      	movs	r5, r6
    159c:	60a3      	str	r3, [r4, #8]
    159e:	46b0      	mov	r8, r6
    15a0:	e766      	b.n	1470 <__sfvwrite_r+0x17c>
    15a2:	4666      	mov	r6, ip
    15a4:	4649      	mov	r1, r9
    15a6:	f000 f901 	bl	17ac <memmove>
    15aa:	46b4      	mov	ip, r6
    15ac:	6823      	ldr	r3, [r4, #0]
    15ae:	0021      	movs	r1, r4
    15b0:	4463      	add	r3, ip
    15b2:	6023      	str	r3, [r4, #0]
    15b4:	9801      	ldr	r0, [sp, #4]
    15b6:	f000 fda9 	bl	210c <_fflush_r>
    15ba:	2800      	cmp	r0, #0
    15bc:	d000      	beq.n	15c0 <__sfvwrite_r+0x2cc>
    15be:	e73e      	b.n	143e <__sfvwrite_r+0x14a>
    15c0:	9b03      	ldr	r3, [sp, #12]
    15c2:	4698      	mov	r8, r3
    15c4:	e708      	b.n	13d8 <__sfvwrite_r+0xe4>
    15c6:	9801      	ldr	r0, [sp, #4]
    15c8:	f000 f982 	bl	18d0 <_realloc_r>
    15cc:	1e05      	subs	r5, r0, #0
    15ce:	d1dc      	bne.n	158a <__sfvwrite_r+0x296>
    15d0:	9d01      	ldr	r5, [sp, #4]
    15d2:	6921      	ldr	r1, [r4, #16]
    15d4:	0028      	movs	r0, r5
    15d6:	f7ff fdab 	bl	1130 <_free_r>
    15da:	2280      	movs	r2, #128	; 0x80
    15dc:	89a3      	ldrh	r3, [r4, #12]
    15de:	4393      	bics	r3, r2
    15e0:	b21a      	sxth	r2, r3
    15e2:	230c      	movs	r3, #12
    15e4:	602b      	str	r3, [r5, #0]
    15e6:	e72c      	b.n	1442 <__sfvwrite_r+0x14e>
    15e8:	2301      	movs	r3, #1
    15ea:	1c7d      	adds	r5, r7, #1
    15ec:	9302      	str	r3, [sp, #8]
    15ee:	e6d6      	b.n	139e <__sfvwrite_r+0xaa>
    15f0:	2001      	movs	r0, #1
    15f2:	4240      	negs	r0, r0
    15f4:	e6b2      	b.n	135c <__sfvwrite_r+0x68>
    15f6:	230c      	movs	r3, #12
    15f8:	9a01      	ldr	r2, [sp, #4]
    15fa:	6013      	str	r3, [r2, #0]
    15fc:	230c      	movs	r3, #12
    15fe:	5ee2      	ldrsh	r2, [r4, r3]
    1600:	e71f      	b.n	1442 <__sfvwrite_r+0x14e>
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	7ffffc00 	.word	0x7ffffc00
    1608:	7fffffff 	.word	0x7fffffff
    160c:	fffffb7f 	.word	0xfffffb7f

00001610 <_fwalk>:
    1610:	23b8      	movs	r3, #184	; 0xb8
    1612:	b5f0      	push	{r4, r5, r6, r7, lr}
    1614:	4647      	mov	r7, r8
    1616:	009b      	lsls	r3, r3, #2
    1618:	b480      	push	{r7}
    161a:	18c7      	adds	r7, r0, r3
    161c:	4688      	mov	r8, r1
    161e:	2600      	movs	r6, #0
    1620:	2f00      	cmp	r7, #0
    1622:	d013      	beq.n	164c <_fwalk+0x3c>
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	68bc      	ldr	r4, [r7, #8]
    1628:	1e5d      	subs	r5, r3, #1
    162a:	d40c      	bmi.n	1646 <_fwalk+0x36>
    162c:	89a3      	ldrh	r3, [r4, #12]
    162e:	2b01      	cmp	r3, #1
    1630:	d906      	bls.n	1640 <_fwalk+0x30>
    1632:	220e      	movs	r2, #14
    1634:	5ea3      	ldrsh	r3, [r4, r2]
    1636:	3301      	adds	r3, #1
    1638:	d002      	beq.n	1640 <_fwalk+0x30>
    163a:	0020      	movs	r0, r4
    163c:	47c0      	blx	r8
    163e:	4306      	orrs	r6, r0
    1640:	3468      	adds	r4, #104	; 0x68
    1642:	3d01      	subs	r5, #1
    1644:	d2f2      	bcs.n	162c <_fwalk+0x1c>
    1646:	683f      	ldr	r7, [r7, #0]
    1648:	2f00      	cmp	r7, #0
    164a:	d1eb      	bne.n	1624 <_fwalk+0x14>
    164c:	0030      	movs	r0, r6
    164e:	bc04      	pop	{r2}
    1650:	4690      	mov	r8, r2
    1652:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001654 <_fwalk_reent>:
    1654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1656:	464f      	mov	r7, r9
    1658:	4646      	mov	r6, r8
    165a:	b4c0      	push	{r6, r7}
    165c:	27b8      	movs	r7, #184	; 0xb8
    165e:	4680      	mov	r8, r0
    1660:	00bf      	lsls	r7, r7, #2
    1662:	4447      	add	r7, r8
    1664:	4689      	mov	r9, r1
    1666:	2600      	movs	r6, #0
    1668:	2f00      	cmp	r7, #0
    166a:	d014      	beq.n	1696 <_fwalk_reent+0x42>
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	68bc      	ldr	r4, [r7, #8]
    1670:	1e5d      	subs	r5, r3, #1
    1672:	d40d      	bmi.n	1690 <_fwalk_reent+0x3c>
    1674:	89a3      	ldrh	r3, [r4, #12]
    1676:	2b01      	cmp	r3, #1
    1678:	d907      	bls.n	168a <_fwalk_reent+0x36>
    167a:	220e      	movs	r2, #14
    167c:	5ea3      	ldrsh	r3, [r4, r2]
    167e:	3301      	adds	r3, #1
    1680:	d003      	beq.n	168a <_fwalk_reent+0x36>
    1682:	0021      	movs	r1, r4
    1684:	4640      	mov	r0, r8
    1686:	47c8      	blx	r9
    1688:	4306      	orrs	r6, r0
    168a:	3468      	adds	r4, #104	; 0x68
    168c:	3d01      	subs	r5, #1
    168e:	d2f1      	bcs.n	1674 <_fwalk_reent+0x20>
    1690:	683f      	ldr	r7, [r7, #0]
    1692:	2f00      	cmp	r7, #0
    1694:	d1ea      	bne.n	166c <_fwalk_reent+0x18>
    1696:	0030      	movs	r0, r6
    1698:	bc0c      	pop	{r2, r3}
    169a:	4690      	mov	r8, r2
    169c:	4699      	mov	r9, r3
    169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000016a0 <memchr>:
    16a0:	b570      	push	{r4, r5, r6, lr}
    16a2:	b2cd      	uxtb	r5, r1
    16a4:	0783      	lsls	r3, r0, #30
    16a6:	d03c      	beq.n	1722 <memchr+0x82>
    16a8:	1e53      	subs	r3, r2, #1
    16aa:	2a00      	cmp	r2, #0
    16ac:	d01f      	beq.n	16ee <memchr+0x4e>
    16ae:	7802      	ldrb	r2, [r0, #0]
    16b0:	42aa      	cmp	r2, r5
    16b2:	d01d      	beq.n	16f0 <memchr+0x50>
    16b4:	2403      	movs	r4, #3
    16b6:	e005      	b.n	16c4 <memchr+0x24>
    16b8:	2b00      	cmp	r3, #0
    16ba:	d018      	beq.n	16ee <memchr+0x4e>
    16bc:	7802      	ldrb	r2, [r0, #0]
    16be:	3b01      	subs	r3, #1
    16c0:	42aa      	cmp	r2, r5
    16c2:	d015      	beq.n	16f0 <memchr+0x50>
    16c4:	3001      	adds	r0, #1
    16c6:	4220      	tst	r0, r4
    16c8:	d1f6      	bne.n	16b8 <memchr+0x18>
    16ca:	2b03      	cmp	r3, #3
    16cc:	d811      	bhi.n	16f2 <memchr+0x52>
    16ce:	2b00      	cmp	r3, #0
    16d0:	d00d      	beq.n	16ee <memchr+0x4e>
    16d2:	7802      	ldrb	r2, [r0, #0]
    16d4:	42aa      	cmp	r2, r5
    16d6:	d00b      	beq.n	16f0 <memchr+0x50>
    16d8:	1c42      	adds	r2, r0, #1
    16da:	18c0      	adds	r0, r0, r3
    16dc:	e004      	b.n	16e8 <memchr+0x48>
    16de:	3201      	adds	r2, #1
    16e0:	1e51      	subs	r1, r2, #1
    16e2:	7809      	ldrb	r1, [r1, #0]
    16e4:	42a9      	cmp	r1, r5
    16e6:	d01a      	beq.n	171e <memchr+0x7e>
    16e8:	0013      	movs	r3, r2
    16ea:	4290      	cmp	r0, r2
    16ec:	d1f7      	bne.n	16de <memchr+0x3e>
    16ee:	2000      	movs	r0, #0
    16f0:	bd70      	pop	{r4, r5, r6, pc}
    16f2:	22ff      	movs	r2, #255	; 0xff
    16f4:	020c      	lsls	r4, r1, #8
    16f6:	0212      	lsls	r2, r2, #8
    16f8:	4022      	ands	r2, r4
    16fa:	24ff      	movs	r4, #255	; 0xff
    16fc:	4021      	ands	r1, r4
    16fe:	4311      	orrs	r1, r2
    1700:	040c      	lsls	r4, r1, #16
    1702:	4e09      	ldr	r6, [pc, #36]	; (1728 <memchr+0x88>)
    1704:	430c      	orrs	r4, r1
    1706:	6802      	ldr	r2, [r0, #0]
    1708:	4908      	ldr	r1, [pc, #32]	; (172c <memchr+0x8c>)
    170a:	4062      	eors	r2, r4
    170c:	1851      	adds	r1, r2, r1
    170e:	4391      	bics	r1, r2
    1710:	4231      	tst	r1, r6
    1712:	d1de      	bne.n	16d2 <memchr+0x32>
    1714:	3b04      	subs	r3, #4
    1716:	3004      	adds	r0, #4
    1718:	2b03      	cmp	r3, #3
    171a:	d8f4      	bhi.n	1706 <memchr+0x66>
    171c:	e7d7      	b.n	16ce <memchr+0x2e>
    171e:	0018      	movs	r0, r3
    1720:	e7e6      	b.n	16f0 <memchr+0x50>
    1722:	0013      	movs	r3, r2
    1724:	e7d1      	b.n	16ca <memchr+0x2a>
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	80808080 	.word	0x80808080
    172c:	fefefeff 	.word	0xfefefeff

00001730 <memcpy>:
    1730:	b570      	push	{r4, r5, r6, lr}
    1732:	2a0f      	cmp	r2, #15
    1734:	d932      	bls.n	179c <memcpy+0x6c>
    1736:	000c      	movs	r4, r1
    1738:	4304      	orrs	r4, r0
    173a:	000b      	movs	r3, r1
    173c:	07a4      	lsls	r4, r4, #30
    173e:	d131      	bne.n	17a4 <memcpy+0x74>
    1740:	0015      	movs	r5, r2
    1742:	0004      	movs	r4, r0
    1744:	3d10      	subs	r5, #16
    1746:	092d      	lsrs	r5, r5, #4
    1748:	3501      	adds	r5, #1
    174a:	012d      	lsls	r5, r5, #4
    174c:	1949      	adds	r1, r1, r5
    174e:	681e      	ldr	r6, [r3, #0]
    1750:	6026      	str	r6, [r4, #0]
    1752:	685e      	ldr	r6, [r3, #4]
    1754:	6066      	str	r6, [r4, #4]
    1756:	689e      	ldr	r6, [r3, #8]
    1758:	60a6      	str	r6, [r4, #8]
    175a:	68de      	ldr	r6, [r3, #12]
    175c:	3310      	adds	r3, #16
    175e:	60e6      	str	r6, [r4, #12]
    1760:	3410      	adds	r4, #16
    1762:	4299      	cmp	r1, r3
    1764:	d1f3      	bne.n	174e <memcpy+0x1e>
    1766:	230f      	movs	r3, #15
    1768:	1945      	adds	r5, r0, r5
    176a:	4013      	ands	r3, r2
    176c:	2b03      	cmp	r3, #3
    176e:	d91b      	bls.n	17a8 <memcpy+0x78>
    1770:	1f1c      	subs	r4, r3, #4
    1772:	2300      	movs	r3, #0
    1774:	08a4      	lsrs	r4, r4, #2
    1776:	3401      	adds	r4, #1
    1778:	00a4      	lsls	r4, r4, #2
    177a:	58ce      	ldr	r6, [r1, r3]
    177c:	50ee      	str	r6, [r5, r3]
    177e:	3304      	adds	r3, #4
    1780:	429c      	cmp	r4, r3
    1782:	d1fa      	bne.n	177a <memcpy+0x4a>
    1784:	2303      	movs	r3, #3
    1786:	192d      	adds	r5, r5, r4
    1788:	1909      	adds	r1, r1, r4
    178a:	401a      	ands	r2, r3
    178c:	d005      	beq.n	179a <memcpy+0x6a>
    178e:	2300      	movs	r3, #0
    1790:	5ccc      	ldrb	r4, [r1, r3]
    1792:	54ec      	strb	r4, [r5, r3]
    1794:	3301      	adds	r3, #1
    1796:	429a      	cmp	r2, r3
    1798:	d1fa      	bne.n	1790 <memcpy+0x60>
    179a:	bd70      	pop	{r4, r5, r6, pc}
    179c:	0005      	movs	r5, r0
    179e:	2a00      	cmp	r2, #0
    17a0:	d1f5      	bne.n	178e <memcpy+0x5e>
    17a2:	e7fa      	b.n	179a <memcpy+0x6a>
    17a4:	0005      	movs	r5, r0
    17a6:	e7f2      	b.n	178e <memcpy+0x5e>
    17a8:	001a      	movs	r2, r3
    17aa:	e7f8      	b.n	179e <memcpy+0x6e>

000017ac <memmove>:
    17ac:	b570      	push	{r4, r5, r6, lr}
    17ae:	4288      	cmp	r0, r1
    17b0:	d90b      	bls.n	17ca <memmove+0x1e>
    17b2:	188b      	adds	r3, r1, r2
    17b4:	4298      	cmp	r0, r3
    17b6:	d208      	bcs.n	17ca <memmove+0x1e>
    17b8:	1a99      	subs	r1, r3, r2
    17ba:	1e53      	subs	r3, r2, #1
    17bc:	2a00      	cmp	r2, #0
    17be:	d003      	beq.n	17c8 <memmove+0x1c>
    17c0:	5cca      	ldrb	r2, [r1, r3]
    17c2:	54c2      	strb	r2, [r0, r3]
    17c4:	3b01      	subs	r3, #1
    17c6:	d2fb      	bcs.n	17c0 <memmove+0x14>
    17c8:	bd70      	pop	{r4, r5, r6, pc}
    17ca:	2a0f      	cmp	r2, #15
    17cc:	d809      	bhi.n	17e2 <memmove+0x36>
    17ce:	0005      	movs	r5, r0
    17d0:	2a00      	cmp	r2, #0
    17d2:	d0f9      	beq.n	17c8 <memmove+0x1c>
    17d4:	2300      	movs	r3, #0
    17d6:	5ccc      	ldrb	r4, [r1, r3]
    17d8:	54ec      	strb	r4, [r5, r3]
    17da:	3301      	adds	r3, #1
    17dc:	429a      	cmp	r2, r3
    17de:	d1fa      	bne.n	17d6 <memmove+0x2a>
    17e0:	e7f2      	b.n	17c8 <memmove+0x1c>
    17e2:	000c      	movs	r4, r1
    17e4:	4304      	orrs	r4, r0
    17e6:	000b      	movs	r3, r1
    17e8:	07a4      	lsls	r4, r4, #30
    17ea:	d126      	bne.n	183a <memmove+0x8e>
    17ec:	0015      	movs	r5, r2
    17ee:	0004      	movs	r4, r0
    17f0:	3d10      	subs	r5, #16
    17f2:	092d      	lsrs	r5, r5, #4
    17f4:	3501      	adds	r5, #1
    17f6:	012d      	lsls	r5, r5, #4
    17f8:	1949      	adds	r1, r1, r5
    17fa:	681e      	ldr	r6, [r3, #0]
    17fc:	6026      	str	r6, [r4, #0]
    17fe:	685e      	ldr	r6, [r3, #4]
    1800:	6066      	str	r6, [r4, #4]
    1802:	689e      	ldr	r6, [r3, #8]
    1804:	60a6      	str	r6, [r4, #8]
    1806:	68de      	ldr	r6, [r3, #12]
    1808:	3310      	adds	r3, #16
    180a:	60e6      	str	r6, [r4, #12]
    180c:	3410      	adds	r4, #16
    180e:	4299      	cmp	r1, r3
    1810:	d1f3      	bne.n	17fa <memmove+0x4e>
    1812:	240f      	movs	r4, #15
    1814:	1945      	adds	r5, r0, r5
    1816:	4014      	ands	r4, r2
    1818:	2c03      	cmp	r4, #3
    181a:	d910      	bls.n	183e <memmove+0x92>
    181c:	2300      	movs	r3, #0
    181e:	3c04      	subs	r4, #4
    1820:	08a4      	lsrs	r4, r4, #2
    1822:	3401      	adds	r4, #1
    1824:	00a4      	lsls	r4, r4, #2
    1826:	58ce      	ldr	r6, [r1, r3]
    1828:	50ee      	str	r6, [r5, r3]
    182a:	3304      	adds	r3, #4
    182c:	429c      	cmp	r4, r3
    182e:	d1fa      	bne.n	1826 <memmove+0x7a>
    1830:	2303      	movs	r3, #3
    1832:	192d      	adds	r5, r5, r4
    1834:	1909      	adds	r1, r1, r4
    1836:	401a      	ands	r2, r3
    1838:	e7ca      	b.n	17d0 <memmove+0x24>
    183a:	0005      	movs	r5, r0
    183c:	e7ca      	b.n	17d4 <memmove+0x28>
    183e:	0022      	movs	r2, r4
    1840:	e7c6      	b.n	17d0 <memmove+0x24>
    1842:	46c0      	nop			; (mov r8, r8)

00001844 <memset>:
    1844:	b570      	push	{r4, r5, r6, lr}
    1846:	0783      	lsls	r3, r0, #30
    1848:	d03f      	beq.n	18ca <memset+0x86>
    184a:	1e54      	subs	r4, r2, #1
    184c:	2a00      	cmp	r2, #0
    184e:	d03b      	beq.n	18c8 <memset+0x84>
    1850:	b2ce      	uxtb	r6, r1
    1852:	0003      	movs	r3, r0
    1854:	2503      	movs	r5, #3
    1856:	e003      	b.n	1860 <memset+0x1c>
    1858:	1e62      	subs	r2, r4, #1
    185a:	2c00      	cmp	r4, #0
    185c:	d034      	beq.n	18c8 <memset+0x84>
    185e:	0014      	movs	r4, r2
    1860:	3301      	adds	r3, #1
    1862:	1e5a      	subs	r2, r3, #1
    1864:	7016      	strb	r6, [r2, #0]
    1866:	422b      	tst	r3, r5
    1868:	d1f6      	bne.n	1858 <memset+0x14>
    186a:	2c03      	cmp	r4, #3
    186c:	d924      	bls.n	18b8 <memset+0x74>
    186e:	25ff      	movs	r5, #255	; 0xff
    1870:	400d      	ands	r5, r1
    1872:	022a      	lsls	r2, r5, #8
    1874:	4315      	orrs	r5, r2
    1876:	042a      	lsls	r2, r5, #16
    1878:	4315      	orrs	r5, r2
    187a:	2c0f      	cmp	r4, #15
    187c:	d911      	bls.n	18a2 <memset+0x5e>
    187e:	0026      	movs	r6, r4
    1880:	3e10      	subs	r6, #16
    1882:	0936      	lsrs	r6, r6, #4
    1884:	3601      	adds	r6, #1
    1886:	0136      	lsls	r6, r6, #4
    1888:	001a      	movs	r2, r3
    188a:	199b      	adds	r3, r3, r6
    188c:	6015      	str	r5, [r2, #0]
    188e:	6055      	str	r5, [r2, #4]
    1890:	6095      	str	r5, [r2, #8]
    1892:	60d5      	str	r5, [r2, #12]
    1894:	3210      	adds	r2, #16
    1896:	4293      	cmp	r3, r2
    1898:	d1f8      	bne.n	188c <memset+0x48>
    189a:	220f      	movs	r2, #15
    189c:	4014      	ands	r4, r2
    189e:	2c03      	cmp	r4, #3
    18a0:	d90a      	bls.n	18b8 <memset+0x74>
    18a2:	1f26      	subs	r6, r4, #4
    18a4:	08b6      	lsrs	r6, r6, #2
    18a6:	3601      	adds	r6, #1
    18a8:	00b6      	lsls	r6, r6, #2
    18aa:	001a      	movs	r2, r3
    18ac:	199b      	adds	r3, r3, r6
    18ae:	c220      	stmia	r2!, {r5}
    18b0:	4293      	cmp	r3, r2
    18b2:	d1fc      	bne.n	18ae <memset+0x6a>
    18b4:	2203      	movs	r2, #3
    18b6:	4014      	ands	r4, r2
    18b8:	2c00      	cmp	r4, #0
    18ba:	d005      	beq.n	18c8 <memset+0x84>
    18bc:	b2c9      	uxtb	r1, r1
    18be:	191c      	adds	r4, r3, r4
    18c0:	7019      	strb	r1, [r3, #0]
    18c2:	3301      	adds	r3, #1
    18c4:	429c      	cmp	r4, r3
    18c6:	d1fb      	bne.n	18c0 <memset+0x7c>
    18c8:	bd70      	pop	{r4, r5, r6, pc}
    18ca:	0014      	movs	r4, r2
    18cc:	0003      	movs	r3, r0
    18ce:	e7cc      	b.n	186a <memset+0x26>

000018d0 <_realloc_r>:
    18d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18d2:	4656      	mov	r6, sl
    18d4:	464d      	mov	r5, r9
    18d6:	4644      	mov	r4, r8
    18d8:	465f      	mov	r7, fp
    18da:	b4f0      	push	{r4, r5, r6, r7}
    18dc:	4680      	mov	r8, r0
    18de:	b085      	sub	sp, #20
    18e0:	1e0e      	subs	r6, r1, #0
    18e2:	4691      	mov	r9, r2
    18e4:	d100      	bne.n	18e8 <_realloc_r+0x18>
    18e6:	e0cb      	b.n	1a80 <_realloc_r+0x1b0>
    18e8:	0037      	movs	r7, r6
    18ea:	3f08      	subs	r7, #8
    18ec:	f7ff fa2c 	bl	d48 <__malloc_lock>
    18f0:	687a      	ldr	r2, [r7, #4]
    18f2:	464d      	mov	r5, r9
    18f4:	2303      	movs	r3, #3
    18f6:	0014      	movs	r4, r2
    18f8:	350b      	adds	r5, #11
    18fa:	46ba      	mov	sl, r7
    18fc:	439c      	bics	r4, r3
    18fe:	2d16      	cmp	r5, #22
    1900:	d84a      	bhi.n	1998 <_realloc_r+0xc8>
    1902:	2310      	movs	r3, #16
    1904:	2510      	movs	r5, #16
    1906:	45a9      	cmp	r9, r5
    1908:	d84a      	bhi.n	19a0 <_realloc_r+0xd0>
    190a:	429c      	cmp	r4, r3
    190c:	da7b      	bge.n	1a06 <_realloc_r+0x136>
    190e:	49d3      	ldr	r1, [pc, #844]	; (1c5c <_realloc_r+0x38c>)
    1910:	1938      	adds	r0, r7, r4
    1912:	6889      	ldr	r1, [r1, #8]
    1914:	9001      	str	r0, [sp, #4]
    1916:	4288      	cmp	r0, r1
    1918:	d100      	bne.n	191c <_realloc_r+0x4c>
    191a:	e0ec      	b.n	1af6 <_realloc_r+0x226>
    191c:	6840      	ldr	r0, [r0, #4]
    191e:	0001      	movs	r1, r0
    1920:	9002      	str	r0, [sp, #8]
    1922:	2001      	movs	r0, #1
    1924:	9003      	str	r0, [sp, #12]
    1926:	0008      	movs	r0, r1
    1928:	2101      	movs	r1, #1
    192a:	4388      	bics	r0, r1
    192c:	9901      	ldr	r1, [sp, #4]
    192e:	4684      	mov	ip, r0
    1930:	468b      	mov	fp, r1
    1932:	44dc      	add	ip, fp
    1934:	4661      	mov	r1, ip
    1936:	2001      	movs	r0, #1
    1938:	6849      	ldr	r1, [r1, #4]
    193a:	4201      	tst	r1, r0
    193c:	d100      	bne.n	1940 <_realloc_r+0x70>
    193e:	e07c      	b.n	1a3a <_realloc_r+0x16a>
    1940:	2101      	movs	r1, #1
    1942:	4211      	tst	r1, r2
    1944:	d031      	beq.n	19aa <_realloc_r+0xda>
    1946:	4649      	mov	r1, r9
    1948:	4640      	mov	r0, r8
    194a:	f7fe ff53 	bl	7f4 <_malloc_r>
    194e:	4681      	mov	r9, r0
    1950:	2800      	cmp	r0, #0
    1952:	d100      	bne.n	1956 <_realloc_r+0x86>
    1954:	e19c      	b.n	1c90 <_realloc_r+0x3c0>
    1956:	2301      	movs	r3, #1
    1958:	0002      	movs	r2, r0
    195a:	6879      	ldr	r1, [r7, #4]
    195c:	3a08      	subs	r2, #8
    195e:	4399      	bics	r1, r3
    1960:	187f      	adds	r7, r7, r1
    1962:	42ba      	cmp	r2, r7
    1964:	d100      	bne.n	1968 <_realloc_r+0x98>
    1966:	e13c      	b.n	1be2 <_realloc_r+0x312>
    1968:	1f22      	subs	r2, r4, #4
    196a:	2a24      	cmp	r2, #36	; 0x24
    196c:	d900      	bls.n	1970 <_realloc_r+0xa0>
    196e:	e129      	b.n	1bc4 <_realloc_r+0x2f4>
    1970:	0003      	movs	r3, r0
    1972:	2a13      	cmp	r2, #19
    1974:	d900      	bls.n	1978 <_realloc_r+0xa8>
    1976:	e10b      	b.n	1b90 <_realloc_r+0x2c0>
    1978:	0032      	movs	r2, r6
    197a:	6811      	ldr	r1, [r2, #0]
    197c:	6019      	str	r1, [r3, #0]
    197e:	6851      	ldr	r1, [r2, #4]
    1980:	6059      	str	r1, [r3, #4]
    1982:	6892      	ldr	r2, [r2, #8]
    1984:	609a      	str	r2, [r3, #8]
    1986:	0031      	movs	r1, r6
    1988:	4640      	mov	r0, r8
    198a:	f7ff fbd1 	bl	1130 <_free_r>
    198e:	4640      	mov	r0, r8
    1990:	f7ff f9dc 	bl	d4c <__malloc_unlock>
    1994:	4648      	mov	r0, r9
    1996:	e049      	b.n	1a2c <_realloc_r+0x15c>
    1998:	3304      	adds	r3, #4
    199a:	439d      	bics	r5, r3
    199c:	1e2b      	subs	r3, r5, #0
    199e:	dab2      	bge.n	1906 <_realloc_r+0x36>
    19a0:	230c      	movs	r3, #12
    19a2:	4642      	mov	r2, r8
    19a4:	2000      	movs	r0, #0
    19a6:	6013      	str	r3, [r2, #0]
    19a8:	e040      	b.n	1a2c <_realloc_r+0x15c>
    19aa:	683a      	ldr	r2, [r7, #0]
    19ac:	1aba      	subs	r2, r7, r2
    19ae:	4693      	mov	fp, r2
    19b0:	4659      	mov	r1, fp
    19b2:	2203      	movs	r2, #3
    19b4:	6849      	ldr	r1, [r1, #4]
    19b6:	4391      	bics	r1, r2
    19b8:	000a      	movs	r2, r1
    19ba:	18a2      	adds	r2, r4, r2
    19bc:	9201      	str	r2, [sp, #4]
    19be:	429a      	cmp	r2, r3
    19c0:	dbc1      	blt.n	1946 <_realloc_r+0x76>
    19c2:	465b      	mov	r3, fp
    19c4:	465a      	mov	r2, fp
    19c6:	465f      	mov	r7, fp
    19c8:	6892      	ldr	r2, [r2, #8]
    19ca:	68db      	ldr	r3, [r3, #12]
    19cc:	3708      	adds	r7, #8
    19ce:	60d3      	str	r3, [r2, #12]
    19d0:	609a      	str	r2, [r3, #8]
    19d2:	1f22      	subs	r2, r4, #4
    19d4:	2a24      	cmp	r2, #36	; 0x24
    19d6:	d900      	bls.n	19da <_realloc_r+0x10a>
    19d8:	e110      	b.n	1bfc <_realloc_r+0x32c>
    19da:	003b      	movs	r3, r7
    19dc:	2a13      	cmp	r2, #19
    19de:	d909      	bls.n	19f4 <_realloc_r+0x124>
    19e0:	465b      	mov	r3, fp
    19e2:	6831      	ldr	r1, [r6, #0]
    19e4:	6099      	str	r1, [r3, #8]
    19e6:	6871      	ldr	r1, [r6, #4]
    19e8:	60d9      	str	r1, [r3, #12]
    19ea:	2a1b      	cmp	r2, #27
    19ec:	d900      	bls.n	19f0 <_realloc_r+0x120>
    19ee:	e121      	b.n	1c34 <_realloc_r+0x364>
    19f0:	3310      	adds	r3, #16
    19f2:	3608      	adds	r6, #8
    19f4:	6832      	ldr	r2, [r6, #0]
    19f6:	46da      	mov	sl, fp
    19f8:	601a      	str	r2, [r3, #0]
    19fa:	6872      	ldr	r2, [r6, #4]
    19fc:	9c01      	ldr	r4, [sp, #4]
    19fe:	605a      	str	r2, [r3, #4]
    1a00:	68b2      	ldr	r2, [r6, #8]
    1a02:	003e      	movs	r6, r7
    1a04:	609a      	str	r2, [r3, #8]
    1a06:	1b63      	subs	r3, r4, r5
    1a08:	2b0f      	cmp	r3, #15
    1a0a:	d824      	bhi.n	1a56 <_realloc_r+0x186>
    1a0c:	4653      	mov	r3, sl
    1a0e:	2101      	movs	r1, #1
    1a10:	4652      	mov	r2, sl
    1a12:	685b      	ldr	r3, [r3, #4]
    1a14:	400b      	ands	r3, r1
    1a16:	4323      	orrs	r3, r4
    1a18:	6053      	str	r3, [r2, #4]
    1a1a:	0022      	movs	r2, r4
    1a1c:	4452      	add	r2, sl
    1a1e:	6853      	ldr	r3, [r2, #4]
    1a20:	4319      	orrs	r1, r3
    1a22:	6051      	str	r1, [r2, #4]
    1a24:	4640      	mov	r0, r8
    1a26:	f7ff f991 	bl	d4c <__malloc_unlock>
    1a2a:	0030      	movs	r0, r6
    1a2c:	b005      	add	sp, #20
    1a2e:	bc3c      	pop	{r2, r3, r4, r5}
    1a30:	4690      	mov	r8, r2
    1a32:	4699      	mov	r9, r3
    1a34:	46a2      	mov	sl, r4
    1a36:	46ab      	mov	fp, r5
    1a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a3a:	2103      	movs	r1, #3
    1a3c:	9802      	ldr	r0, [sp, #8]
    1a3e:	468c      	mov	ip, r1
    1a40:	4388      	bics	r0, r1
    1a42:	1901      	adds	r1, r0, r4
    1a44:	4299      	cmp	r1, r3
    1a46:	db1f      	blt.n	1a88 <_realloc_r+0x1b8>
    1a48:	9a01      	ldr	r2, [sp, #4]
    1a4a:	000c      	movs	r4, r1
    1a4c:	68d3      	ldr	r3, [r2, #12]
    1a4e:	6892      	ldr	r2, [r2, #8]
    1a50:	60d3      	str	r3, [r2, #12]
    1a52:	609a      	str	r2, [r3, #8]
    1a54:	e7d7      	b.n	1a06 <_realloc_r+0x136>
    1a56:	4652      	mov	r2, sl
    1a58:	4650      	mov	r0, sl
    1a5a:	1951      	adds	r1, r2, r5
    1a5c:	2201      	movs	r2, #1
    1a5e:	6840      	ldr	r0, [r0, #4]
    1a60:	4010      	ands	r0, r2
    1a62:	4305      	orrs	r5, r0
    1a64:	4650      	mov	r0, sl
    1a66:	6045      	str	r5, [r0, #4]
    1a68:	0018      	movs	r0, r3
    1a6a:	4310      	orrs	r0, r2
    1a6c:	18cb      	adds	r3, r1, r3
    1a6e:	6048      	str	r0, [r1, #4]
    1a70:	6858      	ldr	r0, [r3, #4]
    1a72:	3108      	adds	r1, #8
    1a74:	4302      	orrs	r2, r0
    1a76:	605a      	str	r2, [r3, #4]
    1a78:	4640      	mov	r0, r8
    1a7a:	f7ff fb59 	bl	1130 <_free_r>
    1a7e:	e7d1      	b.n	1a24 <_realloc_r+0x154>
    1a80:	0011      	movs	r1, r2
    1a82:	f7fe feb7 	bl	7f4 <_malloc_r>
    1a86:	e7d1      	b.n	1a2c <_realloc_r+0x15c>
    1a88:	2001      	movs	r0, #1
    1a8a:	4210      	tst	r0, r2
    1a8c:	d000      	beq.n	1a90 <_realloc_r+0x1c0>
    1a8e:	e75a      	b.n	1946 <_realloc_r+0x76>
    1a90:	4660      	mov	r0, ip
    1a92:	683a      	ldr	r2, [r7, #0]
    1a94:	1aba      	subs	r2, r7, r2
    1a96:	4693      	mov	fp, r2
    1a98:	6852      	ldr	r2, [r2, #4]
    1a9a:	4382      	bics	r2, r0
    1a9c:	1889      	adds	r1, r1, r2
    1a9e:	9102      	str	r1, [sp, #8]
    1aa0:	4299      	cmp	r1, r3
    1aa2:	da00      	bge.n	1aa6 <_realloc_r+0x1d6>
    1aa4:	e789      	b.n	19ba <_realloc_r+0xea>
    1aa6:	9a01      	ldr	r2, [sp, #4]
    1aa8:	465f      	mov	r7, fp
    1aaa:	68d3      	ldr	r3, [r2, #12]
    1aac:	6892      	ldr	r2, [r2, #8]
    1aae:	3708      	adds	r7, #8
    1ab0:	60d3      	str	r3, [r2, #12]
    1ab2:	609a      	str	r2, [r3, #8]
    1ab4:	465b      	mov	r3, fp
    1ab6:	465a      	mov	r2, fp
    1ab8:	68db      	ldr	r3, [r3, #12]
    1aba:	6892      	ldr	r2, [r2, #8]
    1abc:	60d3      	str	r3, [r2, #12]
    1abe:	609a      	str	r2, [r3, #8]
    1ac0:	1f22      	subs	r2, r4, #4
    1ac2:	2a24      	cmp	r2, #36	; 0x24
    1ac4:	d900      	bls.n	1ac8 <_realloc_r+0x1f8>
    1ac6:	e091      	b.n	1bec <_realloc_r+0x31c>
    1ac8:	003b      	movs	r3, r7
    1aca:	2a13      	cmp	r2, #19
    1acc:	d909      	bls.n	1ae2 <_realloc_r+0x212>
    1ace:	465b      	mov	r3, fp
    1ad0:	6831      	ldr	r1, [r6, #0]
    1ad2:	6099      	str	r1, [r3, #8]
    1ad4:	6871      	ldr	r1, [r6, #4]
    1ad6:	60d9      	str	r1, [r3, #12]
    1ad8:	2a1b      	cmp	r2, #27
    1ada:	d900      	bls.n	1ade <_realloc_r+0x20e>
    1adc:	e096      	b.n	1c0c <_realloc_r+0x33c>
    1ade:	3310      	adds	r3, #16
    1ae0:	3608      	adds	r6, #8
    1ae2:	6832      	ldr	r2, [r6, #0]
    1ae4:	9c02      	ldr	r4, [sp, #8]
    1ae6:	601a      	str	r2, [r3, #0]
    1ae8:	6872      	ldr	r2, [r6, #4]
    1aea:	46da      	mov	sl, fp
    1aec:	605a      	str	r2, [r3, #4]
    1aee:	68b2      	ldr	r2, [r6, #8]
    1af0:	003e      	movs	r6, r7
    1af2:	609a      	str	r2, [r3, #8]
    1af4:	e787      	b.n	1a06 <_realloc_r+0x136>
    1af6:	2003      	movs	r0, #3
    1af8:	9901      	ldr	r1, [sp, #4]
    1afa:	4684      	mov	ip, r0
    1afc:	6849      	ldr	r1, [r1, #4]
    1afe:	4381      	bics	r1, r0
    1b00:	0028      	movs	r0, r5
    1b02:	1909      	adds	r1, r1, r4
    1b04:	3010      	adds	r0, #16
    1b06:	9001      	str	r0, [sp, #4]
    1b08:	4281      	cmp	r1, r0
    1b0a:	da4b      	bge.n	1ba4 <_realloc_r+0x2d4>
    1b0c:	07d2      	lsls	r2, r2, #31
    1b0e:	d500      	bpl.n	1b12 <_realloc_r+0x242>
    1b10:	e719      	b.n	1946 <_realloc_r+0x76>
    1b12:	4660      	mov	r0, ip
    1b14:	683a      	ldr	r2, [r7, #0]
    1b16:	1aba      	subs	r2, r7, r2
    1b18:	4693      	mov	fp, r2
    1b1a:	6852      	ldr	r2, [r2, #4]
    1b1c:	4382      	bics	r2, r0
    1b1e:	9801      	ldr	r0, [sp, #4]
    1b20:	1851      	adds	r1, r2, r1
    1b22:	9102      	str	r1, [sp, #8]
    1b24:	4288      	cmp	r0, r1
    1b26:	dd00      	ble.n	1b2a <_realloc_r+0x25a>
    1b28:	e747      	b.n	19ba <_realloc_r+0xea>
    1b2a:	465b      	mov	r3, fp
    1b2c:	465a      	mov	r2, fp
    1b2e:	465f      	mov	r7, fp
    1b30:	6892      	ldr	r2, [r2, #8]
    1b32:	68db      	ldr	r3, [r3, #12]
    1b34:	3708      	adds	r7, #8
    1b36:	60d3      	str	r3, [r2, #12]
    1b38:	609a      	str	r2, [r3, #8]
    1b3a:	1f22      	subs	r2, r4, #4
    1b3c:	2a24      	cmp	r2, #36	; 0x24
    1b3e:	d900      	bls.n	1b42 <_realloc_r+0x272>
    1b40:	e097      	b.n	1c72 <_realloc_r+0x3a2>
    1b42:	003b      	movs	r3, r7
    1b44:	2a13      	cmp	r2, #19
    1b46:	d909      	bls.n	1b5c <_realloc_r+0x28c>
    1b48:	465b      	mov	r3, fp
    1b4a:	6831      	ldr	r1, [r6, #0]
    1b4c:	6099      	str	r1, [r3, #8]
    1b4e:	6871      	ldr	r1, [r6, #4]
    1b50:	60d9      	str	r1, [r3, #12]
    1b52:	2a1b      	cmp	r2, #27
    1b54:	d900      	bls.n	1b58 <_realloc_r+0x288>
    1b56:	e091      	b.n	1c7c <_realloc_r+0x3ac>
    1b58:	3310      	adds	r3, #16
    1b5a:	3608      	adds	r6, #8
    1b5c:	6832      	ldr	r2, [r6, #0]
    1b5e:	601a      	str	r2, [r3, #0]
    1b60:	6872      	ldr	r2, [r6, #4]
    1b62:	605a      	str	r2, [r3, #4]
    1b64:	68b2      	ldr	r2, [r6, #8]
    1b66:	609a      	str	r2, [r3, #8]
    1b68:	465b      	mov	r3, fp
    1b6a:	1959      	adds	r1, r3, r5
    1b6c:	4b3b      	ldr	r3, [pc, #236]	; (1c5c <_realloc_r+0x38c>)
    1b6e:	4640      	mov	r0, r8
    1b70:	6099      	str	r1, [r3, #8]
    1b72:	9b02      	ldr	r3, [sp, #8]
    1b74:	1b5a      	subs	r2, r3, r5
    1b76:	2301      	movs	r3, #1
    1b78:	431a      	orrs	r2, r3
    1b7a:	604a      	str	r2, [r1, #4]
    1b7c:	465a      	mov	r2, fp
    1b7e:	6852      	ldr	r2, [r2, #4]
    1b80:	4013      	ands	r3, r2
    1b82:	431d      	orrs	r5, r3
    1b84:	465b      	mov	r3, fp
    1b86:	605d      	str	r5, [r3, #4]
    1b88:	f7ff f8e0 	bl	d4c <__malloc_unlock>
    1b8c:	0038      	movs	r0, r7
    1b8e:	e74d      	b.n	1a2c <_realloc_r+0x15c>
    1b90:	6831      	ldr	r1, [r6, #0]
    1b92:	6001      	str	r1, [r0, #0]
    1b94:	6871      	ldr	r1, [r6, #4]
    1b96:	6041      	str	r1, [r0, #4]
    1b98:	2a1b      	cmp	r2, #27
    1b9a:	d817      	bhi.n	1bcc <_realloc_r+0x2fc>
    1b9c:	0032      	movs	r2, r6
    1b9e:	3308      	adds	r3, #8
    1ba0:	3208      	adds	r2, #8
    1ba2:	e6ea      	b.n	197a <_realloc_r+0xaa>
    1ba4:	4b2d      	ldr	r3, [pc, #180]	; (1c5c <_realloc_r+0x38c>)
    1ba6:	197a      	adds	r2, r7, r5
    1ba8:	609a      	str	r2, [r3, #8]
    1baa:	2301      	movs	r3, #1
    1bac:	1b49      	subs	r1, r1, r5
    1bae:	4319      	orrs	r1, r3
    1bb0:	6051      	str	r1, [r2, #4]
    1bb2:	687a      	ldr	r2, [r7, #4]
    1bb4:	4640      	mov	r0, r8
    1bb6:	4013      	ands	r3, r2
    1bb8:	431d      	orrs	r5, r3
    1bba:	607d      	str	r5, [r7, #4]
    1bbc:	f7ff f8c6 	bl	d4c <__malloc_unlock>
    1bc0:	0030      	movs	r0, r6
    1bc2:	e733      	b.n	1a2c <_realloc_r+0x15c>
    1bc4:	0031      	movs	r1, r6
    1bc6:	f7ff fdf1 	bl	17ac <memmove>
    1bca:	e6dc      	b.n	1986 <_realloc_r+0xb6>
    1bcc:	68b1      	ldr	r1, [r6, #8]
    1bce:	0003      	movs	r3, r0
    1bd0:	6081      	str	r1, [r0, #8]
    1bd2:	68f1      	ldr	r1, [r6, #12]
    1bd4:	60c1      	str	r1, [r0, #12]
    1bd6:	2a24      	cmp	r2, #36	; 0x24
    1bd8:	d022      	beq.n	1c20 <_realloc_r+0x350>
    1bda:	0032      	movs	r2, r6
    1bdc:	3310      	adds	r3, #16
    1bde:	3210      	adds	r2, #16
    1be0:	e6cb      	b.n	197a <_realloc_r+0xaa>
    1be2:	6853      	ldr	r3, [r2, #4]
    1be4:	2203      	movs	r2, #3
    1be6:	4393      	bics	r3, r2
    1be8:	18e4      	adds	r4, r4, r3
    1bea:	e70c      	b.n	1a06 <_realloc_r+0x136>
    1bec:	0031      	movs	r1, r6
    1bee:	0038      	movs	r0, r7
    1bf0:	f7ff fddc 	bl	17ac <memmove>
    1bf4:	003e      	movs	r6, r7
    1bf6:	9c02      	ldr	r4, [sp, #8]
    1bf8:	46da      	mov	sl, fp
    1bfa:	e704      	b.n	1a06 <_realloc_r+0x136>
    1bfc:	0031      	movs	r1, r6
    1bfe:	0038      	movs	r0, r7
    1c00:	f7ff fdd4 	bl	17ac <memmove>
    1c04:	003e      	movs	r6, r7
    1c06:	9c01      	ldr	r4, [sp, #4]
    1c08:	46da      	mov	sl, fp
    1c0a:	e6fc      	b.n	1a06 <_realloc_r+0x136>
    1c0c:	465b      	mov	r3, fp
    1c0e:	68b1      	ldr	r1, [r6, #8]
    1c10:	6119      	str	r1, [r3, #16]
    1c12:	68f1      	ldr	r1, [r6, #12]
    1c14:	6159      	str	r1, [r3, #20]
    1c16:	2a24      	cmp	r2, #36	; 0x24
    1c18:	d016      	beq.n	1c48 <_realloc_r+0x378>
    1c1a:	3318      	adds	r3, #24
    1c1c:	3610      	adds	r6, #16
    1c1e:	e760      	b.n	1ae2 <_realloc_r+0x212>
    1c20:	6932      	ldr	r2, [r6, #16]
    1c22:	0003      	movs	r3, r0
    1c24:	6102      	str	r2, [r0, #16]
    1c26:	0001      	movs	r1, r0
    1c28:	0032      	movs	r2, r6
    1c2a:	6970      	ldr	r0, [r6, #20]
    1c2c:	3318      	adds	r3, #24
    1c2e:	3218      	adds	r2, #24
    1c30:	6148      	str	r0, [r1, #20]
    1c32:	e6a2      	b.n	197a <_realloc_r+0xaa>
    1c34:	465b      	mov	r3, fp
    1c36:	68b1      	ldr	r1, [r6, #8]
    1c38:	6119      	str	r1, [r3, #16]
    1c3a:	68f1      	ldr	r1, [r6, #12]
    1c3c:	6159      	str	r1, [r3, #20]
    1c3e:	2a24      	cmp	r2, #36	; 0x24
    1c40:	d00e      	beq.n	1c60 <_realloc_r+0x390>
    1c42:	3318      	adds	r3, #24
    1c44:	3610      	adds	r6, #16
    1c46:	e6d5      	b.n	19f4 <_realloc_r+0x124>
    1c48:	465b      	mov	r3, fp
    1c4a:	6932      	ldr	r2, [r6, #16]
    1c4c:	619a      	str	r2, [r3, #24]
    1c4e:	465a      	mov	r2, fp
    1c50:	6971      	ldr	r1, [r6, #20]
    1c52:	3320      	adds	r3, #32
    1c54:	61d1      	str	r1, [r2, #28]
    1c56:	3618      	adds	r6, #24
    1c58:	e743      	b.n	1ae2 <_realloc_r+0x212>
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	10010504 	.word	0x10010504
    1c60:	465b      	mov	r3, fp
    1c62:	6932      	ldr	r2, [r6, #16]
    1c64:	619a      	str	r2, [r3, #24]
    1c66:	465a      	mov	r2, fp
    1c68:	6971      	ldr	r1, [r6, #20]
    1c6a:	3320      	adds	r3, #32
    1c6c:	61d1      	str	r1, [r2, #28]
    1c6e:	3618      	adds	r6, #24
    1c70:	e6c0      	b.n	19f4 <_realloc_r+0x124>
    1c72:	0031      	movs	r1, r6
    1c74:	0038      	movs	r0, r7
    1c76:	f7ff fd99 	bl	17ac <memmove>
    1c7a:	e775      	b.n	1b68 <_realloc_r+0x298>
    1c7c:	465b      	mov	r3, fp
    1c7e:	68b1      	ldr	r1, [r6, #8]
    1c80:	6119      	str	r1, [r3, #16]
    1c82:	68f1      	ldr	r1, [r6, #12]
    1c84:	6159      	str	r1, [r3, #20]
    1c86:	2a24      	cmp	r2, #36	; 0x24
    1c88:	d007      	beq.n	1c9a <_realloc_r+0x3ca>
    1c8a:	3318      	adds	r3, #24
    1c8c:	3610      	adds	r6, #16
    1c8e:	e765      	b.n	1b5c <_realloc_r+0x28c>
    1c90:	4640      	mov	r0, r8
    1c92:	f7ff f85b 	bl	d4c <__malloc_unlock>
    1c96:	2000      	movs	r0, #0
    1c98:	e6c8      	b.n	1a2c <_realloc_r+0x15c>
    1c9a:	465b      	mov	r3, fp
    1c9c:	6932      	ldr	r2, [r6, #16]
    1c9e:	619a      	str	r2, [r3, #24]
    1ca0:	465a      	mov	r2, fp
    1ca2:	6971      	ldr	r1, [r6, #20]
    1ca4:	3320      	adds	r3, #32
    1ca6:	61d1      	str	r1, [r2, #28]
    1ca8:	3618      	adds	r6, #24
    1caa:	e757      	b.n	1b5c <_realloc_r+0x28c>

00001cac <cleanup_glue>:
    1cac:	b570      	push	{r4, r5, r6, lr}
    1cae:	000c      	movs	r4, r1
    1cb0:	6809      	ldr	r1, [r1, #0]
    1cb2:	0005      	movs	r5, r0
    1cb4:	2900      	cmp	r1, #0
    1cb6:	d001      	beq.n	1cbc <cleanup_glue+0x10>
    1cb8:	f7ff fff8 	bl	1cac <cleanup_glue>
    1cbc:	0028      	movs	r0, r5
    1cbe:	0021      	movs	r1, r4
    1cc0:	f7ff fa36 	bl	1130 <_free_r>
    1cc4:	bd70      	pop	{r4, r5, r6, pc}
    1cc6:	46c0      	nop			; (mov r8, r8)

00001cc8 <_reclaim_reent>:
    1cc8:	4b23      	ldr	r3, [pc, #140]	; (1d58 <_reclaim_reent+0x90>)
    1cca:	b570      	push	{r4, r5, r6, lr}
    1ccc:	681b      	ldr	r3, [r3, #0]
    1cce:	0005      	movs	r5, r0
    1cd0:	4283      	cmp	r3, r0
    1cd2:	d034      	beq.n	1d3e <_reclaim_reent+0x76>
    1cd4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d011      	beq.n	1cfe <_reclaim_reent+0x36>
    1cda:	2600      	movs	r6, #0
    1cdc:	5999      	ldr	r1, [r3, r6]
    1cde:	2900      	cmp	r1, #0
    1ce0:	d006      	beq.n	1cf0 <_reclaim_reent+0x28>
    1ce2:	680c      	ldr	r4, [r1, #0]
    1ce4:	0028      	movs	r0, r5
    1ce6:	f7ff fa23 	bl	1130 <_free_r>
    1cea:	1e21      	subs	r1, r4, #0
    1cec:	d1f9      	bne.n	1ce2 <_reclaim_reent+0x1a>
    1cee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1cf0:	3604      	adds	r6, #4
    1cf2:	2e80      	cmp	r6, #128	; 0x80
    1cf4:	d1f2      	bne.n	1cdc <_reclaim_reent+0x14>
    1cf6:	0019      	movs	r1, r3
    1cf8:	0028      	movs	r0, r5
    1cfa:	f7ff fa19 	bl	1130 <_free_r>
    1cfe:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1d00:	2900      	cmp	r1, #0
    1d02:	d002      	beq.n	1d0a <_reclaim_reent+0x42>
    1d04:	0028      	movs	r0, r5
    1d06:	f7ff fa13 	bl	1130 <_free_r>
    1d0a:	23a4      	movs	r3, #164	; 0xa4
    1d0c:	005b      	lsls	r3, r3, #1
    1d0e:	58e9      	ldr	r1, [r5, r3]
    1d10:	2900      	cmp	r1, #0
    1d12:	d00b      	beq.n	1d2c <_reclaim_reent+0x64>
    1d14:	002e      	movs	r6, r5
    1d16:	364d      	adds	r6, #77	; 0x4d
    1d18:	36ff      	adds	r6, #255	; 0xff
    1d1a:	42b1      	cmp	r1, r6
    1d1c:	d006      	beq.n	1d2c <_reclaim_reent+0x64>
    1d1e:	680c      	ldr	r4, [r1, #0]
    1d20:	0028      	movs	r0, r5
    1d22:	f7ff fa05 	bl	1130 <_free_r>
    1d26:	0021      	movs	r1, r4
    1d28:	42a6      	cmp	r6, r4
    1d2a:	d1f8      	bne.n	1d1e <_reclaim_reent+0x56>
    1d2c:	6d69      	ldr	r1, [r5, #84]	; 0x54
    1d2e:	2900      	cmp	r1, #0
    1d30:	d002      	beq.n	1d38 <_reclaim_reent+0x70>
    1d32:	0028      	movs	r0, r5
    1d34:	f7ff f9fc 	bl	1130 <_free_r>
    1d38:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d100      	bne.n	1d40 <_reclaim_reent+0x78>
    1d3e:	bd70      	pop	{r4, r5, r6, pc}
    1d40:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    1d42:	0028      	movs	r0, r5
    1d44:	4798      	blx	r3
    1d46:	23b8      	movs	r3, #184	; 0xb8
    1d48:	009b      	lsls	r3, r3, #2
    1d4a:	58e9      	ldr	r1, [r5, r3]
    1d4c:	2900      	cmp	r1, #0
    1d4e:	d0f6      	beq.n	1d3e <_reclaim_reent+0x76>
    1d50:	0028      	movs	r0, r5
    1d52:	f7ff ffab 	bl	1cac <cleanup_glue>
    1d56:	e7f2      	b.n	1d3e <_reclaim_reent+0x76>
    1d58:	10010d40 	.word	0x10010d40

00001d5c <__sread>:
    1d5c:	b570      	push	{r4, r5, r6, lr}
    1d5e:	000c      	movs	r4, r1
    1d60:	250e      	movs	r5, #14
    1d62:	5f49      	ldrsh	r1, [r1, r5]
    1d64:	f000 fa84 	bl	2270 <_read_r>
    1d68:	2800      	cmp	r0, #0
    1d6a:	db03      	blt.n	1d74 <__sread+0x18>
    1d6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    1d6e:	181b      	adds	r3, r3, r0
    1d70:	6523      	str	r3, [r4, #80]	; 0x50
    1d72:	bd70      	pop	{r4, r5, r6, pc}
    1d74:	89a2      	ldrh	r2, [r4, #12]
    1d76:	4b02      	ldr	r3, [pc, #8]	; (1d80 <__sread+0x24>)
    1d78:	4013      	ands	r3, r2
    1d7a:	81a3      	strh	r3, [r4, #12]
    1d7c:	e7f9      	b.n	1d72 <__sread+0x16>
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	ffffefff 	.word	0xffffefff

00001d84 <__seofread>:
    1d84:	2000      	movs	r0, #0
    1d86:	4770      	bx	lr

00001d88 <__swrite>:
    1d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d8a:	0016      	movs	r6, r2
    1d8c:	001f      	movs	r7, r3
    1d8e:	230c      	movs	r3, #12
    1d90:	5eca      	ldrsh	r2, [r1, r3]
    1d92:	0005      	movs	r5, r0
    1d94:	000c      	movs	r4, r1
    1d96:	05d3      	lsls	r3, r2, #23
    1d98:	d507      	bpl.n	1daa <__swrite+0x22>
    1d9a:	230e      	movs	r3, #14
    1d9c:	5ec9      	ldrsh	r1, [r1, r3]
    1d9e:	2200      	movs	r2, #0
    1da0:	2302      	movs	r3, #2
    1da2:	f000 f9dd 	bl	2160 <_lseek_r>
    1da6:	230c      	movs	r3, #12
    1da8:	5ee2      	ldrsh	r2, [r4, r3]
    1daa:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <__swrite+0x38>)
    1dac:	0028      	movs	r0, r5
    1dae:	4013      	ands	r3, r2
    1db0:	81a3      	strh	r3, [r4, #12]
    1db2:	0032      	movs	r2, r6
    1db4:	230e      	movs	r3, #14
    1db6:	5ee1      	ldrsh	r1, [r4, r3]
    1db8:	003b      	movs	r3, r7
    1dba:	f000 f81f 	bl	1dfc <_write_r>
    1dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dc0:	ffffefff 	.word	0xffffefff

00001dc4 <__sseek>:
    1dc4:	b570      	push	{r4, r5, r6, lr}
    1dc6:	000c      	movs	r4, r1
    1dc8:	250e      	movs	r5, #14
    1dca:	5f49      	ldrsh	r1, [r1, r5]
    1dcc:	f000 f9c8 	bl	2160 <_lseek_r>
    1dd0:	1c43      	adds	r3, r0, #1
    1dd2:	d006      	beq.n	1de2 <__sseek+0x1e>
    1dd4:	2280      	movs	r2, #128	; 0x80
    1dd6:	89a3      	ldrh	r3, [r4, #12]
    1dd8:	0152      	lsls	r2, r2, #5
    1dda:	4313      	orrs	r3, r2
    1ddc:	81a3      	strh	r3, [r4, #12]
    1dde:	6520      	str	r0, [r4, #80]	; 0x50
    1de0:	bd70      	pop	{r4, r5, r6, pc}
    1de2:	89a2      	ldrh	r2, [r4, #12]
    1de4:	4b01      	ldr	r3, [pc, #4]	; (1dec <__sseek+0x28>)
    1de6:	4013      	ands	r3, r2
    1de8:	81a3      	strh	r3, [r4, #12]
    1dea:	e7f9      	b.n	1de0 <__sseek+0x1c>
    1dec:	ffffefff 	.word	0xffffefff

00001df0 <__sclose>:
    1df0:	b510      	push	{r4, lr}
    1df2:	230e      	movs	r3, #14
    1df4:	5ec9      	ldrsh	r1, [r1, r3]
    1df6:	f000 f87f 	bl	1ef8 <_close_r>
    1dfa:	bd10      	pop	{r4, pc}

00001dfc <_write_r>:
    1dfc:	b570      	push	{r4, r5, r6, lr}
    1dfe:	0005      	movs	r5, r0
    1e00:	0008      	movs	r0, r1
    1e02:	0011      	movs	r1, r2
    1e04:	2200      	movs	r2, #0
    1e06:	4c06      	ldr	r4, [pc, #24]	; (1e20 <_write_r+0x24>)
    1e08:	6022      	str	r2, [r4, #0]
    1e0a:	001a      	movs	r2, r3
    1e0c:	f7fe fc40 	bl	690 <_write>
    1e10:	1c43      	adds	r3, r0, #1
    1e12:	d000      	beq.n	1e16 <_write_r+0x1a>
    1e14:	bd70      	pop	{r4, r5, r6, pc}
    1e16:	6823      	ldr	r3, [r4, #0]
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d0fb      	beq.n	1e14 <_write_r+0x18>
    1e1c:	602b      	str	r3, [r5, #0]
    1e1e:	e7f9      	b.n	1e14 <_write_r+0x18>
    1e20:	10010da0 	.word	0x10010da0

00001e24 <__swsetup_r>:
    1e24:	4b33      	ldr	r3, [pc, #204]	; (1ef4 <__swsetup_r+0xd0>)
    1e26:	b570      	push	{r4, r5, r6, lr}
    1e28:	0005      	movs	r5, r0
    1e2a:	6818      	ldr	r0, [r3, #0]
    1e2c:	000c      	movs	r4, r1
    1e2e:	2800      	cmp	r0, #0
    1e30:	d002      	beq.n	1e38 <__swsetup_r+0x14>
    1e32:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1e34:	2b00      	cmp	r3, #0
    1e36:	d03d      	beq.n	1eb4 <__swsetup_r+0x90>
    1e38:	230c      	movs	r3, #12
    1e3a:	5ee0      	ldrsh	r0, [r4, r3]
    1e3c:	b283      	uxth	r3, r0
    1e3e:	071a      	lsls	r2, r3, #28
    1e40:	d50d      	bpl.n	1e5e <__swsetup_r+0x3a>
    1e42:	6921      	ldr	r1, [r4, #16]
    1e44:	2900      	cmp	r1, #0
    1e46:	d016      	beq.n	1e76 <__swsetup_r+0x52>
    1e48:	07da      	lsls	r2, r3, #31
    1e4a:	d522      	bpl.n	1e92 <__swsetup_r+0x6e>
    1e4c:	2300      	movs	r3, #0
    1e4e:	60a3      	str	r3, [r4, #8]
    1e50:	6963      	ldr	r3, [r4, #20]
    1e52:	2000      	movs	r0, #0
    1e54:	425b      	negs	r3, r3
    1e56:	61a3      	str	r3, [r4, #24]
    1e58:	2900      	cmp	r1, #0
    1e5a:	d022      	beq.n	1ea2 <__swsetup_r+0x7e>
    1e5c:	bd70      	pop	{r4, r5, r6, pc}
    1e5e:	06da      	lsls	r2, r3, #27
    1e60:	d540      	bpl.n	1ee4 <__swsetup_r+0xc0>
    1e62:	075b      	lsls	r3, r3, #29
    1e64:	d429      	bmi.n	1eba <__swsetup_r+0x96>
    1e66:	6921      	ldr	r1, [r4, #16]
    1e68:	2208      	movs	r2, #8
    1e6a:	0003      	movs	r3, r0
    1e6c:	4313      	orrs	r3, r2
    1e6e:	81a3      	strh	r3, [r4, #12]
    1e70:	b29b      	uxth	r3, r3
    1e72:	2900      	cmp	r1, #0
    1e74:	d1e8      	bne.n	1e48 <__swsetup_r+0x24>
    1e76:	22a0      	movs	r2, #160	; 0xa0
    1e78:	2080      	movs	r0, #128	; 0x80
    1e7a:	0092      	lsls	r2, r2, #2
    1e7c:	0080      	lsls	r0, r0, #2
    1e7e:	401a      	ands	r2, r3
    1e80:	4282      	cmp	r2, r0
    1e82:	d0e1      	beq.n	1e48 <__swsetup_r+0x24>
    1e84:	0021      	movs	r1, r4
    1e86:	0028      	movs	r0, r5
    1e88:	f000 f9ae 	bl	21e8 <__smakebuf_r>
    1e8c:	89a3      	ldrh	r3, [r4, #12]
    1e8e:	6921      	ldr	r1, [r4, #16]
    1e90:	e7da      	b.n	1e48 <__swsetup_r+0x24>
    1e92:	2200      	movs	r2, #0
    1e94:	079b      	lsls	r3, r3, #30
    1e96:	d400      	bmi.n	1e9a <__swsetup_r+0x76>
    1e98:	6962      	ldr	r2, [r4, #20]
    1e9a:	60a2      	str	r2, [r4, #8]
    1e9c:	2000      	movs	r0, #0
    1e9e:	2900      	cmp	r1, #0
    1ea0:	d1dc      	bne.n	1e5c <__swsetup_r+0x38>
    1ea2:	220c      	movs	r2, #12
    1ea4:	5ea3      	ldrsh	r3, [r4, r2]
    1ea6:	061a      	lsls	r2, r3, #24
    1ea8:	d5d8      	bpl.n	1e5c <__swsetup_r+0x38>
    1eaa:	2240      	movs	r2, #64	; 0x40
    1eac:	4313      	orrs	r3, r2
    1eae:	81a3      	strh	r3, [r4, #12]
    1eb0:	3801      	subs	r0, #1
    1eb2:	e7d3      	b.n	1e5c <__swsetup_r+0x38>
    1eb4:	f7ff f8c4 	bl	1040 <__sinit>
    1eb8:	e7be      	b.n	1e38 <__swsetup_r+0x14>
    1eba:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1ebc:	2900      	cmp	r1, #0
    1ebe:	d00a      	beq.n	1ed6 <__swsetup_r+0xb2>
    1ec0:	0023      	movs	r3, r4
    1ec2:	3340      	adds	r3, #64	; 0x40
    1ec4:	4299      	cmp	r1, r3
    1ec6:	d004      	beq.n	1ed2 <__swsetup_r+0xae>
    1ec8:	0028      	movs	r0, r5
    1eca:	f7ff f931 	bl	1130 <_free_r>
    1ece:	230c      	movs	r3, #12
    1ed0:	5ee0      	ldrsh	r0, [r4, r3]
    1ed2:	2300      	movs	r3, #0
    1ed4:	6323      	str	r3, [r4, #48]	; 0x30
    1ed6:	2324      	movs	r3, #36	; 0x24
    1ed8:	4398      	bics	r0, r3
    1eda:	2300      	movs	r3, #0
    1edc:	6921      	ldr	r1, [r4, #16]
    1ede:	6063      	str	r3, [r4, #4]
    1ee0:	6021      	str	r1, [r4, #0]
    1ee2:	e7c1      	b.n	1e68 <__swsetup_r+0x44>
    1ee4:	2309      	movs	r3, #9
    1ee6:	602b      	str	r3, [r5, #0]
    1ee8:	2340      	movs	r3, #64	; 0x40
    1eea:	4303      	orrs	r3, r0
    1eec:	2001      	movs	r0, #1
    1eee:	81a3      	strh	r3, [r4, #12]
    1ef0:	4240      	negs	r0, r0
    1ef2:	e7b3      	b.n	1e5c <__swsetup_r+0x38>
    1ef4:	10010d40 	.word	0x10010d40

00001ef8 <_close_r>:
    1ef8:	2300      	movs	r3, #0
    1efa:	b570      	push	{r4, r5, r6, lr}
    1efc:	4c06      	ldr	r4, [pc, #24]	; (1f18 <_close_r+0x20>)
    1efe:	0005      	movs	r5, r0
    1f00:	0008      	movs	r0, r1
    1f02:	6023      	str	r3, [r4, #0]
    1f04:	f7fe fbc1 	bl	68a <_close>
    1f08:	1c43      	adds	r3, r0, #1
    1f0a:	d000      	beq.n	1f0e <_close_r+0x16>
    1f0c:	bd70      	pop	{r4, r5, r6, pc}
    1f0e:	6823      	ldr	r3, [r4, #0]
    1f10:	2b00      	cmp	r3, #0
    1f12:	d0fb      	beq.n	1f0c <_close_r+0x14>
    1f14:	602b      	str	r3, [r5, #0]
    1f16:	e7f9      	b.n	1f0c <_close_r+0x14>
    1f18:	10010da0 	.word	0x10010da0

00001f1c <_fclose_r>:
    1f1c:	b570      	push	{r4, r5, r6, lr}
    1f1e:	0005      	movs	r5, r0
    1f20:	1e0c      	subs	r4, r1, #0
    1f22:	d008      	beq.n	1f36 <_fclose_r+0x1a>
    1f24:	2800      	cmp	r0, #0
    1f26:	d002      	beq.n	1f2e <_fclose_r+0x12>
    1f28:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d031      	beq.n	1f92 <_fclose_r+0x76>
    1f2e:	220c      	movs	r2, #12
    1f30:	5ea3      	ldrsh	r3, [r4, r2]
    1f32:	2b00      	cmp	r3, #0
    1f34:	d101      	bne.n	1f3a <_fclose_r+0x1e>
    1f36:	2000      	movs	r0, #0
    1f38:	bd70      	pop	{r4, r5, r6, pc}
    1f3a:	0021      	movs	r1, r4
    1f3c:	0028      	movs	r0, r5
    1f3e:	f000 f83d 	bl	1fbc <__sflush_r>
    1f42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1f44:	0006      	movs	r6, r0
    1f46:	2b00      	cmp	r3, #0
    1f48:	d004      	beq.n	1f54 <_fclose_r+0x38>
    1f4a:	69e1      	ldr	r1, [r4, #28]
    1f4c:	0028      	movs	r0, r5
    1f4e:	4798      	blx	r3
    1f50:	2800      	cmp	r0, #0
    1f52:	db21      	blt.n	1f98 <_fclose_r+0x7c>
    1f54:	89a3      	ldrh	r3, [r4, #12]
    1f56:	061b      	lsls	r3, r3, #24
    1f58:	d421      	bmi.n	1f9e <_fclose_r+0x82>
    1f5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1f5c:	2900      	cmp	r1, #0
    1f5e:	d008      	beq.n	1f72 <_fclose_r+0x56>
    1f60:	0023      	movs	r3, r4
    1f62:	3340      	adds	r3, #64	; 0x40
    1f64:	4299      	cmp	r1, r3
    1f66:	d002      	beq.n	1f6e <_fclose_r+0x52>
    1f68:	0028      	movs	r0, r5
    1f6a:	f7ff f8e1 	bl	1130 <_free_r>
    1f6e:	2300      	movs	r3, #0
    1f70:	6323      	str	r3, [r4, #48]	; 0x30
    1f72:	6c61      	ldr	r1, [r4, #68]	; 0x44
    1f74:	2900      	cmp	r1, #0
    1f76:	d004      	beq.n	1f82 <_fclose_r+0x66>
    1f78:	0028      	movs	r0, r5
    1f7a:	f7ff f8d9 	bl	1130 <_free_r>
    1f7e:	2300      	movs	r3, #0
    1f80:	6463      	str	r3, [r4, #68]	; 0x44
    1f82:	f7ff f865 	bl	1050 <__sfp_lock_acquire>
    1f86:	2300      	movs	r3, #0
    1f88:	81a3      	strh	r3, [r4, #12]
    1f8a:	f7ff f863 	bl	1054 <__sfp_lock_release>
    1f8e:	0030      	movs	r0, r6
    1f90:	e7d2      	b.n	1f38 <_fclose_r+0x1c>
    1f92:	f7ff f855 	bl	1040 <__sinit>
    1f96:	e7ca      	b.n	1f2e <_fclose_r+0x12>
    1f98:	2601      	movs	r6, #1
    1f9a:	4276      	negs	r6, r6
    1f9c:	e7da      	b.n	1f54 <_fclose_r+0x38>
    1f9e:	6921      	ldr	r1, [r4, #16]
    1fa0:	0028      	movs	r0, r5
    1fa2:	f7ff f8c5 	bl	1130 <_free_r>
    1fa6:	e7d8      	b.n	1f5a <_fclose_r+0x3e>

00001fa8 <fclose>:
    1fa8:	b510      	push	{r4, lr}
    1faa:	4b03      	ldr	r3, [pc, #12]	; (1fb8 <fclose+0x10>)
    1fac:	0001      	movs	r1, r0
    1fae:	6818      	ldr	r0, [r3, #0]
    1fb0:	f7ff ffb4 	bl	1f1c <_fclose_r>
    1fb4:	bd10      	pop	{r4, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	10010d40 	.word	0x10010d40

00001fbc <__sflush_r>:
    1fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fbe:	4647      	mov	r7, r8
    1fc0:	b480      	push	{r7}
    1fc2:	220c      	movs	r2, #12
    1fc4:	5e8b      	ldrsh	r3, [r1, r2]
    1fc6:	4680      	mov	r8, r0
    1fc8:	b29a      	uxth	r2, r3
    1fca:	000c      	movs	r4, r1
    1fcc:	0711      	lsls	r1, r2, #28
    1fce:	d440      	bmi.n	2052 <__sflush_r+0x96>
    1fd0:	2280      	movs	r2, #128	; 0x80
    1fd2:	0112      	lsls	r2, r2, #4
    1fd4:	4313      	orrs	r3, r2
    1fd6:	6862      	ldr	r2, [r4, #4]
    1fd8:	81a3      	strh	r3, [r4, #12]
    1fda:	2a00      	cmp	r2, #0
    1fdc:	dc00      	bgt.n	1fe0 <__sflush_r+0x24>
    1fde:	e070      	b.n	20c2 <__sflush_r+0x106>
    1fe0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1fe2:	2e00      	cmp	r6, #0
    1fe4:	d031      	beq.n	204a <__sflush_r+0x8e>
    1fe6:	4642      	mov	r2, r8
    1fe8:	4641      	mov	r1, r8
    1fea:	6815      	ldr	r5, [r2, #0]
    1fec:	2200      	movs	r2, #0
    1fee:	b29b      	uxth	r3, r3
    1ff0:	600a      	str	r2, [r1, #0]
    1ff2:	04da      	lsls	r2, r3, #19
    1ff4:	d400      	bmi.n	1ff8 <__sflush_r+0x3c>
    1ff6:	e069      	b.n	20cc <__sflush_r+0x110>
    1ff8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    1ffa:	075b      	lsls	r3, r3, #29
    1ffc:	d506      	bpl.n	200c <__sflush_r+0x50>
    1ffe:	6863      	ldr	r3, [r4, #4]
    2000:	1ad2      	subs	r2, r2, r3
    2002:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2004:	2b00      	cmp	r3, #0
    2006:	d001      	beq.n	200c <__sflush_r+0x50>
    2008:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    200a:	1ad2      	subs	r2, r2, r3
    200c:	2300      	movs	r3, #0
    200e:	69e1      	ldr	r1, [r4, #28]
    2010:	4640      	mov	r0, r8
    2012:	47b0      	blx	r6
    2014:	1c43      	adds	r3, r0, #1
    2016:	d03d      	beq.n	2094 <__sflush_r+0xd8>
    2018:	89a2      	ldrh	r2, [r4, #12]
    201a:	4b3a      	ldr	r3, [pc, #232]	; (2104 <__sflush_r+0x148>)
    201c:	4013      	ands	r3, r2
    201e:	2200      	movs	r2, #0
    2020:	6062      	str	r2, [r4, #4]
    2022:	6922      	ldr	r2, [r4, #16]
    2024:	b21b      	sxth	r3, r3
    2026:	81a3      	strh	r3, [r4, #12]
    2028:	6022      	str	r2, [r4, #0]
    202a:	04db      	lsls	r3, r3, #19
    202c:	d447      	bmi.n	20be <__sflush_r+0x102>
    202e:	4643      	mov	r3, r8
    2030:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2032:	601d      	str	r5, [r3, #0]
    2034:	2900      	cmp	r1, #0
    2036:	d008      	beq.n	204a <__sflush_r+0x8e>
    2038:	0023      	movs	r3, r4
    203a:	3340      	adds	r3, #64	; 0x40
    203c:	4299      	cmp	r1, r3
    203e:	d002      	beq.n	2046 <__sflush_r+0x8a>
    2040:	4640      	mov	r0, r8
    2042:	f7ff f875 	bl	1130 <_free_r>
    2046:	2300      	movs	r3, #0
    2048:	6323      	str	r3, [r4, #48]	; 0x30
    204a:	2000      	movs	r0, #0
    204c:	bc04      	pop	{r2}
    204e:	4690      	mov	r8, r2
    2050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2052:	6926      	ldr	r6, [r4, #16]
    2054:	2e00      	cmp	r6, #0
    2056:	d0f8      	beq.n	204a <__sflush_r+0x8e>
    2058:	6823      	ldr	r3, [r4, #0]
    205a:	6026      	str	r6, [r4, #0]
    205c:	1b9d      	subs	r5, r3, r6
    205e:	2300      	movs	r3, #0
    2060:	0792      	lsls	r2, r2, #30
    2062:	d100      	bne.n	2066 <__sflush_r+0xaa>
    2064:	6963      	ldr	r3, [r4, #20]
    2066:	60a3      	str	r3, [r4, #8]
    2068:	2d00      	cmp	r5, #0
    206a:	dc04      	bgt.n	2076 <__sflush_r+0xba>
    206c:	e7ed      	b.n	204a <__sflush_r+0x8e>
    206e:	1836      	adds	r6, r6, r0
    2070:	1a2d      	subs	r5, r5, r0
    2072:	2d00      	cmp	r5, #0
    2074:	dde9      	ble.n	204a <__sflush_r+0x8e>
    2076:	002b      	movs	r3, r5
    2078:	0032      	movs	r2, r6
    207a:	69e1      	ldr	r1, [r4, #28]
    207c:	4640      	mov	r0, r8
    207e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    2080:	47b8      	blx	r7
    2082:	2800      	cmp	r0, #0
    2084:	dcf3      	bgt.n	206e <__sflush_r+0xb2>
    2086:	2340      	movs	r3, #64	; 0x40
    2088:	2001      	movs	r0, #1
    208a:	89a2      	ldrh	r2, [r4, #12]
    208c:	4240      	negs	r0, r0
    208e:	4313      	orrs	r3, r2
    2090:	81a3      	strh	r3, [r4, #12]
    2092:	e7db      	b.n	204c <__sflush_r+0x90>
    2094:	4643      	mov	r3, r8
    2096:	6819      	ldr	r1, [r3, #0]
    2098:	291d      	cmp	r1, #29
    209a:	d8f4      	bhi.n	2086 <__sflush_r+0xca>
    209c:	4b1a      	ldr	r3, [pc, #104]	; (2108 <__sflush_r+0x14c>)
    209e:	2201      	movs	r2, #1
    20a0:	40cb      	lsrs	r3, r1
    20a2:	439a      	bics	r2, r3
    20a4:	d1ef      	bne.n	2086 <__sflush_r+0xca>
    20a6:	89a6      	ldrh	r6, [r4, #12]
    20a8:	4b16      	ldr	r3, [pc, #88]	; (2104 <__sflush_r+0x148>)
    20aa:	6062      	str	r2, [r4, #4]
    20ac:	4033      	ands	r3, r6
    20ae:	6922      	ldr	r2, [r4, #16]
    20b0:	b21b      	sxth	r3, r3
    20b2:	81a3      	strh	r3, [r4, #12]
    20b4:	6022      	str	r2, [r4, #0]
    20b6:	04db      	lsls	r3, r3, #19
    20b8:	d5b9      	bpl.n	202e <__sflush_r+0x72>
    20ba:	2900      	cmp	r1, #0
    20bc:	d1b7      	bne.n	202e <__sflush_r+0x72>
    20be:	6520      	str	r0, [r4, #80]	; 0x50
    20c0:	e7b5      	b.n	202e <__sflush_r+0x72>
    20c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    20c4:	2a00      	cmp	r2, #0
    20c6:	dd00      	ble.n	20ca <__sflush_r+0x10e>
    20c8:	e78a      	b.n	1fe0 <__sflush_r+0x24>
    20ca:	e7be      	b.n	204a <__sflush_r+0x8e>
    20cc:	2200      	movs	r2, #0
    20ce:	2301      	movs	r3, #1
    20d0:	69e1      	ldr	r1, [r4, #28]
    20d2:	4640      	mov	r0, r8
    20d4:	47b0      	blx	r6
    20d6:	0002      	movs	r2, r0
    20d8:	1c43      	adds	r3, r0, #1
    20da:	d002      	beq.n	20e2 <__sflush_r+0x126>
    20dc:	89a3      	ldrh	r3, [r4, #12]
    20de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    20e0:	e78b      	b.n	1ffa <__sflush_r+0x3e>
    20e2:	4643      	mov	r3, r8
    20e4:	681b      	ldr	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d0f8      	beq.n	20dc <__sflush_r+0x120>
    20ea:	2b1d      	cmp	r3, #29
    20ec:	d001      	beq.n	20f2 <__sflush_r+0x136>
    20ee:	2b16      	cmp	r3, #22
    20f0:	d103      	bne.n	20fa <__sflush_r+0x13e>
    20f2:	4643      	mov	r3, r8
    20f4:	2000      	movs	r0, #0
    20f6:	601d      	str	r5, [r3, #0]
    20f8:	e7a8      	b.n	204c <__sflush_r+0x90>
    20fa:	2340      	movs	r3, #64	; 0x40
    20fc:	89a1      	ldrh	r1, [r4, #12]
    20fe:	430b      	orrs	r3, r1
    2100:	81a3      	strh	r3, [r4, #12]
    2102:	e7a3      	b.n	204c <__sflush_r+0x90>
    2104:	fffff7ff 	.word	0xfffff7ff
    2108:	20400001 	.word	0x20400001

0000210c <_fflush_r>:
    210c:	b570      	push	{r4, r5, r6, lr}
    210e:	0004      	movs	r4, r0
    2110:	000d      	movs	r5, r1
    2112:	2800      	cmp	r0, #0
    2114:	d002      	beq.n	211c <_fflush_r+0x10>
    2116:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2118:	2b00      	cmp	r3, #0
    211a:	d009      	beq.n	2130 <_fflush_r+0x24>
    211c:	220c      	movs	r2, #12
    211e:	5eab      	ldrsh	r3, [r5, r2]
    2120:	2000      	movs	r0, #0
    2122:	2b00      	cmp	r3, #0
    2124:	d003      	beq.n	212e <_fflush_r+0x22>
    2126:	0029      	movs	r1, r5
    2128:	0020      	movs	r0, r4
    212a:	f7ff ff47 	bl	1fbc <__sflush_r>
    212e:	bd70      	pop	{r4, r5, r6, pc}
    2130:	f7fe ff86 	bl	1040 <__sinit>
    2134:	e7f2      	b.n	211c <_fflush_r+0x10>
    2136:	46c0      	nop			; (mov r8, r8)

00002138 <fflush>:
    2138:	b510      	push	{r4, lr}
    213a:	1e01      	subs	r1, r0, #0
    213c:	d004      	beq.n	2148 <fflush+0x10>
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <fflush+0x1c>)
    2140:	6818      	ldr	r0, [r3, #0]
    2142:	f7ff ffe3 	bl	210c <_fflush_r>
    2146:	bd10      	pop	{r4, pc}
    2148:	4b03      	ldr	r3, [pc, #12]	; (2158 <fflush+0x20>)
    214a:	4904      	ldr	r1, [pc, #16]	; (215c <fflush+0x24>)
    214c:	6818      	ldr	r0, [r3, #0]
    214e:	f7ff fa81 	bl	1654 <_fwalk_reent>
    2152:	e7f8      	b.n	2146 <fflush+0xe>
    2154:	10010d40 	.word	0x10010d40
    2158:	00002330 	.word	0x00002330
    215c:	0000210d 	.word	0x0000210d

00002160 <_lseek_r>:
    2160:	b570      	push	{r4, r5, r6, lr}
    2162:	0005      	movs	r5, r0
    2164:	0008      	movs	r0, r1
    2166:	0011      	movs	r1, r2
    2168:	2200      	movs	r2, #0
    216a:	4c06      	ldr	r4, [pc, #24]	; (2184 <_lseek_r+0x24>)
    216c:	6022      	str	r2, [r4, #0]
    216e:	001a      	movs	r2, r3
    2170:	f7fe faa5 	bl	6be <_lseek>
    2174:	1c43      	adds	r3, r0, #1
    2176:	d000      	beq.n	217a <_lseek_r+0x1a>
    2178:	bd70      	pop	{r4, r5, r6, pc}
    217a:	6823      	ldr	r3, [r4, #0]
    217c:	2b00      	cmp	r3, #0
    217e:	d0fb      	beq.n	2178 <_lseek_r+0x18>
    2180:	602b      	str	r3, [r5, #0]
    2182:	e7f9      	b.n	2178 <_lseek_r+0x18>
    2184:	10010da0 	.word	0x10010da0

00002188 <__swhatbuf_r>:
    2188:	b570      	push	{r4, r5, r6, lr}
    218a:	000c      	movs	r4, r1
    218c:	001e      	movs	r6, r3
    218e:	230e      	movs	r3, #14
    2190:	5ec9      	ldrsh	r1, [r1, r3]
    2192:	b090      	sub	sp, #64	; 0x40
    2194:	0015      	movs	r5, r2
    2196:	2900      	cmp	r1, #0
    2198:	db15      	blt.n	21c6 <__swhatbuf_r+0x3e>
    219a:	aa01      	add	r2, sp, #4
    219c:	f000 f87c 	bl	2298 <_fstat_r>
    21a0:	2800      	cmp	r0, #0
    21a2:	db10      	blt.n	21c6 <__swhatbuf_r+0x3e>
    21a4:	23f0      	movs	r3, #240	; 0xf0
    21a6:	9a02      	ldr	r2, [sp, #8]
    21a8:	021b      	lsls	r3, r3, #8
    21aa:	4013      	ands	r3, r2
    21ac:	4a0d      	ldr	r2, [pc, #52]	; (21e4 <__swhatbuf_r+0x5c>)
    21ae:	2080      	movs	r0, #128	; 0x80
    21b0:	4694      	mov	ip, r2
    21b2:	4463      	add	r3, ip
    21b4:	425a      	negs	r2, r3
    21b6:	4153      	adcs	r3, r2
    21b8:	6033      	str	r3, [r6, #0]
    21ba:	2380      	movs	r3, #128	; 0x80
    21bc:	00db      	lsls	r3, r3, #3
    21be:	602b      	str	r3, [r5, #0]
    21c0:	0100      	lsls	r0, r0, #4
    21c2:	b010      	add	sp, #64	; 0x40
    21c4:	bd70      	pop	{r4, r5, r6, pc}
    21c6:	2300      	movs	r3, #0
    21c8:	6033      	str	r3, [r6, #0]
    21ca:	89a3      	ldrh	r3, [r4, #12]
    21cc:	061b      	lsls	r3, r3, #24
    21ce:	d503      	bpl.n	21d8 <__swhatbuf_r+0x50>
    21d0:	2340      	movs	r3, #64	; 0x40
    21d2:	2000      	movs	r0, #0
    21d4:	602b      	str	r3, [r5, #0]
    21d6:	e7f4      	b.n	21c2 <__swhatbuf_r+0x3a>
    21d8:	2380      	movs	r3, #128	; 0x80
    21da:	00db      	lsls	r3, r3, #3
    21dc:	602b      	str	r3, [r5, #0]
    21de:	2000      	movs	r0, #0
    21e0:	e7ef      	b.n	21c2 <__swhatbuf_r+0x3a>
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	ffffe000 	.word	0xffffe000

000021e8 <__smakebuf_r>:
    21e8:	b570      	push	{r4, r5, r6, lr}
    21ea:	898b      	ldrh	r3, [r1, #12]
    21ec:	b082      	sub	sp, #8
    21ee:	0005      	movs	r5, r0
    21f0:	000c      	movs	r4, r1
    21f2:	079b      	lsls	r3, r3, #30
    21f4:	d507      	bpl.n	2206 <__smakebuf_r+0x1e>
    21f6:	0023      	movs	r3, r4
    21f8:	3343      	adds	r3, #67	; 0x43
    21fa:	6023      	str	r3, [r4, #0]
    21fc:	6123      	str	r3, [r4, #16]
    21fe:	2301      	movs	r3, #1
    2200:	6163      	str	r3, [r4, #20]
    2202:	b002      	add	sp, #8
    2204:	bd70      	pop	{r4, r5, r6, pc}
    2206:	ab01      	add	r3, sp, #4
    2208:	466a      	mov	r2, sp
    220a:	f7ff ffbd 	bl	2188 <__swhatbuf_r>
    220e:	9900      	ldr	r1, [sp, #0]
    2210:	0006      	movs	r6, r0
    2212:	0028      	movs	r0, r5
    2214:	f7fe faee 	bl	7f4 <_malloc_r>
    2218:	2800      	cmp	r0, #0
    221a:	d01c      	beq.n	2256 <__smakebuf_r+0x6e>
    221c:	2280      	movs	r2, #128	; 0x80
    221e:	4b13      	ldr	r3, [pc, #76]	; (226c <__smakebuf_r+0x84>)
    2220:	63eb      	str	r3, [r5, #60]	; 0x3c
    2222:	89a3      	ldrh	r3, [r4, #12]
    2224:	6020      	str	r0, [r4, #0]
    2226:	4313      	orrs	r3, r2
    2228:	9a00      	ldr	r2, [sp, #0]
    222a:	b21b      	sxth	r3, r3
    222c:	6162      	str	r2, [r4, #20]
    222e:	9a01      	ldr	r2, [sp, #4]
    2230:	81a3      	strh	r3, [r4, #12]
    2232:	6120      	str	r0, [r4, #16]
    2234:	2a00      	cmp	r2, #0
    2236:	d102      	bne.n	223e <__smakebuf_r+0x56>
    2238:	4333      	orrs	r3, r6
    223a:	81a3      	strh	r3, [r4, #12]
    223c:	e7e1      	b.n	2202 <__smakebuf_r+0x1a>
    223e:	230e      	movs	r3, #14
    2240:	5ee1      	ldrsh	r1, [r4, r3]
    2242:	0028      	movs	r0, r5
    2244:	f000 f83c 	bl	22c0 <_isatty_r>
    2248:	2800      	cmp	r0, #0
    224a:	d00c      	beq.n	2266 <__smakebuf_r+0x7e>
    224c:	2201      	movs	r2, #1
    224e:	89a3      	ldrh	r3, [r4, #12]
    2250:	431a      	orrs	r2, r3
    2252:	b213      	sxth	r3, r2
    2254:	e7f0      	b.n	2238 <__smakebuf_r+0x50>
    2256:	220c      	movs	r2, #12
    2258:	5ea3      	ldrsh	r3, [r4, r2]
    225a:	059a      	lsls	r2, r3, #22
    225c:	d4d1      	bmi.n	2202 <__smakebuf_r+0x1a>
    225e:	2202      	movs	r2, #2
    2260:	4313      	orrs	r3, r2
    2262:	81a3      	strh	r3, [r4, #12]
    2264:	e7c7      	b.n	21f6 <__smakebuf_r+0xe>
    2266:	220c      	movs	r2, #12
    2268:	5ea3      	ldrsh	r3, [r4, r2]
    226a:	e7e5      	b.n	2238 <__smakebuf_r+0x50>
    226c:	00000e65 	.word	0x00000e65

00002270 <_read_r>:
    2270:	b570      	push	{r4, r5, r6, lr}
    2272:	0005      	movs	r5, r0
    2274:	0008      	movs	r0, r1
    2276:	0011      	movs	r1, r2
    2278:	2200      	movs	r2, #0
    227a:	4c06      	ldr	r4, [pc, #24]	; (2294 <_read_r+0x24>)
    227c:	6022      	str	r2, [r4, #0]
    227e:	001a      	movs	r2, r3
    2280:	f7fe fa1f 	bl	6c2 <_read>
    2284:	1c43      	adds	r3, r0, #1
    2286:	d000      	beq.n	228a <_read_r+0x1a>
    2288:	bd70      	pop	{r4, r5, r6, pc}
    228a:	6823      	ldr	r3, [r4, #0]
    228c:	2b00      	cmp	r3, #0
    228e:	d0fb      	beq.n	2288 <_read_r+0x18>
    2290:	602b      	str	r3, [r5, #0]
    2292:	e7f9      	b.n	2288 <_read_r+0x18>
    2294:	10010da0 	.word	0x10010da0

00002298 <_fstat_r>:
    2298:	2300      	movs	r3, #0
    229a:	b570      	push	{r4, r5, r6, lr}
    229c:	4c07      	ldr	r4, [pc, #28]	; (22bc <_fstat_r+0x24>)
    229e:	0005      	movs	r5, r0
    22a0:	0008      	movs	r0, r1
    22a2:	0011      	movs	r1, r2
    22a4:	6023      	str	r3, [r4, #0]
    22a6:	f7fe f9eb 	bl	680 <_fstat>
    22aa:	1c43      	adds	r3, r0, #1
    22ac:	d000      	beq.n	22b0 <_fstat_r+0x18>
    22ae:	bd70      	pop	{r4, r5, r6, pc}
    22b0:	6823      	ldr	r3, [r4, #0]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d0fb      	beq.n	22ae <_fstat_r+0x16>
    22b6:	602b      	str	r3, [r5, #0]
    22b8:	e7f9      	b.n	22ae <_fstat_r+0x16>
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	10010da0 	.word	0x10010da0

000022c0 <_isatty_r>:
    22c0:	2300      	movs	r3, #0
    22c2:	b570      	push	{r4, r5, r6, lr}
    22c4:	4c06      	ldr	r4, [pc, #24]	; (22e0 <_isatty_r+0x20>)
    22c6:	0005      	movs	r5, r0
    22c8:	0008      	movs	r0, r1
    22ca:	6023      	str	r3, [r4, #0]
    22cc:	f7fe f9f5 	bl	6ba <_isatty>
    22d0:	1c43      	adds	r3, r0, #1
    22d2:	d000      	beq.n	22d6 <_isatty_r+0x16>
    22d4:	bd70      	pop	{r4, r5, r6, pc}
    22d6:	6823      	ldr	r3, [r4, #0]
    22d8:	2b00      	cmp	r3, #0
    22da:	d0fb      	beq.n	22d4 <_isatty_r+0x14>
    22dc:	602b      	str	r3, [r5, #0]
    22de:	e7f9      	b.n	22d4 <_isatty_r+0x14>
    22e0:	10010da0 	.word	0x10010da0
    22e4:	00004d4c 	.word	0x00004d4c
    22e8:	00008034 	.word	0x00008034
	...
    22f4:	00800000 	.word	0x00800000
    22f8:	00000080 	.word	0x00000080
    22fc:	00004d4c 	.word	0x00004d4c
    2300:	00008034 	.word	0x00008034
	...
    230c:	00800000 	.word	0x00800000
    2310:	00000080 	.word	0x00000080
    2314:	0a0d0a0d 	.word	0x0a0d0a0d
    2318:	61666544 	.word	0x61666544
    231c:	5f746c75 	.word	0x5f746c75
    2320:	646e6148 	.word	0x646e6148
    2324:	0d72656c 	.word	0x0d72656c
    2328:	00000d0a 	.word	0x00000d0a
    232c:	0000000a 	.word	0x0000000a

00002330 <_global_impure_ptr>:
    2330:	10010918                                ....
