   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	GPIO_FUNC,1,1
  20              		.comm	L_LEV,4,4
  21              		.align	1
  22              		.global	Bt_BleCallBack
  23              		.code	16
  24              		.thumb_func
  26              	Bt_BleCallBack:
  27              	.LFB85:
  28              		.file 1 "../src/main.c"
   1:../src/main.c **** /*************************************************************************
   2:../src/main.c **** *
   3:../src/main.c **** * Yichip  
   4:../src/main.c **** *
   5:../src/main.c **** *************************************************************************/
   6:../src/main.c **** 
   7:../src/main.c **** #include <common.h>
   8:../src/main.c **** 
   9:../src/main.c **** #include "bc62xx_uart.h"
  10:../src/main.c **** #include "bc62xx_ble.h" 
  11:../src/main.c **** //#include "bc62xx_wdt.h"
  12:../src/main.c **** #include "gatt_ota.h"
  13:../src/main.c **** #include "portBle.h"
  14:../src/main.c **** 
  15:../src/main.c **** #include "co_com.h"
  16:../src/main.c **** #include "ali_config.h"
  17:../src/main.c **** #include "m_api.h"
  18:../src/main.c **** #include "app_mesh.h"
  19:../src/main.c **** 
  20:../src/main.c **** #include "ProtocolRln.h"
  21:../src/main.c **** 
  22:../src/main.c **** 
  23:../src/main.c **** void Bt_BleCallBack(uint8_t *buf, uint16_t len)
  24:../src/main.c **** {
  29              		.loc 1 24 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 24
  37              		.cfi_offset 0, -24
  38              		.cfi_offset 1, -20
  39              		.cfi_offset 2, -16
  40              		.cfi_offset 3, -12
  41              		.cfi_offset 4, -8
  42              		.cfi_offset 14, -4
  25:../src/main.c **** 	uint16_t att_hdl = (uint16_t)*buf;
  43              		.loc 1 25 0
  44 0002 0378     		ldrb	r3, [r0]
  45 0004 9CB2     		uxth	r4, r3
  46              	.LVL1:
  26:../src/main.c **** 	switch(att_hdl){
  47              		.loc 1 26 0
  48 0006 1D2B     		cmp	r3, #29
  49 0008 19D0     		beq	.L7
  50 000a 09D8     		bhi	.L4
  51 000c 092B     		cmp	r3, #9
  52 000e 0ED0     		beq	.L5
  53 0010 152B     		cmp	r3, #21
  54 0012 21D1     		bne	.L1
  27:../src/main.c **** 		case 0x0009:{
  28:../src/main.c **** 			uint8_t val = (uint16_t)*(buf+2);
  29:../src/main.c **** 			if(val){
  30:../src/main.c **** 				printf("NOTIFY:\r\n");
  31:../src/main.c **** 			}
  32:../src/main.c **** 		}break;
  33:../src/main.c **** 		#if (BLE_MESH)
  34:../src/main.c **** 		case GATT_PROV_START_HANDLE+2:
  35:../src/main.c **** 		case GATT_PROXY_START_HANDLE+2:{
  36:../src/main.c **** 			//m_printf_hex(L_APP, "DATA_IN RECV DATA", buf, len);
  37:../src/main.c **** 			struct mesh_write_req_param para;
  38:../src/main.c **** 			para.con = 0;
  39:../src/main.c **** 			para.handle = att_hdl;
  40:../src/main.c **** 			para.offset = 0;
  41:../src/main.c **** 			para.length = len-2;
  42:../src/main.c **** 			para.value = buf+2;
  43:../src/main.c **** 			mesh_ble_event_set(MESH_BLE_CON_WRITE_REQ,&para);
  44:../src/main.c **** 		}break;
  45:../src/main.c **** 		case GATT_PROV_START_HANDLE+5:
  46:../src/main.c **** 		case GATT_PROXY_START_HANDLE+5:{
  47:../src/main.c **** 			//m_printf_hex(L_APP, "DATA_OUT_CCC RECV DATA", buf, len);
  48:../src/main.c **** 			struct mesh_write_req_param para;
  49:../src/main.c **** 			para.con = 0;
  50:../src/main.c **** 			para.handle = att_hdl;
  51:../src/main.c **** 			para.offset = 0;
  52:../src/main.c **** 			para.length = len-2;
  53:../src/main.c **** 			para.value = buf+2;
  54:../src/main.c **** 			mesh_ble_event_set(MESH_BLE_CON_WRITE_REQ,&para);
  55:../src/main.c **** 			//uint8_t ucT[40];
  56:../src/main.c **** 			///*for test*/mesh_con_notify(GATT_PROV_START_HANDLE+4,ucT, sizeof(ucT));
  57:../src/main.c **** 		}break;
  58:../src/main.c **** 		#endif
  59:../src/main.c **** 		case OTA_WRITE_HANDLE:{
  60:../src/main.c **** 			gatt_ota_data_deal(buf+2, len - 2);
  55              		.loc 1 60 0
  56 0014 0239     		subs	r1, r1, #2
  57              	.LVL2:
  58 0016 C9B2     		uxtb	r1, r1
  59 0018 0230     		adds	r0, r0, #2
  60              	.LVL3:
  61 001a FFF7FEFF 		bl	gatt_ota_data_deal
  62              	.LVL4:
  61:../src/main.c **** 		}break;
  62:../src/main.c **** 		default:{
  63:../src/main.c **** 			
  64:../src/main.c **** 		}break;
  65:../src/main.c **** 	}
  66:../src/main.c **** }
  63              		.loc 1 66 0
  64 001e 1BE0     		b	.L1
  65              	.LVL5:
  66              	.L4:
  26:../src/main.c **** 		case 0x0009:{
  67              		.loc 1 26 0
  68 0020 232B     		cmp	r3, #35
  69 0022 0CD0     		beq	.L7
  70 0024 262B     		cmp	r3, #38
  71 0026 0AD0     		beq	.L7
  72 0028 202B     		cmp	r3, #32
  73 002a 15D1     		bne	.L1
  74 002c 07E0     		b	.L7
  75              	.L5:
  76              	.LVL6:
  77              	.LBB4:
  29:../src/main.c **** 				printf("NOTIFY:\r\n");
  78              		.loc 1 29 0
  79 002e 8378     		ldrb	r3, [r0, #2]
  80 0030 002B     		cmp	r3, #0
  81 0032 11D0     		beq	.L1
  30:../src/main.c **** 			}
  82              		.loc 1 30 0
  83 0034 0948     		ldr	r0, .L24
  84              	.LVL7:
  85 0036 0930     		adds	r0, r0, #9
  86 0038 FFF7FEFF 		bl	puts
  87              	.LVL8:
  88 003c 0CE0     		b	.L1
  89              	.LVL9:
  90              	.L7:
  91              	.LBE4:
  92              	.LBB5:
  49:../src/main.c **** 			para.handle = att_hdl;
  93              		.loc 1 49 0
  94 003e 0022     		movs	r2, #0
  95 0040 01AB     		add	r3, sp, #4
  52:../src/main.c **** 			para.value = buf+2;
  96              		.loc 1 52 0
  97 0042 0239     		subs	r1, r1, #2
  98              	.LVL10:
  53:../src/main.c **** 			mesh_ble_event_set(MESH_BLE_CON_WRITE_REQ,&para);
  99              		.loc 1 53 0
 100 0044 0230     		adds	r0, r0, #2
 101              	.LVL11:
  52:../src/main.c **** 			para.value = buf+2;
 102              		.loc 1 52 0
 103 0046 D980     		strh	r1, [r3, #6]
  49:../src/main.c **** 			para.handle = att_hdl;
 104              		.loc 1 49 0
 105 0048 1A80     		strh	r2, [r3]
  50:../src/main.c **** 			para.offset = 0;
 106              		.loc 1 50 0
 107 004a 5C80     		strh	r4, [r3, #2]
  51:../src/main.c **** 			para.length = len-2;
 108              		.loc 1 51 0
 109 004c 9A80     		strh	r2, [r3, #4]
  54:../src/main.c **** 			//uint8_t ucT[40];
 110              		.loc 1 54 0
 111 004e 1900     		movs	r1, r3
  53:../src/main.c **** 			mesh_ble_event_set(MESH_BLE_CON_WRITE_REQ,&para);
 112              		.loc 1 53 0
 113 0050 0390     		str	r0, [sp, #12]
  54:../src/main.c **** 			//uint8_t ucT[40];
 114              		.loc 1 54 0
 115 0052 0820     		movs	r0, #8
 116              	.LVL12:
 117 0054 FFF7FEFF 		bl	mesh_ble_event_set
 118              	.LVL13:
 119              	.L1:
 120              	.LBE5:
 121              		.loc 1 66 0
 122              		@ sp needed
 123              	.LVL14:
 124 0058 1FBD     		pop	{r0, r1, r2, r3, r4, pc}
 125              	.L25:
 126 005a C046     		.align	2
 127              	.L24:
 128 005c 00000000 		.word	.LANCHOR0
 129              		.cfi_endproc
 130              	.LFE85:
 132              		.align	1
 133              		.global	Event_call_back
 134              		.code	16
 135              		.thumb_func
 137              	Event_call_back:
 138              	.LFB86:
  67:../src/main.c **** 
  68:../src/main.c **** void Event_call_back(uint8_t da)
  69:../src/main.c **** {
 139              		.loc 1 69 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              	.LVL15:
 144 0060 07B5     		push	{r0, r1, r2, lr}
 145              	.LCFI1:
 146              		.cfi_def_cfa_offset 16
 147              		.cfi_offset 0, -16
 148              		.cfi_offset 1, -12
 149              		.cfi_offset 2, -8
 150              		.cfi_offset 14, -4
 151              		.loc 1 69 0
 152 0062 0100     		movs	r1, r0
 153 0064 1448     		ldr	r0, .L33
 154              	.LVL16:
  70:../src/main.c **** 	switch(da){
 155              		.loc 1 70 0
 156 0066 1529     		cmp	r1, #21
 157 0068 13D0     		beq	.L28
 158 006a 6529     		cmp	r1, #101
 159 006c 0DD0     		beq	.L29
 160 006e 1429     		cmp	r1, #20
 161 0070 1ED1     		bne	.L32
 162              	.LBB11:
  71:../src/main.c **** 		case BT_EVT_RESET:
  72:../src/main.c **** 			printf("Ble reset\r\n");
  73:../src/main.c **** 			break;
  74:../src/main.c **** 		case IPC_EVT_LE_CONNECTED:{
  75:../src/main.c **** 			printf("BLE connect\r\n");
 163              		.loc 1 75 0
 164 0072 1D30     		adds	r0, r0, #29
 165 0074 FFF7FEFF 		bl	puts
 166              	.LVL17:
  76:../src/main.c **** 			//close scan & adv
  77:../src/main.c **** 			mesh_connect_do();
 167              		.loc 1 77 0
 168 0078 FFF7FEFF 		bl	mesh_connect_do
 169              	.LVL18:
  78:../src/main.c **** 			#if (BLE_MESH)
  79:../src/main.c **** 			struct mesh_connected_param para;
  80:../src/main.c **** 			para.con = 0;
 170              		.loc 1 80 0
 171 007c 0023     		movs	r3, #0
 172 007e 01A9     		add	r1, sp, #4
  81:../src/main.c **** 			mesh_ble_event_set(MESH_BLE_CON_CONNECTED,&para);
 173              		.loc 1 81 0
 174 0080 0520     		movs	r0, #5
  80:../src/main.c **** 			mesh_ble_event_set(MESH_BLE_CON_CONNECTED,&para);
 175              		.loc 1 80 0
 176 0082 0B80     		strh	r3, [r1]
 177              		.loc 1 81 0
 178 0084 FFF7FEFF 		bl	mesh_ble_event_set
 179              	.LVL19:
 180              	.LBE11:
  82:../src/main.c **** 			#endif
  83:../src/main.c **** 		}break;
 181              		.loc 1 83 0
 182 0088 15E0     		b	.L26
 183              	.L29:
  72:../src/main.c **** 			break;
 184              		.loc 1 72 0
 185 008a 1230     		adds	r0, r0, #18
 186 008c FFF7FEFF 		bl	puts
 187              	.LVL20:
  73:../src/main.c **** 		case IPC_EVT_LE_CONNECTED:{
 188              		.loc 1 73 0
 189 0090 11E0     		b	.L26
 190              	.L28:
 191              	.LVL21:
 192              	.LBB12:
 193              	.LBB13:
 194              	.LBB14:
  84:../src/main.c **** 			
  85:../src/main.c **** 		case IPC_EVT_LE_DISCONNECTED:{
  86:../src/main.c **** 			printf("BLE disconnect\r\n");
 195              		.loc 1 86 0
 196 0092 2A30     		adds	r0, r0, #42
 197 0094 FFF7FEFF 		bl	puts
 198              	.LVL22:
  87:../src/main.c **** 			//restore scan&adv
  88:../src/main.c **** 			mesh_disconnect_do();
 199              		.loc 1 88 0
 200 0098 FFF7FEFF 		bl	mesh_disconnect_do
 201              	.LVL23:
  89:../src/main.c **** 			gatt_ota_stop();
 202              		.loc 1 89 0
 203 009c FFF7FEFF 		bl	gatt_ota_stop
 204              	.LVL24:
  90:../src/main.c **** 			#if (BLE_MESH)	
  91:../src/main.c **** 			struct mesh_disconnected_param para;
  92:../src/main.c **** 			para.con = 0;
 205              		.loc 1 92 0
 206 00a0 0023     		movs	r3, #0
 207 00a2 01A9     		add	r1, sp, #4
  93:../src/main.c **** 			para.reason = 0;
  94:../src/main.c **** 			mesh_ble_event_set(MESH_BLE_CON_DISCONNECTED,&para);
 208              		.loc 1 94 0
 209 00a4 0620     		movs	r0, #6
  92:../src/main.c **** 			para.reason = 0;
 210              		.loc 1 92 0
 211 00a6 0B80     		strh	r3, [r1]
  93:../src/main.c **** 			para.reason = 0;
 212              		.loc 1 93 0
 213 00a8 8B70     		strb	r3, [r1, #2]
 214              		.loc 1 94 0
 215 00aa FFF7FEFF 		bl	mesh_ble_event_set
 216              	.LVL25:
 217 00ae 02E0     		b	.L26
 218              	.LVL26:
 219              	.L32:
 220              	.LBE14:
 221              	.LBE13:
 222              	.LBE12:
  95:../src/main.c **** 			#endif
  96:../src/main.c **** 		}break;
  97:../src/main.c **** 		default:
  98:../src/main.c **** 			printf("enter event [%d]\r\n", da);
 223              		.loc 1 98 0
 224 00b0 3A30     		adds	r0, r0, #58
 225 00b2 FFF7FEFF 		bl	printf
 226              	.LVL27:
 227              	.L26:
  99:../src/main.c **** 			break;
 100:../src/main.c **** 	}
 101:../src/main.c **** }
 228              		.loc 1 101 0
 229              		@ sp needed
 230 00b6 07BD     		pop	{r0, r1, r2, pc}
 231              	.L34:
 232              		.align	2
 233              	.L33:
 234 00b8 00000000 		.word	.LANCHOR0
 235              		.cfi_endproc
 236              	.LFE86:
 238              		.align	1
 239              		.global	Mesh_Adv_Cb
 240              		.code	16
 241              		.thumb_func
 243              	Mesh_Adv_Cb:
 244              	.LFB87:
 102:../src/main.c **** void Mesh_Adv_Cb(uint8_t* sour, uint16_t len)
 103:../src/main.c **** {
 245              		.loc 1 103 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 8
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              	.LVL28:
 250 00bc 37B5     		push	{r0, r1, r2, r4, r5, lr}
 251              	.LCFI2:
 252              		.cfi_def_cfa_offset 24
 253              		.cfi_offset 0, -24
 254              		.cfi_offset 1, -20
 255              		.cfi_offset 2, -16
 256              		.cfi_offset 4, -12
 257              		.cfi_offset 5, -8
 258              		.cfi_offset 14, -4
 259              		.loc 1 103 0
 260 00be 0400     		movs	r4, r0
 261 00c0 0D00     		movs	r5, r1
 104:../src/main.c **** #ifdef CONFIG_FACTORY_TEST
 105:../src/main.c **** 	//for test
 106:../src/main.c **** 	app_mesh_hal_rx(HAL_TST, &sour[8], len-8);
 107:../src/main.c **** #endif
 108:../src/main.c **** 
 109:../src/main.c **** #if (BLE_MESH)	
 110:../src/main.c **** 	if(OTANONE != gatt_ota_state_get())
 262              		.loc 1 110 0
 263 00c2 FFF7FEFF 		bl	gatt_ota_state_get
 264              	.LVL29:
 265 00c6 0028     		cmp	r0, #0
 266 00c8 0ED1     		bne	.L35
 111:../src/main.c **** 		return;
 112:../src/main.c **** 	if(sour[0] != ADV_NONCONN_IND)
 267              		.loc 1 112 0
 268 00ca 2378     		ldrb	r3, [r4]
 269 00cc 022B     		cmp	r3, #2
 270 00ce 0BD1     		bne	.L35
 113:../src/main.c **** 		return;
 114:../src/main.c **** 	struct mesh_adv_report_param para;
 115:../src/main.c **** 	para.info = sour[0];
 271              		.loc 1 115 0
 272 00d0 6A46     		mov	r2, sp
 273 00d2 1370     		strb	r3, [r2]
 116:../src/main.c **** 	para.rssi = sour[1];
 274              		.loc 1 116 0
 275 00d4 6378     		ldrb	r3, [r4, #1]
 117:../src/main.c **** 	para.length = len-8;
 276              		.loc 1 117 0
 277 00d6 083D     		subs	r5, r5, #8
 118:../src/main.c **** 	para.data = &sour[8];
 278              		.loc 1 118 0
 279 00d8 0834     		adds	r4, r4, #8
 280              	.LVL30:
 119:../src/main.c **** 	mesh_ble_event_set(MESH_BLE_SCAN_RX_CB,&para);
 281              		.loc 1 119 0
 282 00da 6946     		mov	r1, sp
 283 00dc 0330     		adds	r0, r0, #3
 116:../src/main.c **** 	para.length = len-8;
 284              		.loc 1 116 0
 285 00de 5370     		strb	r3, [r2, #1]
 117:../src/main.c **** 	para.data = &sour[8];
 286              		.loc 1 117 0
 287 00e0 5580     		strh	r5, [r2, #2]
 118:../src/main.c **** 	mesh_ble_event_set(MESH_BLE_SCAN_RX_CB,&para);
 288              		.loc 1 118 0
 289 00e2 0194     		str	r4, [sp, #4]
 290              		.loc 1 119 0
 291 00e4 FFF7FEFF 		bl	mesh_ble_event_set
 292              	.LVL31:
 293              	.L35:
 120:../src/main.c **** #endif
 121:../src/main.c **** }
 294              		.loc 1 121 0
 295              		@ sp needed
 296 00e8 37BD     		pop	{r0, r1, r2, r4, r5, pc}
 297              		.cfi_endproc
 298              	.LFE87:
 300              		.align	1
 301              		.global	ble_read_req_cb
 302              		.code	16
 303              		.thumb_func
 305              	ble_read_req_cb:
 306              	.LFB88:
 122:../src/main.c **** 
 123:../src/main.c **** void ble_read_req_cb(uint8_t* buf, uint16_t len)
 124:../src/main.c **** {
 307              		.loc 1 124 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              	.LVL32:
 312 00ea 70B5     		push	{r4, r5, r6, lr}
 313              	.LCFI3:
 314              		.cfi_def_cfa_offset 16
 315              		.cfi_offset 4, -16
 316              		.cfi_offset 5, -12
 317              		.cfi_offset 6, -8
 318              		.cfi_offset 14, -4
 125:../src/main.c **** 	printf("%s:", __FUNCTION__);
 319              		.loc 1 125 0
 320 00ec 064C     		ldr	r4, .L39
 124:../src/main.c **** 	printf("%s:", __FUNCTION__);
 321              		.loc 1 124 0
 322 00ee 0500     		movs	r5, r0
 323              		.loc 1 125 0
 324 00f0 2100     		movs	r1, r4
 325              	.LVL33:
 326 00f2 2000     		movs	r0, r4
 327              	.LVL34:
 328 00f4 4D31     		adds	r1, r1, #77
 329 00f6 5D30     		adds	r0, r0, #93
 330 00f8 FFF7FEFF 		bl	printf
 331              	.LVL35:
 126:../src/main.c **** 	printf("hadler[%x]\r\n", (uint16_t)*buf);
 332              		.loc 1 126 0
 333 00fc 2000     		movs	r0, r4
 334 00fe 2978     		ldrb	r1, [r5]
 335 0100 6130     		adds	r0, r0, #97
 336 0102 FFF7FEFF 		bl	printf
 337              	.LVL36:
 127:../src/main.c **** }
 338              		.loc 1 127 0
 339              		@ sp needed
 340              	.LVL37:
 341 0106 70BD     		pop	{r4, r5, r6, pc}
 342              	.L40:
 343              		.align	2
 344              	.L39:
 345 0108 00000000 		.word	.LANCHOR0
 346              		.cfi_endproc
 347              	.LFE88:
 349              		.align	1
 350              		.global	ble_read_conn_param
 351              		.code	16
 352              		.thumb_func
 354              	ble_read_conn_param:
 355              	.LFB89:
 128:../src/main.c **** 
 129:../src/main.c **** void ble_read_conn_param(uint8_t* buf, uint16_t len)
 130:../src/main.c **** {
 356              		.loc 1 130 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              	.LVL38:
 361 010c F8B5     		push	{r3, r4, r5, r6, r7, lr}
 362              	.LCFI4:
 363              		.cfi_def_cfa_offset 24
 364              		.cfi_offset 3, -24
 365              		.cfi_offset 4, -20
 366              		.cfi_offset 5, -16
 367              		.cfi_offset 6, -12
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 14, -4
 370              		.loc 1 130 0
 371 010e 0600     		movs	r6, r0
 131:../src/main.c **** 	printf("%s:", __FUNCTION__);
 372              		.loc 1 131 0
 373 0110 0B48     		ldr	r0, .L45
 374              	.LVL39:
 130:../src/main.c **** 	printf("%s:", __FUNCTION__);
 375              		.loc 1 130 0
 376 0112 0F00     		movs	r7, r1
 377              		.loc 1 131 0
 378 0114 0100     		movs	r1, r0
 379              	.LVL40:
 380              	.LBB15:
 132:../src/main.c **** 	for(int i = 0; i < len; ++i){
 381              		.loc 1 132 0
 382 0116 3500     		movs	r5, r6
 383              	.LBE15:
 131:../src/main.c **** 	printf("%s:", __FUNCTION__);
 384              		.loc 1 131 0
 385 0118 6E31     		adds	r1, r1, #110
 386 011a 5D30     		adds	r0, r0, #93
 387 011c FFF7FEFF 		bl	printf
 388              	.LVL41:
 389 0120 084C     		ldr	r4, .L45+4
 390              	.LVL42:
 391              	.L42:
 392              	.LBB16:
 393              		.loc 1 132 0 discriminator 1
 394 0122 AB1B     		subs	r3, r5, r6
 395 0124 9F42     		cmp	r7, r3
 396 0126 05DD     		ble	.L44
 133:../src/main.c **** 		printf("%02x ", buf[i]);
 397              		.loc 1 133 0 discriminator 3
 398 0128 2978     		ldrb	r1, [r5]
 399 012a 0748     		ldr	r0, .L45+8
 400 012c FFF7FEFF 		bl	printf
 401              	.LVL43:
 402 0130 0135     		adds	r5, r5, #1
 403              	.LVL44:
 404 0132 F6E7     		b	.L42
 405              	.L44:
 406              	.LBE16:
 134:../src/main.c **** 	}
 135:../src/main.c **** 	printf("\r\n");
 407              		.loc 1 135 0
 408 0134 2000     		movs	r0, r4
 409 0136 0830     		adds	r0, r0, #8
 410 0138 FFF7FEFF 		bl	puts
 411              	.LVL45:
 136:../src/main.c **** }
 412              		.loc 1 136 0
 413              		@ sp needed
 414              	.LVL46:
 415              	.LVL47:
 416 013c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 417              	.L46:
 418 013e C046     		.align	2
 419              	.L45:
 420 0140 00000000 		.word	.LANCHOR0
 421 0144 80000000 		.word	.LANCHOR1
 422 0148 82000000 		.word	.LANCHOR1+2
 423              		.cfi_endproc
 424              	.LFE89:
 426              		.align	1
 427              		.code	16
 428              		.thumb_func
 430              	_rln_cb:
 431              	.LFB90:
 137:../src/main.c **** 
 138:../src/main.c **** static void _rln_cb(const uint8_t* data, uint8_t len)
 139:../src/main.c **** {
 432              		.loc 1 139 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              	.LVL48:
 437 014c 10B5     		push	{r4, lr}
 438              	.LCFI5:
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 4, -8
 441              		.cfi_offset 14, -4
 442              		.loc 1 139 0
 443 014e 0A00     		movs	r2, r1
 140:../src/main.c **** 	app_mesh_hal_rx(HAL_UART, data, len);
 444              		.loc 1 140 0
 445 0150 0100     		movs	r1, r0
 446              	.LVL49:
 447 0152 0120     		movs	r0, #1
 448              	.LVL50:
 449 0154 FFF7FEFF 		bl	app_mesh_hal_rx
 450              	.LVL51:
 141:../src/main.c **** }
 451              		.loc 1 141 0
 452              		@ sp needed
 453 0158 10BD     		pop	{r4, pc}
 454              		.cfi_endproc
 455              	.LFE90:
 457              		.align	1
 458              		.code	16
 459              		.thumb_func
 461              	_send_cb:
 462              	.LFB91:
 142:../src/main.c **** 
 143:../src/main.c **** static void _send_cb(const uint8_t* data, uint8_t len)
 144:../src/main.c **** {
 463              		.loc 1 144 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              	.LVL52:
 468 015a 70B5     		push	{r4, r5, r6, lr}
 469              	.LCFI6:
 470              		.cfi_def_cfa_offset 16
 471              		.cfi_offset 4, -16
 472              		.cfi_offset 5, -12
 473              		.cfi_offset 6, -8
 474              		.cfi_offset 14, -4
 475              		.loc 1 144 0
 476 015c 0500     		movs	r5, r0
 477 015e 0E00     		movs	r6, r1
 478              	.LBB17:
 145:../src/main.c **** 	for(int i = 0; i < len; ++i)
 479              		.loc 1 145 0
 480 0160 0400     		movs	r4, r0
 481              	.LVL53:
 482              	.L49:
 483              		.loc 1 145 0 is_stmt 0 discriminator 1
 484 0162 631B     		subs	r3, r4, r5
 485 0164 9E42     		cmp	r6, r3
 486 0166 05DD     		ble	.L51
 146:../src/main.c **** 		USART_SendData(UARTB, (uint16_t)data[i]);
 487              		.loc 1 146 0 is_stmt 1 discriminator 3
 488 0168 2178     		ldrb	r1, [r4]
 489 016a 0120     		movs	r0, #1
 490 016c FFF7FEFF 		bl	USART_SendData
 491              	.LVL54:
 492 0170 0134     		adds	r4, r4, #1
 493              	.LVL55:
 494 0172 F6E7     		b	.L49
 495              	.L51:
 496              	.LBE17:
 147:../src/main.c **** }
 497              		.loc 1 147 0
 498              		@ sp needed
 499              	.LVL56:
 500              	.LVL57:
 501 0174 70BD     		pop	{r4, r5, r6, pc}
 502              		.cfi_endproc
 503              	.LFE91:
 505              		.section	.text.startup,"ax",%progbits
 506              		.align	1
 507              		.global	main
 508              		.code	16
 509              		.thumb_func
 511              	main:
 512              	.LFB92:
 148:../src/main.c **** #ifdef RELEASE
 149:../src/main.c **** static void _uartb_init(void)
 150:../src/main.c **** {
 151:../src/main.c **** 	/*init gpio*/	
 152:../src/main.c **** 	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
 153:../src/main.c **** 	bc_gpio_init(GPIO_UART_TX, &cfgTx);
 154:../src/main.c **** 	
 155:../src/main.c **** 	GPIO_CFG cfgRx ={FUNC_UARTB_RXD, GFG_PULLUP};
 156:../src/main.c **** 	bc_gpio_init(GPIO_UART_RX, &cfgRx);
 157:../src/main.c **** 
 158:../src/main.c **** 	/*cofig uart parameter*/	
 159:../src/main.c **** 	USART_InitTypeDef Uart = {BAUD9600, DATA_BITS_8b, STOP_BITS_1, PARITY_EVEN,
 160:../src/main.c **** 								MODE_DUPLEX, FLOW_CTRL_NONE, 128, 128};
 161:../src/main.c **** 	USART_Init(UARTB, &Uart);
 162:../src/main.c **** }
 163:../src/main.c **** #endif
 164:../src/main.c **** int main()
 165:../src/main.c **** {
 513              		.loc 1 165 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 56
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517 0000 70B5     		push	{r4, r5, r6, lr}
 518              	.LCFI7:
 519              		.cfi_def_cfa_offset 16
 520              		.cfi_offset 4, -16
 521              		.cfi_offset 5, -12
 522              		.cfi_offset 6, -8
 523              		.cfi_offset 14, -4
 166:../src/main.c **** #ifdef RELEASE
 167:../src/main.c **** 	/*Uart init*/
 168:../src/main.c **** 	_uartb_init();
 169:../src/main.c **** #else
 170:../src/main.c **** 	/*Printf function remap to UARTB*/
 171:../src/main.c **** 	UART_RemapToPrintf(UARTB, GPIO_UART_TX, GPIO_UART_RX);
 524              		.loc 1 171 0
 525 0002 1C22     		movs	r2, #28
 165:../src/main.c **** #ifdef RELEASE
 526              		.loc 1 165 0
 527 0004 90B0     		sub	sp, sp, #64
 528              	.LCFI8:
 529              		.cfi_def_cfa_offset 80
 530              		.loc 1 171 0
 531 0006 1B21     		movs	r1, #27
 532 0008 0120     		movs	r0, #1
 533 000a FFF7FEFF 		bl	UART_RemapToPrintf
 534              	.LVL58:
 172:../src/main.c **** #endif
 173:../src/main.c **** 	M_PRINTF(L_APP,"---Application start version[%s][%s]---\r\n", MESH_VER, MESH_LVER);
 535              		.loc 1 173 0
 536 000e 354D     		ldr	r5, .L64
 537 0010 2B68     		ldr	r3, [r5]
 538 0012 9B04     		lsls	r3, r3, #18
 539 0014 19D5     		bpl	.L53
 540              		.loc 1 173 0 is_stmt 0 discriminator 5
 541 0016 344C     		ldr	r4, .L64+4
 542 0018 344E     		ldr	r6, .L64+8
 543 001a 2300     		movs	r3, r4
 544 001c 2200     		movs	r2, r4
 545 001e 2000     		movs	r0, r4
 546 0020 2733     		adds	r3, r3, #39
 547 0022 1132     		adds	r2, r2, #17
 548 0024 0093     		str	r3, [sp]
 549 0026 3100     		movs	r1, r6
 550 0028 AD23     		movs	r3, #173
 551 002a 1830     		adds	r0, r0, #24
 552 002c FFF7FEFF 		bl	m_print
 553              	.LVL59:
 554 0030 2200     		movs	r2, r4
 555 0032 2100     		movs	r1, r4
 556 0034 2000     		movs	r0, r4
 557 0036 2E31     		adds	r1, r1, #46
 558 0038 2C32     		adds	r2, r2, #44
 559 003a 3430     		adds	r0, r0, #52
 560 003c FFF7FEFF 		bl	m_print
 561              	.LVL60:
 562 0040 2000     		movs	r0, r4
 563 0042 B11D     		adds	r1, r6, #6
 564 0044 5E30     		adds	r0, r0, #94
 565 0046 FFF7FEFF 		bl	m_print
 566              	.LVL61:
 567              	.L53:
 174:../src/main.c **** 
 175:../src/main.c **** 	/*Ali trituple parameter init*/
 176:../src/main.c **** 	bool aliStatus = ali_config_data_init();
 568              		.loc 1 176 0 is_stmt 1
 569 004a FFF7FEFF 		bl	ali_config_data_init
 570              	.LVL62:
 177:../src/main.c **** 	if(!aliStatus){
 571              		.loc 1 177 0
 572 004e 0028     		cmp	r0, #0
 573 0050 19D1     		bne	.L54
 178:../src/main.c **** 		M_PRINTF(L_APP,"ali parameter error!");
 574              		.loc 1 178 0
 575 0052 2B68     		ldr	r3, [r5]
 576 0054 9B04     		lsls	r3, r3, #18
 577 0056 15D5     		bpl	.L55
 578              		.loc 1 178 0 is_stmt 0 discriminator 5
 579 0058 234C     		ldr	r4, .L64+4
 580 005a 244D     		ldr	r5, .L64+8
 581 005c 2300     		movs	r3, r4
 582 005e 2200     		movs	r2, r4
 583 0060 2000     		movs	r0, r4
 584              	.LVL63:
 585 0062 2733     		adds	r3, r3, #39
 586 0064 2900     		movs	r1, r5
 587 0066 1132     		adds	r2, r2, #17
 588 0068 0093     		str	r3, [sp]
 589 006a 1830     		adds	r0, r0, #24
 590 006c B223     		movs	r3, #178
 591 006e FFF7FEFF 		bl	m_print
 592              	.LVL64:
 593 0072 2000     		movs	r0, r4
 594 0074 6130     		adds	r0, r0, #97
 595 0076 FFF7FEFF 		bl	m_print
 596              	.LVL65:
 597 007a 2000     		movs	r0, r4
 598 007c A91D     		adds	r1, r5, #6
 599 007e 5E30     		adds	r0, r0, #94
 600 0080 FFF7FEFF 		bl	m_print
 601              	.LVL66:
 602              	.L55:
 603              	.L63:
 604 0084 FEE7     		b	.L63
 605              	.LVL67:
 606              	.L54:
 179:../src/main.c **** 		while(1);
 180:../src/main.c **** 	}
 181:../src/main.c **** 	/*Set mac addr*/	
 182:../src/main.c **** 	uint8_t bt_addr[6];
 183:../src/main.c **** 	ali_config_mac_read(bt_addr, 0);
 607              		.loc 1 183 0 is_stmt 1
 608 0086 0021     		movs	r1, #0
 609 0088 02A8     		add	r0, sp, #8
 610              	.LVL68:
 611 008a FFF7FEFF 		bl	ali_config_mac_read
 612              	.LVL69:
 184:../src/main.c **** 	mesh_mac_set(true, bt_addr);
 613              		.loc 1 184 0
 614 008e 02A9     		add	r1, sp, #8
 615 0090 0120     		movs	r0, #1
 616 0092 FFF7FEFF 		bl	mesh_mac_set
 617              	.LVL70:
 185:../src/main.c **** 
 186:../src/main.c **** 	/*Set tx power*/
 187:../src/main.c **** 	HWRITE(mem_tx_power,0x02);
 618              		.loc 1 187 0
 619 0096 0222     		movs	r2, #2
 620 0098 154B     		ldr	r3, .L64+12
 188:../src/main.c **** 	
 189:../src/main.c **** 	tIPCControlBlock cb;
 190:../src/main.c **** 	memset(&cb, 0, sizeof(tIPCControlBlock));
 621              		.loc 1 190 0
 622 009a 0021     		movs	r1, #0
 187:../src/main.c **** 	
 623              		.loc 1 187 0
 624 009c 1A70     		strb	r2, [r3]
 625              		.loc 1 190 0
 626 009e 04A8     		add	r0, sp, #16
 627 00a0 2E32     		adds	r2, r2, #46
 628 00a2 FFF7FEFF 		bl	memset
 629              	.LVL71:
 191:../src/main.c **** 	cb.blecb = Bt_BleCallBack;
 630              		.loc 1 191 0
 631 00a6 134B     		ldr	r3, .L64+16
 192:../src/main.c **** 	cb.evtcb = Event_call_back;
 193:../src/main.c **** 	cb.advcb = Mesh_Adv_Cb;
 194:../src/main.c **** 	//cb.readreqcb = ble_read_req_cb;
 195:../src/main.c **** 	cb.readconnparamcb = ble_read_conn_param;
 196:../src/main.c **** 	/*Set ble callback*/
 197:../src/main.c **** 	IPC_Initialize(&cb);	//Register callback function.
 632              		.loc 1 197 0
 633 00a8 04A8     		add	r0, sp, #16
 191:../src/main.c **** 	cb.blecb = Bt_BleCallBack;
 634              		.loc 1 191 0
 635 00aa 0893     		str	r3, [sp, #32]
 192:../src/main.c **** 	cb.evtcb = Event_call_back;
 636              		.loc 1 192 0
 637 00ac 124B     		ldr	r3, .L64+20
 638 00ae 0493     		str	r3, [sp, #16]
 193:../src/main.c **** 	//cb.readreqcb = ble_read_req_cb;
 639              		.loc 1 193 0
 640 00b0 124B     		ldr	r3, .L64+24
 641 00b2 0993     		str	r3, [sp, #36]
 195:../src/main.c **** 	/*Set ble callback*/
 642              		.loc 1 195 0
 643 00b4 124B     		ldr	r3, .L64+28
 644 00b6 0D93     		str	r3, [sp, #52]
 645              		.loc 1 197 0
 646 00b8 FFF7FEFF 		bl	IPC_Initialize
 647              	.LVL72:
 198:../src/main.c **** 
 199:../src/main.c **** #if (BLE_MESH)	
 200:../src/main.c **** 	if(aliStatus){
 201:../src/main.c **** 		/*init mesh*/
 202:../src/main.c **** 		app_mesh_init();
 648              		.loc 1 202 0
 649 00bc FFF7FEFF 		bl	app_mesh_init
 650              	.LVL73:
 203:../src/main.c **** 		/*Start mesh init*/
 204:../src/main.c **** 		app_mesh_start();
 651              		.loc 1 204 0
 652 00c0 FFF7FEFF 		bl	app_mesh_start
 653              	.LVL74:
 205:../src/main.c **** 	}
 206:../src/main.c **** #endif/*BLE_MESH*/
 207:../src/main.c **** 	//WDT_Enable();
 208:../src/main.c **** 	/*Init gatt ota*/
 209:../src/main.c **** 	gatt_ota_init();
 654              		.loc 1 209 0
 655 00c4 FFF7FEFF 		bl	gatt_ota_init
 656              	.LVL75:
 210:../src/main.c **** 	/*Uart protocol init*/
 211:../src/main.c **** 	protocol_init(_rln_cb, _send_cb);
 657              		.loc 1 211 0
 658 00c8 0E49     		ldr	r1, .L64+32
 659 00ca 0F48     		ldr	r0, .L64+36
 660 00cc FFF7FEFF 		bl	protocol_init
 661              	.LVL76:
 662              	.L57:
 212:../src/main.c **** 
 213:../src/main.c **** 	while(1){
 214:../src/main.c **** 		#if (BLE_MESH)
 215:../src/main.c **** 		if(OTANONE == gatt_ota_state_get()){
 663              		.loc 1 215 0
 664 00d0 FFF7FEFF 		bl	gatt_ota_state_get
 665              	.LVL77:
 666 00d4 0028     		cmp	r0, #0
 667 00d6 01D1     		bne	.L56
 216:../src/main.c **** 			/*Do mesh loop*/
 217:../src/main.c **** 			bc_m_mesh_loop();
 668              		.loc 1 217 0
 669 00d8 FFF7FEFF 		bl	bc_m_mesh_loop
 670              	.LVL78:
 671              	.L56:
 218:../src/main.c **** 		}
 219:../src/main.c **** 		#endif/*BLE_MESH*/
 220:../src/main.c **** 		//WDT_Kick();
 221:../src/main.c **** 
 222:../src/main.c **** 		/*ble process*/
 223:../src/main.c **** 		mesh_ble_process();
 672              		.loc 1 223 0
 673 00dc FFF7FEFF 		bl	mesh_ble_process
 674              	.LVL79:
 224:../src/main.c **** #ifdef RELEASE
 225:../src/main.c **** 		if(USART_GetRxCount(UARTB) > 0){
 226:../src/main.c **** 			uint8_t buff[50];
 227:../src/main.c **** 			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
 228:../src/main.c **** 			protocol_recv(buff, len);
 229:../src/main.c **** 		}
 230:../src/main.c **** #endif
 231:../src/main.c **** 	}
 675              		.loc 1 231 0
 676 00e0 F6E7     		b	.L57
 677              	.L65:
 678 00e2 C046     		.align	2
 679              	.L64:
 680 00e4 00000000 		.word	L_LEV
 681 00e8 80000000 		.word	.LANCHOR1
 682 00ec 00000000 		.word	.LANCHOR0
 683 00f0 91420010 		.word	268452497
 684 00f4 00000000 		.word	Bt_BleCallBack
 685 00f8 00000000 		.word	Event_call_back
 686 00fc 00000000 		.word	Mesh_Adv_Cb
 687 0100 00000000 		.word	ble_read_conn_param
 688 0104 00000000 		.word	_send_cb
 689 0108 00000000 		.word	_rln_cb
 690              		.cfi_endproc
 691              	.LFE92:
 693              		.section	.rodata
 694              		.set	.LANCHOR0,. + 0
 695              		.set	.LANCHOR1,. + 128
 698              	lgs:
 699 0000 5B4D4C47 		.ascii	"[MLG]\000"
 699      5D00
 702              	lge:
 703 0006 0D0A00   		.ascii	"\015\012\000"
 704              	.LC0:
 705 0009 4E4F5449 		.ascii	"NOTIFY:\015\000"
 705      46593A0D 
 705      00
 706              	.LC2:
 707 0012 426C6520 		.ascii	"Ble reset\015\000"
 707      72657365 
 707      740D00
 708              	.LC4:
 709 001d 424C4520 		.ascii	"BLE connect\015\000"
 709      636F6E6E 
 709      6563740D 
 709      00
 710              	.LC5:
 711 002a 424C4520 		.ascii	"BLE disconnect\015\000"
 711      64697363 
 711      6F6E6E65 
 711      63740D00 
 712              	.LC6:
 713 003a 656E7465 		.ascii	"enter event [%d]\015\012\000"
 713      72206576 
 713      656E7420 
 713      5B25645D 
 713      0D0A00
 716              	__FUNCTION__.9777:
 717 004d 626C655F 		.ascii	"ble_read_req_cb\000"
 717      72656164 
 717      5F726571 
 717      5F636200 
 718              	.LC12:
 719 005d 25733A00 		.ascii	"%s:\000"
 720              	.LC13:
 721 0061 6861646C 		.ascii	"hadler[%x]\015\012\000"
 721      65725B25 
 721      785D0D0A 
 721      00
 724              	__FUNCTION__.9782:
 725 006e 626C655F 		.ascii	"ble_read_conn_param\000"
 725      72656164 
 725      5F636F6E 
 725      6E5F7061 
 725      72616D00 
 726              	.LC20:
 727 0082 25303278 		.ascii	"%02x \000"
 727      2000
 728              	.LC22:
 729 0088 0D00     		.ascii	"\015\000"
 730              	.LC28:
 731 008a 2E2E2F73 		.ascii	"../src/main.c\000"
 731      72632F6D 
 731      61696E2E 
 731      6300
 732              	.LC31:
 733 0098 25735B25 		.ascii	"%s[%10s:%d]%s:\000"
 733      3130733A 
 733      25645D25 
 733      733A00
 736              	__FUNCTION__.9802:
 737 00a7 6D61696E 		.ascii	"main\000"
 737      00
 738              	.LC32:
 739 00ac 6100     		.ascii	"a\000"
 740              	.LC33:
 741 00ae 312E302E 		.ascii	"1.0.4\000"
 741      3400
 742              	.LC34:
 743 00b4 2D2D2D41 		.ascii	"---Application start version[%s][%s]---\015\012\000"
 743      70706C69 
 743      63617469 
 743      6F6E2073 
 743      74617274 
 744              	.LC35:
 745 00de 257300   		.ascii	"%s\000"
 746              	.LC36:
 747 00e1 616C6920 		.ascii	"ali parameter error!\000"
 747      70617261 
 747      6D657465 
 747      72206572 
 747      726F7221 
 748              		.text
 749              	.Letext0:
 750              		.file 2 "d:\\meshstack\\bc6218\\tools\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\
 751              		.file 3 "d:\\meshstack\\bc6218\\tools\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\
 752              		.file 4 "../../../device/inc/bc62xx.h"
 753              		.file 5 "../../../drivers/hal/inc/bc62xx_gpio.h"
 754              		.file 6 "../../../drivers/hal/inc/bc62xx_uart.h"
 755              		.file 7 "../../../drivers/hal/inc/bc62xx_ble.h"
 756              		.file 8 "../../../mesh/port/portBle.h"
 757              		.file 9 "../../../mesh/app/app_mesh.h"
 758              		.file 10 "../../../mesh/common/api/co_log.h"
 759              		.file 11 "../inc/gatt_ota.h"
 760              		.file 12 "d:\\meshstack\\bc6218\\tools\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi
 761              		.file 13 "../../../mesh/app/ali_config.h"
 762              		.file 14 "../../../drivers/ProtocolResolution/inc/ProtocolRln.h"
 763              		.file 15 "../../../mesh/api/m_api.h"
 764              		.file 16 "<built-in>"
