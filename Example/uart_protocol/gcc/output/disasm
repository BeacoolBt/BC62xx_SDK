
output\a.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	10014000 	.word	0x10014000
       4:	00000b95 	.word	0x00000b95
       8:	00000bdd 	.word	0x00000bdd
       c:	00000bdd 	.word	0x00000bdd
	...
      3c:	00000bdd 	.word	0x00000bdd
      40:	00000bdd 	.word	0x00000bdd
      44:	00000bdd 	.word	0x00000bdd
      48:	00000bdd 	.word	0x00000bdd
      4c:	00000bdd 	.word	0x00000bdd
      50:	00000bdd 	.word	0x00000bdd
      54:	00000bdd 	.word	0x00000bdd
      58:	00000bdd 	.word	0x00000bdd
      5c:	00000bdd 	.word	0x00000bdd
      60:	00000bdd 	.word	0x00000bdd
      64:	00000bdd 	.word	0x00000bdd
      68:	00000bdd 	.word	0x00000bdd
      6c:	00000bdd 	.word	0x00000bdd
      70:	00000bdd 	.word	0x00000bdd
      74:	00000bdd 	.word	0x00000bdd
      78:	00000bdd 	.word	0x00000bdd
      7c:	00000bdd 	.word	0x00000bdd
      80:	00000bdd 	.word	0x00000bdd
      84:	00000bdd 	.word	0x00000bdd
      88:	00000bdd 	.word	0x00000bdd
      8c:	00000bdd 	.word	0x00000bdd
      90:	00000bdd 	.word	0x00000bdd
      94:	00000bdd 	.word	0x00000bdd

00000098 <_rln_cb>:
/*for genie module*/
#define TX_PIN 27
#define RX_PIN 28

static void _rln_cb(const uint8_t* data, uint8_t len)
{
      98:	b510      	push	{r4, lr}
	//if(data == NULL || len == 0)
	//	return;
	/*echo for debug*/
	protocol_send(data,len);
      9a:	f000 fc33 	bl	904 <protocol_send>
}
      9e:	bd10      	pop	{r4, pc}

000000a0 <_send_cb>:

static void _send_cb(const uint8_t* data, uint8_t len)
{
      a0:	b570      	push	{r4, r5, r6, lr}
      a2:	0005      	movs	r5, r0
      a4:	000e      	movs	r6, r1
	for(int i = 0; i < len; ++i)
      a6:	0004      	movs	r4, r0
      a8:	1b63      	subs	r3, r4, r5
      aa:	429e      	cmp	r6, r3
      ac:	dd05      	ble.n	ba <_send_cb+0x1a>
		USART_SendData(UARTB, (uint16_t)data[i]);
      ae:	7821      	ldrb	r1, [r4, #0]
      b0:	2001      	movs	r0, #1
      b2:	f000 f9c5 	bl	440 <USART_SendData>
      b6:	3401      	adds	r4, #1
      b8:	e7f6      	b.n	a8 <_send_cb+0x8>
}
      ba:	bd70      	pop	{r4, r5, r6, pc}

000000bc <main>:

/**TEST DATA
 *3a ff 05 01 02 03 04 05 14
 */
int main()
{
      bc:	b570      	push	{r4, r5, r6, lr}
      be:	b094      	sub	sp, #80	; 0x50
#if 1
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
      c0:	466a      	mov	r2, sp
      c2:	4c1f      	ldr	r4, [pc, #124]	; (140 <main+0x84>)
	bc_gpio_init(TX_PIN, &cfgTx);
      c4:	4669      	mov	r1, sp
 */
int main()
{
#if 1
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
      c6:	7823      	ldrb	r3, [r4, #0]
	bc_gpio_init(TX_PIN, &cfgTx);
      c8:	201b      	movs	r0, #27
 */
int main()
{
#if 1
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
      ca:	7013      	strb	r3, [r2, #0]
	bc_gpio_init(TX_PIN, &cfgTx);
      cc:	f000 f846 	bl	15c <bc_gpio_init>
	
	GPIO_CFG cfgRx ={FUNC_UARTB_RXD, GFG_PULLUP};
      d0:	7863      	ldrb	r3, [r4, #1]
	bc_gpio_init(RX_PIN, &cfgRx);
      d2:	201c      	movs	r0, #28
#if 1
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
	bc_gpio_init(TX_PIN, &cfgTx);
	
	GPIO_CFG cfgRx ={FUNC_UARTB_RXD, GFG_PULLUP};
      d4:	a901      	add	r1, sp, #4
      d6:	700b      	strb	r3, [r1, #0]
	bc_gpio_init(RX_PIN, &cfgRx);
      d8:	f000 f840 	bl	15c <bc_gpio_init>

	/*cofig uart parameter*/	
	USART_InitTypeDef Uart = {BAUD115200, DATA_BITS_8b, STOP_BITS_1, PARITY_EVEN,
      dc:	a902      	add	r1, sp, #8
      de:	000a      	movs	r2, r1
      e0:	1d23      	adds	r3, r4, #4
      e2:	cb31      	ldmia	r3!, {r0, r4, r5}
      e4:	c231      	stmia	r2!, {r0, r4, r5}
      e6:	cb11      	ldmia	r3!, {r0, r4}
      e8:	c211      	stmia	r2!, {r0, r4}
								MODE_DUPLEX, FLOW_CTRL_NONE, 128, 128};
	USART_Init(UARTB, &Uart);
      ea:	2001      	movs	r0, #1
      ec:	f000 f908 	bl	300 <USART_Init>
#else
	UART_RemapToPrintf(UARTB, TX_PIN, RX_PIN);
#endif
	uint8_t buff[50];

	protocol_init(_rln_cb, _send_cb);
      f0:	4914      	ldr	r1, [pc, #80]	; (144 <main+0x88>)
      f2:	4815      	ldr	r0, [pc, #84]	; (148 <main+0x8c>)
      f4:	f000 fbf2 	bl	8dc <protocol_init>
	
	/*main process*/
	while(1){
		if(USART_GetRxCount(UARTB) > 0){
      f8:	2001      	movs	r0, #1
      fa:	f000 fa05 	bl	508 <USART_GetRxCount>
      fe:	2800      	cmp	r0, #0
     100:	d013      	beq.n	12a <main+0x6e>
			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
     102:	ae07      	add	r6, sp, #28
     104:	2200      	movs	r2, #0
     106:	0031      	movs	r1, r6
     108:	2001      	movs	r0, #1
     10a:	f000 fa0f 	bl	52c <USART_ReadDatatoBuff>
			for(int i = 0; i < len; ++i)
     10e:	2500      	movs	r5, #0
	protocol_init(_rln_cb, _send_cb);
	
	/*main process*/
	while(1){
		if(USART_GetRxCount(UARTB) > 0){
			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
     110:	0004      	movs	r4, r0
			for(int i = 0; i < len; ++i)
     112:	42a5      	cmp	r5, r4
     114:	da05      	bge.n	122 <main+0x66>
				USART_SendData(UARTB, buff[i]);
     116:	5d71      	ldrb	r1, [r6, r5]
     118:	2001      	movs	r0, #1
     11a:	f000 f991 	bl	440 <USART_SendData>
	
	/*main process*/
	while(1){
		if(USART_GetRxCount(UARTB) > 0){
			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
			for(int i = 0; i < len; ++i)
     11e:	3501      	adds	r5, #1
     120:	e7f7      	b.n	112 <main+0x56>
				USART_SendData(UARTB, buff[i]);
			protocol_recv(buff, len);
     122:	b2e1      	uxtb	r1, r4
     124:	0030      	movs	r0, r6
     126:	f000 fc1f 	bl	968 <protocol_recv>
	
	/*main process*/
	while(1){
		if(USART_GetRxCount(UARTB) > 0){
			int len = USART_ReadDatatoBuff(UARTB, buff, 0);
			for(int i = 0; i < len; ++i)
     12a:	4b08      	ldr	r3, [pc, #32]	; (14c <main+0x90>)

#define BW(addr)			(int)*(addr) << 24 | (int)*(addr + 1) << 16 | (int)*(addr + 2) << 8 | *(addr + 3)

static inline void hw_delay() 
{
	__asm__ __volatile__("nop");
     12c:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     12e:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     130:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     132:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     134:	46c0      	nop			; (mov r8, r8)
     136:	3b01      	subs	r3, #1
				USART_SendData(UARTB, buff[i]);
			protocol_recv(buff, len);
		}
		for(int i = 0; i < 5000; ++i){
     138:	2b00      	cmp	r3, #0
     13a:	d1f7      	bne.n	12c <main+0x70>
     13c:	e7dc      	b.n	f8 <main+0x3c>
     13e:	46c0      	nop			; (mov r8, r8)
     140:	00002778 	.word	0x00002778
     144:	000000a1 	.word	0x000000a1
     148:	00000099 	.word	0x00000099
     14c:	00001388 	.word	0x00001388

00000150 <hw_delay>:

#define BW(addr)			(int)*(addr) << 24 | (int)*(addr + 1) << 16 | (int)*(addr + 2) << 8 | *(addr + 3)

static inline void hw_delay() 
{
	__asm__ __volatile__("nop");
     150:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     152:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     154:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     156:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     158:	46c0      	nop			; (mov r8, r8)
}
     15a:	4770      	bx	lr

0000015c <bc_gpio_init>:
#define IS_VALID_PIN(PIN)
#endif

void bc_gpio_init(uint8_t pin, GPIO_CFG* t)
{
	ASSERT(t != NULL);
     15c:	2900      	cmp	r1, #0
     15e:	d100      	bne.n	162 <bc_gpio_init+0x6>
     160:	e7fe      	b.n	160 <bc_gpio_init+0x4>
     162:	2301      	movs	r3, #1
     164:	281c      	cmp	r0, #28
     166:	d803      	bhi.n	170 <bc_gpio_init+0x14>
     168:	4a07      	ldr	r2, [pc, #28]	; (188 <bc_gpio_init+0x2c>)
     16a:	2301      	movs	r3, #1
     16c:	40c2      	lsrs	r2, r0
     16e:	4393      	bics	r3, r2
     170:	b2db      	uxtb	r3, r3
	ASSERT(IS_VALID_PIN(pin));
     172:	2b00      	cmp	r3, #0
     174:	d1fd      	bne.n	172 <bc_gpio_init+0x16>
	HWRITE(CORE_GPIO_CONF + pin, *(uint8_t*)t);
     176:	4b05      	ldr	r3, [pc, #20]	; (18c <bc_gpio_init+0x30>)
     178:	18c0      	adds	r0, r0, r3
     17a:	2380      	movs	r3, #128	; 0x80
     17c:	055b      	lsls	r3, r3, #21
     17e:	4318      	orrs	r0, r3
     180:	780b      	ldrb	r3, [r1, #0]
     182:	7003      	strb	r3, [r0, #0]
}
     184:	4770      	bx	lr
     186:	46c0      	nop			; (mov r8, r8)
     188:	1b884040 	.word	0x1b884040
     18c:	00008080 	.word	0x00008080

00000190 <bc_gpio_deinit>:

void bc_gpio_deinit(uint8_t pin, GPIO_CFG* t)
{
	ASSERT(t != NULL);
     190:	2900      	cmp	r1, #0
     192:	d100      	bne.n	196 <bc_gpio_deinit+0x6>
     194:	e7fe      	b.n	194 <bc_gpio_deinit+0x4>
     196:	2301      	movs	r3, #1
     198:	281c      	cmp	r0, #28
     19a:	d803      	bhi.n	1a4 <bc_gpio_deinit+0x14>
     19c:	4a03      	ldr	r2, [pc, #12]	; (1ac <bc_gpio_deinit+0x1c>)
     19e:	2301      	movs	r3, #1
     1a0:	40c2      	lsrs	r2, r0
     1a2:	4393      	bics	r3, r2
     1a4:	b2db      	uxtb	r3, r3
	ASSERT(IS_VALID_PIN(pin));
     1a6:	2b00      	cmp	r3, #0
     1a8:	d1fd      	bne.n	1a6 <bc_gpio_deinit+0x16>
}
     1aa:	4770      	bx	lr
     1ac:	1b884040 	.word	0x1b884040

000001b0 <bc_gpio_set>:

void bc_gpio_set(uint8_t pin, bool val)
{
     1b0:	b570      	push	{r4, r5, r6, lr}
     1b2:	2301      	movs	r3, #1
     1b4:	0004      	movs	r4, r0
     1b6:	000d      	movs	r5, r1
     1b8:	281c      	cmp	r0, #28
     1ba:	d803      	bhi.n	1c4 <bc_gpio_set+0x14>
     1bc:	4a0b      	ldr	r2, [pc, #44]	; (1ec <bc_gpio_set+0x3c>)
     1be:	2301      	movs	r3, #1
     1c0:	40c2      	lsrs	r2, r0
     1c2:	4393      	bics	r3, r2
     1c4:	b2db      	uxtb	r3, r3
	ASSERT(IS_VALID_PIN(pin));
     1c6:	2b00      	cmp	r3, #0
     1c8:	d1fd      	bne.n	1c6 <bc_gpio_set+0x16>
	//GPIO_SetOut(pin, val);
	hw_delay();
     1ca:	f7ff ffc1 	bl	150 <hw_delay>
     1ce:	4b08      	ldr	r3, [pc, #32]	; (1f0 <bc_gpio_set+0x40>)
     1d0:	18e4      	adds	r4, r4, r3
     1d2:	2380      	movs	r3, #128	; 0x80
     1d4:	055b      	lsls	r3, r3, #21
	if (val)
		HWRITE(CORE_GPIO_CONF + pin, GPCFG_OUTPUT_HIGH);
     1d6:	431c      	orrs	r4, r3
void bc_gpio_set(uint8_t pin, bool val)
{
	ASSERT(IS_VALID_PIN(pin));
	//GPIO_SetOut(pin, val);
	hw_delay();
	if (val)
     1d8:	2d00      	cmp	r5, #0
     1da:	d002      	beq.n	1e2 <bc_gpio_set+0x32>
		HWRITE(CORE_GPIO_CONF + pin, GPCFG_OUTPUT_HIGH);
     1dc:	233f      	movs	r3, #63	; 0x3f
     1de:	7023      	strb	r3, [r4, #0]
     1e0:	e001      	b.n	1e6 <bc_gpio_set+0x36>
	else
		HWRITE(CORE_GPIO_CONF + pin, GPCFG_OUTPUT_LOW);
     1e2:	233e      	movs	r3, #62	; 0x3e
     1e4:	7023      	strb	r3, [r4, #0]
	hw_delay();
     1e6:	f7ff ffb3 	bl	150 <hw_delay>
}
     1ea:	bd70      	pop	{r4, r5, r6, pc}
     1ec:	1b884040 	.word	0x1b884040
     1f0:	00008080 	.word	0x00008080

000001f4 <bc_gpio_get>:

bool bc_gpio_get(uint8_t pin)
{
     1f4:	b510      	push	{r4, lr}
     1f6:	2301      	movs	r3, #1
     1f8:	0004      	movs	r4, r0
     1fa:	281c      	cmp	r0, #28
     1fc:	d803      	bhi.n	206 <bc_gpio_get+0x12>
     1fe:	4a0d      	ldr	r2, [pc, #52]	; (234 <bc_gpio_get+0x40>)
     200:	2301      	movs	r3, #1
     202:	40c2      	lsrs	r2, r0
     204:	4393      	bics	r3, r2
     206:	b2db      	uxtb	r3, r3
	ASSERT(IS_VALID_PIN(pin));
     208:	2b00      	cmp	r3, #0
     20a:	d1fd      	bne.n	208 <bc_gpio_get+0x14>
	hw_delay();
     20c:	f7ff ffa0 	bl	150 <hw_delay>
	register uint8_t group = 0;
	uint8_t st = 0;
	
	queue = (pin & 7);
	group = pin >> 3 & 3;
	st = HREAD(CORE_GPIO_IN+group);
     210:	06e3      	lsls	r3, r4, #27
     212:	4a09      	ldr	r2, [pc, #36]	; (238 <bc_gpio_get+0x44>)
     214:	0f9b      	lsrs	r3, r3, #30
     216:	189b      	adds	r3, r3, r2
     218:	2280      	movs	r2, #128	; 0x80
     21a:	0552      	lsls	r2, r2, #21
     21c:	4313      	orrs	r3, r2
     21e:	781a      	ldrb	r2, [r3, #0]
	return (st & (1 << queue));
     220:	2307      	movs	r3, #7
     222:	401c      	ands	r4, r3
     224:	3b06      	subs	r3, #6
     226:	40a3      	lsls	r3, r4
     228:	0018      	movs	r0, r3
     22a:	4010      	ands	r0, r2
     22c:	1e43      	subs	r3, r0, #1
     22e:	4198      	sbcs	r0, r3
     230:	b2c0      	uxtb	r0, r0
}
     232:	bd10      	pop	{r4, pc}
     234:	1b884040 	.word	0x1b884040
     238:	0000831c 	.word	0x0000831c

0000023c <hw_delay>:

#define BW(addr)			(int)*(addr) << 24 | (int)*(addr + 1) << 16 | (int)*(addr + 2) << 8 | *(addr + 3)

static inline void hw_delay() 
{
	__asm__ __volatile__("nop");
     23c:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     23e:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     240:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     242:	46c0      	nop			; (mov r8, r8)
	__asm__ __volatile__("nop");
     244:	46c0      	nop			; (mov r8, r8)
}
     246:	4770      	bx	lr

00000248 <HW_REG_16BIT>:
#define OS_ENTER_CRITICAL() __disable_irq() 
#define OS_EXIT_CRITICAL() __enable_irq() 


static inline void HW_REG_16BIT(uint32_t reg, uint16_t word)
{
     248:	b570      	push	{r4, r5, r6, lr}
     24a:	000c      	movs	r4, r1
     24c:	0005      	movs	r5, r0
    HW_REG_8BIT(reg, word & 0x00FF);
     24e:	b2cb      	uxtb	r3, r1
     250:	7003      	strb	r3, [r0, #0]
    hw_delay();
    HW_REG_8BIT(reg + 1,(word >> 8));
     252:	0a24      	lsrs	r4, r4, #8


static inline void HW_REG_16BIT(uint32_t reg, uint16_t word)
{
    HW_REG_8BIT(reg, word & 0x00FF);
    hw_delay();
     254:	f7ff fff2 	bl	23c <hw_delay>
    HW_REG_8BIT(reg + 1,(word >> 8));
     258:	706c      	strb	r4, [r5, #1]
}
     25a:	bd70      	pop	{r4, r5, r6, pc}

0000025c <HR_REG_16BIT>:
static inline uint16_t HR_REG_16BIT(uint32_t reg)
{
     25c:	b570      	push	{r4, r5, r6, lr}
     25e:	0005      	movs	r5, r0
	uint16_t return_data = 0;
	uint16_t H_data = 0;
	hw_delay();
     260:	f7ff ffec 	bl	23c <hw_delay>
	return_data = HR_REG_8BIT(reg);
     264:	782c      	ldrb	r4, [r5, #0]
	hw_delay();
     266:	f7ff ffe9 	bl	23c <hw_delay>
	H_data = HR_REG_8BIT(reg + 1);
     26a:	7868      	ldrb	r0, [r5, #1]
static inline uint16_t HR_REG_16BIT(uint32_t reg)
{
	uint16_t return_data = 0;
	uint16_t H_data = 0;
	hw_delay();
	return_data = HR_REG_8BIT(reg);
     26c:	b2e4      	uxtb	r4, r4
	hw_delay();
	H_data = HR_REG_8BIT(reg + 1);
	return_data = (return_data | ((H_data << 8) & 0xFF00));
	return return_data;
     26e:	0200      	lsls	r0, r0, #8
     270:	4320      	orrs	r0, r4
}
     272:	bd70      	pop	{r4, r5, r6, pc}

00000274 <usartInitByBackup>:

UartxRegControlBackup regBeck[UART_PER_NUM];


static void usartInitByBackup(USART_TypeDef USARTx)
{
     274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t UartxCtrlAdr = 0;
	UartxRegDef *UartAdr = NULL;
	/*set uart control*/
	if(USARTx == UARTA) {
     276:	2800      	cmp	r0, #0
     278:	d004      	beq.n	284 <usartInitByBackup+0x10>
		UartxCtrlAdr = CORE_UART_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
	}else if(USARTx == UARTB) {
     27a:	2801      	cmp	r0, #1
     27c:	d105      	bne.n	28a <usartInitByBackup+0x16>
		UartxCtrlAdr = CORE_UARTB_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     27e:	4e1b      	ldr	r6, [pc, #108]	; (2ec <usartInitByBackup+0x78>)
	/*set uart control*/
	if(USARTx == UARTA) {
		UartxCtrlAdr = CORE_UART_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
	}else if(USARTx == UARTB) {
		UartxCtrlAdr = CORE_UARTB_CTRL;
     280:	4b1b      	ldr	r3, [pc, #108]	; (2f0 <usartInitByBackup+0x7c>)
     282:	e004      	b.n	28e <usartInitByBackup+0x1a>
	uint16_t UartxCtrlAdr = 0;
	UartxRegDef *UartAdr = NULL;
	/*set uart control*/
	if(USARTx == UARTA) {
		UartxCtrlAdr = CORE_UART_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
     284:	4e1b      	ldr	r6, [pc, #108]	; (2f4 <usartInitByBackup+0x80>)
{
	uint16_t UartxCtrlAdr = 0;
	UartxRegDef *UartAdr = NULL;
	/*set uart control*/
	if(USARTx == UARTA) {
		UartxCtrlAdr = CORE_UART_CTRL;
     286:	4b1c      	ldr	r3, [pc, #112]	; (2f8 <usartInitByBackup+0x84>)
     288:	e001      	b.n	28e <usartInitByBackup+0x1a>


static void usartInitByBackup(USART_TypeDef USARTx)
{
	uint16_t UartxCtrlAdr = 0;
	UartxRegDef *UartAdr = NULL;
     28a:	2600      	movs	r6, #0
UartxRegControlBackup regBeck[UART_PER_NUM];


static void usartInitByBackup(USART_TypeDef USARTx)
{
	uint16_t UartxCtrlAdr = 0;
     28c:	0033      	movs	r3, r6
	}else if(USARTx == UARTB) {
		UartxCtrlAdr = CORE_UARTB_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}

	HWCOR(UartxCtrlAdr, 1);
     28e:	2580      	movs	r5, #128	; 0x80
     290:	2201      	movs	r2, #1
     292:	056d      	lsls	r5, r5, #21
     294:	431d      	orrs	r5, r3
     296:	782b      	ldrb	r3, [r5, #0]

	/*init all reg by backup*/
	HW_REG_16BIT(((uint32_t)(&UartAdr->Baudrate)), regBeck[USARTx].rbu.Baudrate);
     298:	4f18      	ldr	r7, [pc, #96]	; (2fc <usartInitByBackup+0x88>)
	}else if(USARTx == UARTB) {
		UartxCtrlAdr = CORE_UARTB_CTRL;
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}

	HWCOR(UartxCtrlAdr, 1);
     29a:	4393      	bics	r3, r2
     29c:	702b      	strb	r3, [r5, #0]

	/*init all reg by backup*/
	HW_REG_16BIT(((uint32_t)(&UartAdr->Baudrate)), regBeck[USARTx].rbu.Baudrate);
     29e:	0104      	lsls	r4, r0, #4
     2a0:	5be1      	ldrh	r1, [r4, r7]
     2a2:	0030      	movs	r0, r6
     2a4:	f7ff ffd0 	bl	248 <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->TxSadr)), (uint32_t)regBeck[USARTx].rbu.TxSadr);
     2a8:	0030      	movs	r0, r6
     2aa:	193c      	adds	r4, r7, r4
     2ac:	8921      	ldrh	r1, [r4, #8]
     2ae:	3008      	adds	r0, #8
     2b0:	f7ff ffca 	bl	248 <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->TxEadr)), (uint32_t)regBeck[USARTx].rbu.TxEadr);
     2b4:	0030      	movs	r0, r6
     2b6:	8961      	ldrh	r1, [r4, #10]
     2b8:	300a      	adds	r0, #10
     2ba:	f7ff ffc5 	bl	248 <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->TxWptr)), (uint32_t)regBeck[USARTx].rbu.TxSadr);
     2be:	0030      	movs	r0, r6
     2c0:	8921      	ldrh	r1, [r4, #8]
     2c2:	300c      	adds	r0, #12
     2c4:	f7ff ffc0 	bl	248 <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->RxSadr)), (uint32_t)regBeck[USARTx].rbu.RxSadr);
     2c8:	1cb0      	adds	r0, r6, #2
     2ca:	8861      	ldrh	r1, [r4, #2]
     2cc:	f7ff ffbc 	bl	248 <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->RxEadr)), (uint32_t)regBeck[USARTx].rbu.RxEadr);
     2d0:	1d30      	adds	r0, r6, #4
     2d2:	88a1      	ldrh	r1, [r4, #4]
     2d4:	f7ff ffb8 	bl	248 <HW_REG_16BIT>
	HW_REG_16BIT(((uint32_t)(&UartAdr->RxRptr)), (uint32_t)regBeck[USARTx].rbu.RxSadr);
     2d8:	1db0      	adds	r0, r6, #6
     2da:	8861      	ldrh	r1, [r4, #2]
     2dc:	f7ff ffb4 	bl	248 <HW_REG_16BIT>
	HWOR(UartxCtrlAdr, regBeck[USARTx].cbu);
     2e0:	782a      	ldrb	r2, [r5, #0]
     2e2:	7ba3      	ldrb	r3, [r4, #14]
     2e4:	4313      	orrs	r3, r2
     2e6:	702b      	strb	r3, [r5, #0]
}
     2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	10008072 	.word	0x10008072
     2f0:	00008071 	.word	0x00008071
     2f4:	10008052 	.word	0x10008052
     2f8:	00008060 	.word	0x00008060
     2fc:	10010e26 	.word	0x10010e26

00000300 <USART_Init>:
	return SUCCESS;
}
#endif

void USART_Init(USART_TypeDef USARTx, USART_InitTypeDef* USART_InitStruct)
{	
     300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     302:	0006      	movs	r6, r0
     304:	1e0c      	subs	r4, r1, #0
#define BAUD_USE_SETTING (1<<7)
	void *Ptr = NULL;
	uint8_t CtrValue = 0;

	/*check parameter*/
	ASSERT(USART_InitStruct != NULL);
     306:	d100      	bne.n	30a <USART_Init+0xa>
     308:	e7fe      	b.n	308 <USART_Init+0x8>
	ASSERT(IS_USARTAB(USARTx));
     30a:	2e01      	cmp	r6, #1
     30c:	d8fd      	bhi.n	30a <USART_Init+0xa>
	ASSERT(IS_UARTE_BAUDRATE(USART_InitStruct->USART_BaudRate));
     30e:	6823      	ldr	r3, [r4, #0]
     310:	4a33      	ldr	r2, [pc, #204]	; (3e0 <USART_Init+0xe0>)
     312:	3b01      	subs	r3, #1
     314:	4293      	cmp	r3, r2
     316:	d8fd      	bhi.n	314 <USART_Init+0x14>
	ASSERT(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
     318:	2204      	movs	r2, #4
     31a:	88a3      	ldrh	r3, [r4, #4]
     31c:	4393      	bics	r3, r2
     31e:	2b00      	cmp	r3, #0
     320:	d1fd      	bne.n	31e <USART_Init+0x1e>
	ASSERT(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
     322:	2208      	movs	r2, #8
     324:	88e3      	ldrh	r3, [r4, #6]
     326:	4393      	bics	r3, r2
     328:	2b00      	cmp	r3, #0
     32a:	d1fd      	bne.n	328 <USART_Init+0x28>
	ASSERT(IS_USART_PARITY(USART_InitStruct->USART_Parity));
     32c:	2202      	movs	r2, #2
     32e:	8923      	ldrh	r3, [r4, #8]
     330:	4393      	bics	r3, r2
     332:	2b00      	cmp	r3, #0
     334:	d1fd      	bne.n	332 <USART_Init+0x32>
	ASSERT(IS_USART_MODE(USART_InitStruct->USART_Mode));
     336:	2240      	movs	r2, #64	; 0x40
     338:	8963      	ldrh	r3, [r4, #10]
     33a:	4393      	bics	r3, r2
     33c:	2b00      	cmp	r3, #0
     33e:	d1fd      	bne.n	33c <USART_Init+0x3c>
	ASSERT(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
     340:	2210      	movs	r2, #16
     342:	89a3      	ldrh	r3, [r4, #12]
     344:	4393      	bics	r3, r2
     346:	2b00      	cmp	r3, #0
     348:	d1fd      	bne.n	346 <USART_Init+0x46>
	ASSERT(IS_USART_TXLen(USART_InitStruct->USART_TXLen));
     34a:	89e3      	ldrh	r3, [r4, #14]
     34c:	2b00      	cmp	r3, #0
     34e:	d100      	bne.n	352 <USART_Init+0x52>
     350:	e7fe      	b.n	350 <USART_Init+0x50>
	ASSERT(IS_USART_RXLen(USART_InitStruct->USART_RXLen));
     352:	8a23      	ldrh	r3, [r4, #16]
     354:	2b00      	cmp	r3, #0
     356:	d100      	bne.n	35a <USART_Init+0x5a>
     358:	e7fe      	b.n	358 <USART_Init+0x58>

	HWRITE(CORE_UART_CLKSEL, 1);
     35a:	2101      	movs	r1, #1
	HWCOR(CORE_CLKOFF + 1, 0x80);
     35c:	227f      	movs	r2, #127	; 0x7f
	ASSERT(IS_USART_MODE(USART_InitStruct->USART_Mode));
	ASSERT(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
	ASSERT(IS_USART_TXLen(USART_InitStruct->USART_TXLen));
	ASSERT(IS_USART_RXLen(USART_InitStruct->USART_RXLen));

	HWRITE(CORE_UART_CLKSEL, 1);
     35e:	4b21      	ldr	r3, [pc, #132]	; (3e4 <USART_Init+0xe4>)
	HWCOR(CORE_CLKOFF + 1, 0x80);
     360:	4821      	ldr	r0, [pc, #132]	; (3e8 <USART_Init+0xe8>)
	ASSERT(IS_USART_MODE(USART_InitStruct->USART_Mode));
	ASSERT(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
	ASSERT(IS_USART_TXLen(USART_InitStruct->USART_TXLen));
	ASSERT(IS_USART_RXLen(USART_InitStruct->USART_RXLen));

	HWRITE(CORE_UART_CLKSEL, 1);
     362:	7019      	strb	r1, [r3, #0]
	HWCOR(CORE_CLKOFF + 1, 0x80);
     364:	7805      	ldrb	r5, [r0, #0]
     366:	402a      	ands	r2, r5
     368:	7002      	strb	r2, [r0, #0]
	if(USART_InitStruct->USART_BaudRate == BAUD9600){
     36a:	6820      	ldr	r0, [r4, #0]
     36c:	4a1f      	ldr	r2, [pc, #124]	; (3ec <USART_Init+0xec>)
     36e:	4290      	cmp	r0, r2
     370:	d102      	bne.n	378 <USART_Init+0x78>
		HWCOR(CORE_UART_CLKSEL, 0x01);
     372:	781a      	ldrb	r2, [r3, #0]
     374:	438a      	bics	r2, r1
     376:	701a      	strb	r2, [r3, #0]
	}

	/*init baud backup*/
	regBeck[USARTx].rbu.Baudrate = USART_InitStruct->USART_BaudRate;
     378:	4f1d      	ldr	r7, [pc, #116]	; (3f0 <USART_Init+0xf0>)
     37a:	8823      	ldrh	r3, [r4, #0]
     37c:	0135      	lsls	r5, r6, #4
     37e:	53eb      	strh	r3, [r5, r7]
	
	/*init tx ring buffer backup*/
	Ptr = malloc(USART_InitStruct->USART_TXLen);
     380:	89e3      	ldrh	r3, [r4, #14]
	regBeck[USARTx].rbu.TxSadr = (uint32_t)Ptr;
     382:	197d      	adds	r5, r7, r5

	/*init baud backup*/
	regBeck[USARTx].rbu.Baudrate = USART_InitStruct->USART_BaudRate;
	
	/*init tx ring buffer backup*/
	Ptr = malloc(USART_InitStruct->USART_TXLen);
     384:	0018      	movs	r0, r3
     386:	9301      	str	r3, [sp, #4]
     388:	f000 fc6a 	bl	c60 <malloc>
	regBeck[USARTx].rbu.TxSadr = (uint32_t)Ptr;
     38c:	b283      	uxth	r3, r0
     38e:	812b      	strh	r3, [r5, #8]

	ASSERT(Ptr != NULL);	
     390:	2800      	cmp	r0, #0
     392:	d100      	bne.n	396 <USART_Init+0x96>
     394:	e7fe      	b.n	394 <USART_Init+0x94>
	regBeck[USARTx].rbu.TxEadr = ((uint32_t)Ptr) + USART_InitStruct->USART_TXLen;
     396:	9a01      	ldr	r2, [sp, #4]
     398:	18d3      	adds	r3, r2, r3
     39a:	816b      	strh	r3, [r5, #10]
	Ptr = NULL;
	
	/*init rx ring buffer backup*/
	Ptr = malloc(USART_InitStruct->USART_RXLen);
     39c:	8a27      	ldrh	r7, [r4, #16]
     39e:	0038      	movs	r0, r7
     3a0:	f000 fc5e 	bl	c60 <malloc>
	regBeck[USARTx].rbu.RxSadr = (uint32_t)Ptr;
     3a4:	b283      	uxth	r3, r0
     3a6:	806b      	strh	r3, [r5, #2]
	ASSERT(Ptr != NULL);	
     3a8:	2800      	cmp	r0, #0
     3aa:	d100      	bne.n	3ae <USART_Init+0xae>
     3ac:	e7fe      	b.n	3ac <USART_Init+0xac>
	regBeck[USARTx].rbu.RxEadr = ((uint32_t)Ptr) + USART_InitStruct->USART_RXLen;
     3ae:	18ff      	adds	r7, r7, r3
     3b0:	80af      	strh	r7, [r5, #4]

	CtrValue =  USART_InitStruct->USART_Mode | USART_InitStruct->USART_HardwareFlowControl |\
			  USART_InitStruct->USART_Parity |USART_InitStruct->USART_StopBits| \
			  USART_InitStruct->USART_WordLength|BAUD_USE_SETTING|UARTC_BIT_ENABLE;
	
	regBeck[USARTx].cbu = CtrValue;
     3b2:	8962      	ldrh	r2, [r4, #10]
     3b4:	89a3      	ldrh	r3, [r4, #12]
     3b6:	4313      	orrs	r3, r2
     3b8:	227f      	movs	r2, #127	; 0x7f
     3ba:	4252      	negs	r2, r2
     3bc:	4313      	orrs	r3, r2
     3be:	8922      	ldrh	r2, [r4, #8]
     3c0:	4313      	orrs	r3, r2
     3c2:	88e2      	ldrh	r2, [r4, #6]
     3c4:	4313      	orrs	r3, r2
     3c6:	88a2      	ldrh	r2, [r4, #4]
     3c8:	4313      	orrs	r3, r2
     3ca:	73ab      	strb	r3, [r5, #14]

	/*init rx ring buffer regs*/
	if(USARTx == UARTA) {
     3cc:	2e00      	cmp	r6, #0
     3ce:	d103      	bne.n	3d8 <USART_Init+0xd8>
		usartInitByBackup(UARTA);
     3d0:	0030      	movs	r0, r6
     3d2:	f7ff ff4f 	bl	274 <usartInitByBackup>
     3d6:	e002      	b.n	3de <USART_Init+0xde>
		//DEV_Register(Device_Id_UartA, usartAReinit, NULL);
	}
	else {
		usartInitByBackup(UARTB);
     3d8:	2001      	movs	r0, #1
     3da:	f7ff ff4b 	bl	274 <usartInitByBackup>
		//DEV_Register(Device_Id_UartB, usartBReinit, NULL);
	}

}
     3de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3e0:	00008ffe 	.word	0x00008ffe
     3e4:	10008043 	.word	0x10008043
     3e8:	10008051 	.word	0x10008051
     3ec:	000089c4 	.word	0x000089c4
     3f0:	10010e26 	.word	0x10010e26

000003f4 <USART_DeInit>:


void USART_DeInit(USART_TypeDef USARTx)
{
     3f4:	b510      	push	{r4, lr}
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
     3f6:	2801      	cmp	r0, #1
     3f8:	d8fd      	bhi.n	3f6 <USART_DeInit+0x2>
     3fa:	2201      	movs	r2, #1
	
	if(USARTx == UARTA) {
     3fc:	2800      	cmp	r0, #0
     3fe:	d108      	bne.n	412 <USART_DeInit+0x1e>
		HWOR(reg_map(CORE_UART_CTRL), (1<<0));
     400:	4b0b      	ldr	r3, [pc, #44]	; (430 <USART_DeInit+0x3c>)
		HWOR(reg_map(CORE_UART_CTRL), (0<<0));
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
     402:	4c0c      	ldr	r4, [pc, #48]	; (434 <USART_DeInit+0x40>)
{
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
	
	if(USARTx == UARTA) {
		HWOR(reg_map(CORE_UART_CTRL), (1<<0));
     404:	7819      	ldrb	r1, [r3, #0]
     406:	430a      	orrs	r2, r1
     408:	701a      	strb	r2, [r3, #0]
		HWOR(reg_map(CORE_UART_CTRL), (0<<0));
     40a:	781a      	ldrb	r2, [r3, #0]
     40c:	b2d2      	uxtb	r2, r2
     40e:	701a      	strb	r2, [r3, #0]
     410:	e007      	b.n	422 <USART_DeInit+0x2e>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
	}else {

		HWOR(reg_map(CORE_UARTB_CTRL), (1<<0));
     412:	4b09      	ldr	r3, [pc, #36]	; (438 <USART_DeInit+0x44>)
		HWOR(reg_map(CORE_UARTB_CTRL), (0<<0));
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     414:	4c09      	ldr	r4, [pc, #36]	; (43c <USART_DeInit+0x48>)
		HWOR(reg_map(CORE_UART_CTRL), (1<<0));
		HWOR(reg_map(CORE_UART_CTRL), (0<<0));
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
	}else {

		HWOR(reg_map(CORE_UARTB_CTRL), (1<<0));
     416:	7819      	ldrb	r1, [r3, #0]
     418:	430a      	orrs	r2, r1
     41a:	701a      	strb	r2, [r3, #0]
		HWOR(reg_map(CORE_UARTB_CTRL), (0<<0));
     41c:	781a      	ldrb	r2, [r3, #0]
     41e:	b2d2      	uxtb	r2, r2
     420:	701a      	strb	r2, [r3, #0]
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
	free((void *)((uint32_t)(UartAdr->TxSadr)));
     422:	8920      	ldrh	r0, [r4, #8]
     424:	f000 fc26 	bl	c74 <free>
	free((void *)((uint32_t)(UartAdr->RxSadr)));
     428:	8860      	ldrh	r0, [r4, #2]
     42a:	f000 fc23 	bl	c74 <free>
}
     42e:	bd10      	pop	{r4, pc}
     430:	10008060 	.word	0x10008060
     434:	10008052 	.word	0x10008052
     438:	10008071 	.word	0x10008071
     43c:	10008072 	.word	0x10008072

00000440 <USART_SendData>:



void USART_SendData(USART_TypeDef USARTx, uint16_t Data)
{
     440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     442:	0006      	movs	r6, r0
     444:	9101      	str	r1, [sp, #4]
	UartxRegDef * UartAdr = NULL;
	uint16_t  WPtr = 0; 
	ASSERT(IS_USARTAB(USARTx));
     446:	2e01      	cmp	r6, #1
     448:	d8fd      	bhi.n	446 <USART_SendData+0x6>
	
	if(USARTx == UARTA) {
     44a:	2e00      	cmp	r6, #0
     44c:	d001      	beq.n	452 <USART_SendData+0x12>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     44e:	4c15      	ldr	r4, [pc, #84]	; (4a4 <USART_SendData+0x64>)
     450:	e000      	b.n	454 <USART_SendData+0x14>
	UartxRegDef * UartAdr = NULL;
	uint16_t  WPtr = 0; 
	ASSERT(IS_USARTAB(USARTx));
	
	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
     452:	4c15      	ldr	r4, [pc, #84]	; (4a8 <USART_SendData+0x68>)
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
	ASSERT((&UartAdr->TxSadr  != NULL));
	
	WPtr = HR_REG_16BIT((uint32_t)(&UartAdr->TxWptr));
     454:	0027      	movs	r7, r4
     456:	370c      	adds	r7, #12
     458:	0038      	movs	r0, r7
     45a:	f7ff feff 	bl	25c <HR_REG_16BIT>
     45e:	0005      	movs	r5, r0
	if(USARTx == UARTA) {
     460:	2e00      	cmp	r6, #0
     462:	d104      	bne.n	46e <USART_SendData+0x2e>
		while(HREAD(CORE_UART_TX_ITEMS) > 0);
     464:	4a11      	ldr	r2, [pc, #68]	; (4ac <USART_SendData+0x6c>)
     466:	7813      	ldrb	r3, [r2, #0]
     468:	2b00      	cmp	r3, #0
     46a:	d1fc      	bne.n	466 <USART_SendData+0x26>
     46c:	e003      	b.n	476 <USART_SendData+0x36>
	}else {
		while(HREAD(CORE_UARTB_TX_ITEMS) > 0);
     46e:	4a10      	ldr	r2, [pc, #64]	; (4b0 <USART_SendData+0x70>)
     470:	7813      	ldrb	r3, [r2, #0]
     472:	2b00      	cmp	r3, #0
     474:	d1fc      	bne.n	470 <USART_SendData+0x30>
	}	
	HW_REG_8BIT(WPtr|M0_MEMORY_BASE,Data);	
     476:	466a      	mov	r2, sp
	RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	
     478:	0020      	movs	r0, r4
	if(USARTx == UARTA) {
		while(HREAD(CORE_UART_TX_ITEMS) > 0);
	}else {
		while(HREAD(CORE_UARTB_TX_ITEMS) > 0);
	}	
	HW_REG_8BIT(WPtr|M0_MEMORY_BASE,Data);	
     47a:	4b0e      	ldr	r3, [pc, #56]	; (4b4 <USART_SendData+0x74>)
     47c:	7912      	ldrb	r2, [r2, #4]
     47e:	432b      	orrs	r3, r5
     480:	701a      	strb	r2, [r3, #0]
	RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	
     482:	300a      	adds	r0, #10
     484:	f7ff feea 	bl	25c <HR_REG_16BIT>
     488:	1c69      	adds	r1, r5, #1
     48a:	b289      	uxth	r1, r1
     48c:	4285      	cmp	r5, r0
     48e:	d104      	bne.n	49a <USART_SendData+0x5a>
	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
	ASSERT((&UartAdr->TxSadr  != NULL));
     490:	0020      	movs	r0, r4
     492:	3008      	adds	r0, #8
		while(HREAD(CORE_UART_TX_ITEMS) > 0);
	}else {
		while(HREAD(CORE_UARTB_TX_ITEMS) > 0);
	}	
	HW_REG_8BIT(WPtr|M0_MEMORY_BASE,Data);	
	RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	
     494:	f7ff fee2 	bl	25c <HR_REG_16BIT>
     498:	0001      	movs	r1, r0
	HW_REG_16BIT((uint32_t)(&UartAdr->TxWptr),  WPtr);                                                                                                		
     49a:	0038      	movs	r0, r7
     49c:	f7ff fed4 	bl	248 <HW_REG_16BIT>
}
     4a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	10008072 	.word	0x10008072
     4a8:	10008052 	.word	0x10008052
     4ac:	1000830e 	.word	0x1000830e
     4b0:	10008356 	.word	0x10008356
     4b4:	10010000 	.word	0x10010000

000004b8 <USART_ReceiveData>:



uint16_t USART_ReceiveData(USART_TypeDef USARTx)
{	
     4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UartxRegDef *UartAdr = NULL;
	uint16_t  RPtr = 0;
	uint16_t  RdData = 0;
	ASSERT(IS_USARTAB(USARTx)); 
     4ba:	2801      	cmp	r0, #1
     4bc:	d8fd      	bhi.n	4ba <USART_ReceiveData+0x2>

	if(USARTx == UARTA) {
     4be:	2800      	cmp	r0, #0
     4c0:	d001      	beq.n	4c6 <USART_ReceiveData+0xe>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     4c2:	4c0e      	ldr	r4, [pc, #56]	; (4fc <USART_ReceiveData+0x44>)
     4c4:	e000      	b.n	4c8 <USART_ReceiveData+0x10>
	uint16_t  RPtr = 0;
	uint16_t  RdData = 0;
	ASSERT(IS_USARTAB(USARTx)); 

	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
     4c6:	4c0e      	ldr	r4, [pc, #56]	; (500 <USART_ReceiveData+0x48>)
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
	RPtr = HR_REG_16BIT((uint32_t)(&UartAdr->RxRptr));
     4c8:	1da5      	adds	r5, r4, #6
     4ca:	0028      	movs	r0, r5
     4cc:	f7ff fec6 	bl	25c <HR_REG_16BIT>
     4d0:	0007      	movs	r7, r0
	RdData = HR_REG_16BIT(RPtr|M0_MEMORY_BASE);
     4d2:	480c      	ldr	r0, [pc, #48]	; (504 <USART_ReceiveData+0x4c>)
     4d4:	4338      	orrs	r0, r7
     4d6:	f7ff fec1 	bl	25c <HR_REG_16BIT>
     4da:	0006      	movs	r6, r0
	RB_UPDATE_PTR(RPtr, HR_REG_16BIT((uint32_t)(&UartAdr->RxSadr)), HR_REG_16BIT((uint32_t)(&UartAdr->RxEadr)));
     4dc:	1d20      	adds	r0, r4, #4
     4de:	f7ff febd 	bl	25c <HR_REG_16BIT>
     4e2:	1c79      	adds	r1, r7, #1
     4e4:	b289      	uxth	r1, r1
     4e6:	4287      	cmp	r7, r0
     4e8:	d103      	bne.n	4f2 <USART_ReceiveData+0x3a>
     4ea:	1ca0      	adds	r0, r4, #2
     4ec:	f7ff feb6 	bl	25c <HR_REG_16BIT>
     4f0:	0001      	movs	r1, r0
	HW_REG_16BIT((uint32_t)(&UartAdr->RxRptr), RPtr);	
     4f2:	0028      	movs	r0, r5
     4f4:	f7ff fea8 	bl	248 <HW_REG_16BIT>
	return RdData;
}
     4f8:	0030      	movs	r0, r6
     4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4fc:	10008072 	.word	0x10008072
     500:	10008052 	.word	0x10008052
     504:	10010000 	.word	0x10010000

00000508 <USART_GetRxCount>:


uint16_t USART_GetRxCount(USART_TypeDef USARTx)
{
     508:	b510      	push	{r4, lr}
	ASSERT(IS_USARTAB(USARTx));
     50a:	2801      	cmp	r0, #1
     50c:	d8fd      	bhi.n	50a <USART_GetRxCount+0x2>
	if(USARTx == UARTA) {
     50e:	2800      	cmp	r0, #0
     510:	d103      	bne.n	51a <USART_GetRxCount+0x12>
		return HR_REG_16BIT(reg_map(CORE_UART_RX_ITEMS));
     512:	4804      	ldr	r0, [pc, #16]	; (524 <USART_GetRxCount+0x1c>)
     514:	f7ff fea2 	bl	25c <HR_REG_16BIT>
     518:	e002      	b.n	520 <USART_GetRxCount+0x18>
	}else {
		return HR_REG_16BIT(reg_map(CORE_UARTB_RX_ITEMS));
     51a:	4803      	ldr	r0, [pc, #12]	; (528 <USART_GetRxCount+0x20>)
     51c:	f7ff fe9e 	bl	25c <HR_REG_16BIT>
	}
}
     520:	bd10      	pop	{r4, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	10008312 	.word	0x10008312
     528:	1000835a 	.word	0x1000835a

0000052c <USART_ReadDatatoBuff>:


uint16_t USART_ReadDatatoBuff(USART_TypeDef USARTx, uint8_t* RxBuff, uint16_t RxSize)
{
     52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     52e:	000d      	movs	r5, r1
     530:	0016      	movs	r6, r2
	uint16_t RxLen = 0;	
	uint16_t RPtr = 0;
	uint16_t RdataLen = 0;
	uint32_t RxITEMS = 0;
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
     532:	2801      	cmp	r0, #1
     534:	d8fd      	bhi.n	532 <USART_ReadDatatoBuff+0x6>
	ASSERT(RxBuff != NULL);
     536:	2d00      	cmp	r5, #0
     538:	d100      	bne.n	53c <USART_ReadDatatoBuff+0x10>
     53a:	e7fe      	b.n	53a <USART_ReadDatatoBuff+0xe>
	
	if(USARTx == UARTA) {
     53c:	2800      	cmp	r0, #0
     53e:	d002      	beq.n	546 <USART_ReadDatatoBuff+0x1a>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
		RxITEMS = reg_map(CORE_UART_RX_ITEMS);
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     540:	4f1a      	ldr	r7, [pc, #104]	; (5ac <USART_ReadDatatoBuff+0x80>)
		RxITEMS = reg_map(CORE_UARTB_RX_ITEMS);
     542:	481b      	ldr	r0, [pc, #108]	; (5b0 <USART_ReadDatatoBuff+0x84>)
     544:	e001      	b.n	54a <USART_ReadDatatoBuff+0x1e>
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
	ASSERT(RxBuff != NULL);
	
	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));
     546:	4f1b      	ldr	r7, [pc, #108]	; (5b4 <USART_ReadDatatoBuff+0x88>)
		RxITEMS = reg_map(CORE_UART_RX_ITEMS);
     548:	481b      	ldr	r0, [pc, #108]	; (5b8 <USART_ReadDatatoBuff+0x8c>)
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
		RxITEMS = reg_map(CORE_UARTB_RX_ITEMS);
	}
	RxLen = HR_REG_16BIT(reg_map(RxITEMS)); 
     54a:	f7ff fe87 	bl	25c <HR_REG_16BIT>
	if (RxSize!=0) {
     54e:	2e00      	cmp	r6, #0
     550:	d003      	beq.n	55a <USART_ReadDatatoBuff+0x2e>
		if (RxLen < RxSize) return 0; else RxLen = RxSize;
     552:	2300      	movs	r3, #0
     554:	42b0      	cmp	r0, r6
     556:	d204      	bcs.n	562 <USART_ReadDatatoBuff+0x36>
     558:	e025      	b.n	5a6 <USART_ReadDatatoBuff+0x7a>
     55a:	0033      	movs	r3, r6
	}
	if (0 == RxLen) {
     55c:	2800      	cmp	r0, #0
     55e:	d022      	beq.n	5a6 <USART_ReadDatatoBuff+0x7a>
     560:	0006      	movs	r6, r0
        return 0;
	} else {
		RPtr = HR_REG_16BIT((uint32_t)(&UartAdr->RxRptr));
     562:	1dbb      	adds	r3, r7, #6
     564:	0018      	movs	r0, r3
     566:	9300      	str	r3, [sp, #0]
     568:	f7ff fe78 	bl	25c <HR_REG_16BIT>
     56c:	0004      	movs	r4, r0
     56e:	19ab      	adds	r3, r5, r6
     570:	9301      	str	r3, [sp, #4]
		for(RdataLen = 0; RdataLen<RxLen; RdataLen++ ){
     572:	9b01      	ldr	r3, [sp, #4]
     574:	429d      	cmp	r5, r3
     576:	d011      	beq.n	59c <USART_ReadDatatoBuff+0x70>
			RxBuff[RdataLen] = HR_REG_8BIT(RPtr|M0_MEMORY_BASE);   
     578:	4b10      	ldr	r3, [pc, #64]	; (5bc <USART_ReadDatatoBuff+0x90>)
			RB_UPDATE_PTR(RPtr, HR_REG_16BIT((uint32_t)(&UartAdr->RxSadr)), HR_REG_16BIT((uint32_t)(&UartAdr->RxEadr)));
     57a:	1d38      	adds	r0, r7, #4
	if (0 == RxLen) {
        return 0;
	} else {
		RPtr = HR_REG_16BIT((uint32_t)(&UartAdr->RxRptr));
		for(RdataLen = 0; RdataLen<RxLen; RdataLen++ ){
			RxBuff[RdataLen] = HR_REG_8BIT(RPtr|M0_MEMORY_BASE);   
     57c:	4323      	orrs	r3, r4
     57e:	781b      	ldrb	r3, [r3, #0]
     580:	702b      	strb	r3, [r5, #0]
			RB_UPDATE_PTR(RPtr, HR_REG_16BIT((uint32_t)(&UartAdr->RxSadr)), HR_REG_16BIT((uint32_t)(&UartAdr->RxEadr)));
     582:	f7ff fe6b 	bl	25c <HR_REG_16BIT>
     586:	4284      	cmp	r4, r0
     588:	d104      	bne.n	594 <USART_ReadDatatoBuff+0x68>
     58a:	1cb8      	adds	r0, r7, #2
     58c:	f7ff fe66 	bl	25c <HR_REG_16BIT>
     590:	0004      	movs	r4, r0
     592:	e001      	b.n	598 <USART_ReadDatatoBuff+0x6c>
     594:	3401      	adds	r4, #1
     596:	b2a4      	uxth	r4, r4
     598:	3501      	adds	r5, #1
     59a:	e7ea      	b.n	572 <USART_ReadDatatoBuff+0x46>
		}
	}
	HW_REG_16BIT((uint32_t)(&UartAdr->RxRptr), (RPtr));
     59c:	0021      	movs	r1, r4
     59e:	9800      	ldr	r0, [sp, #0]
     5a0:	f7ff fe52 	bl	248 <HW_REG_16BIT>
	return RdataLen;
     5a4:	0033      	movs	r3, r6
}
     5a6:	0018      	movs	r0, r3
     5a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	10008072 	.word	0x10008072
     5b0:	1000835a 	.word	0x1000835a
     5b4:	10008052 	.word	0x10008052
     5b8:	10008312 	.word	0x10008312
     5bc:	10010000 	.word	0x10010000

000005c0 <USART_SendDataFromBuff>:

uint16_t USART_SendDataFromBuff(USART_TypeDef USARTx, uint8_t* TxBuff, uint16_t TxLen)
{
     5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     5c2:	000d      	movs	r5, r1
     5c4:	0017      	movs	r7, r2
	uint16_t  WPtr = 0;
	uint16_t  SDataLen = 0;	
	UartxRegDef *UartAdr = NULL;
	ASSERT(IS_USARTAB(USARTx));
     5c6:	2801      	cmp	r0, #1
     5c8:	d8fd      	bhi.n	5c6 <USART_SendDataFromBuff+0x6>
	ASSERT(TxBuff != 0);
     5ca:	2d00      	cmp	r5, #0
     5cc:	d100      	bne.n	5d0 <USART_SendDataFromBuff+0x10>
     5ce:	e7fe      	b.n	5ce <USART_SendDataFromBuff+0xe>
	ASSERT(TxLen > 0);
     5d0:	2f00      	cmp	r7, #0
     5d2:	d100      	bne.n	5d6 <USART_SendDataFromBuff+0x16>
     5d4:	e7fe      	b.n	5d4 <USART_SendDataFromBuff+0x14>
	
	if(USARTx == UARTA) {
     5d6:	2800      	cmp	r0, #0
     5d8:	d001      	beq.n	5de <USART_SendDataFromBuff+0x1e>
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
     5da:	4e14      	ldr	r6, [pc, #80]	; (62c <USART_SendDataFromBuff+0x6c>)
     5dc:	e000      	b.n	5e0 <USART_SendDataFromBuff+0x20>
	ASSERT(IS_USARTAB(USARTx));
	ASSERT(TxBuff != 0);
	ASSERT(TxLen > 0);
	
	if(USARTx == UARTA) {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UART_BAUD));	
     5de:	4e14      	ldr	r6, [pc, #80]	; (630 <USART_SendDataFromBuff+0x70>)
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
   	WPtr = HR_REG_16BIT((uint32_t)(&UartAdr->TxWptr));
     5e0:	0033      	movs	r3, r6
     5e2:	330c      	adds	r3, #12
     5e4:	0018      	movs	r0, r3
     5e6:	9300      	str	r3, [sp, #0]
     5e8:	f7ff fe38 	bl	25c <HR_REG_16BIT>
     5ec:	0004      	movs	r4, r0
     5ee:	19eb      	adds	r3, r5, r7
     5f0:	9301      	str	r3, [sp, #4]
   	for (uint16_t i=0; i<TxLen; i++)  {	
     5f2:	9b01      	ldr	r3, [sp, #4]
     5f4:	429d      	cmp	r5, r3
     5f6:	d013      	beq.n	620 <USART_SendDataFromBuff+0x60>
		HW_REG_8BIT(WPtr|M0_MEMORY_BASE,TxBuff[i]);	
		RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	   
     5f8:	0030      	movs	r0, r6
	}else {
		UartAdr = (UartxRegDef *)(reg_map(CORE_UARTB_BAUD));
	}
   	WPtr = HR_REG_16BIT((uint32_t)(&UartAdr->TxWptr));
   	for (uint16_t i=0; i<TxLen; i++)  {	
		HW_REG_8BIT(WPtr|M0_MEMORY_BASE,TxBuff[i]);	
     5fa:	4b0e      	ldr	r3, [pc, #56]	; (634 <USART_SendDataFromBuff+0x74>)
     5fc:	782a      	ldrb	r2, [r5, #0]
     5fe:	4323      	orrs	r3, r4
     600:	701a      	strb	r2, [r3, #0]
		RB_UPDATE_PTR(WPtr, HR_REG_16BIT((uint32_t)(&UartAdr->TxSadr)),  HR_REG_16BIT((uint32_t)(&UartAdr->TxEadr)));	   
     602:	300a      	adds	r0, #10
     604:	f7ff fe2a 	bl	25c <HR_REG_16BIT>
     608:	4284      	cmp	r4, r0
     60a:	d105      	bne.n	618 <USART_SendDataFromBuff+0x58>
     60c:	0030      	movs	r0, r6
     60e:	3008      	adds	r0, #8
     610:	f7ff fe24 	bl	25c <HR_REG_16BIT>
     614:	0004      	movs	r4, r0
     616:	e001      	b.n	61c <USART_SendDataFromBuff+0x5c>
     618:	3401      	adds	r4, #1
     61a:	b2a4      	uxth	r4, r4
     61c:	3501      	adds	r5, #1
     61e:	e7e8      	b.n	5f2 <USART_SendDataFromBuff+0x32>
		SDataLen++;	
	}
	HW_REG_16BIT((uint32_t)(&UartAdr->TxWptr),  WPtr);  
     620:	9800      	ldr	r0, [sp, #0]
     622:	0021      	movs	r1, r4
     624:	f7ff fe10 	bl	248 <HW_REG_16BIT>
	return SDataLen;
}
     628:	0038      	movs	r0, r7
     62a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     62c:	10008072 	.word	0x10008072
     630:	10008052 	.word	0x10008052
     634:	10010000 	.word	0x10010000

00000638 <UART_RemapToPrintf>:

static USART_TypeDef _printf_uart = UARTN;

int UART_RemapToPrintf(USART_TypeDef USARTx, uint8_t txPin, uint8_t rxPin)
{
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	0007      	movs	r7, r0
	_printf_uart = USARTx;
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
     63c:	4b17      	ldr	r3, [pc, #92]	; (69c <UART_RemapToPrintf+0x64>)
}

static USART_TypeDef _printf_uart = UARTN;

int UART_RemapToPrintf(USART_TypeDef USARTx, uint8_t txPin, uint8_t rxPin)
{
     63e:	b089      	sub	sp, #36	; 0x24
     640:	0016      	movs	r6, r2
	_printf_uart = USARTx;
     642:	4d17      	ldr	r5, [pc, #92]	; (6a0 <UART_RemapToPrintf+0x68>)
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
     644:	781a      	ldrb	r2, [r3, #0]
}

static USART_TypeDef _printf_uart = UARTN;

int UART_RemapToPrintf(USART_TypeDef USARTx, uint8_t txPin, uint8_t rxPin)
{
     646:	0008      	movs	r0, r1
	_printf_uart = USARTx;
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
     648:	a901      	add	r1, sp, #4

static USART_TypeDef _printf_uart = UARTN;

int UART_RemapToPrintf(USART_TypeDef USARTx, uint8_t txPin, uint8_t rxPin)
{
	_printf_uart = USARTx;
     64a:	702f      	strb	r7, [r5, #0]
	/*init gpio*/	
	GPIO_CFG cfgTx ={FUNC_UARTB_TXD, GFG_PULLUP};
     64c:	700a      	strb	r2, [r1, #0]
     64e:	001c      	movs	r4, r3
	if(USARTx == UARTA)
     650:	2f00      	cmp	r7, #0
     652:	d105      	bne.n	660 <UART_RemapToPrintf+0x28>
		cfgTx.pin_func = FUNC_UART_TXD;
     654:	b2d3      	uxtb	r3, r2
     656:	223f      	movs	r2, #63	; 0x3f
     658:	4393      	bics	r3, r2
     65a:	3a37      	subs	r2, #55	; 0x37
     65c:	4313      	orrs	r3, r2
     65e:	700b      	strb	r3, [r1, #0]
	bc_gpio_init(txPin, &cfgTx);
     660:	f7ff fd7c 	bl	15c <bc_gpio_init>
	
	GPIO_CFG cfgRx ={FUNC_UARTB_RXD, GFG_PULLUP};
     664:	7863      	ldrb	r3, [r4, #1]
     666:	a902      	add	r1, sp, #8
     668:	700b      	strb	r3, [r1, #0]
	if(USARTx == UARTA)
     66a:	2f00      	cmp	r7, #0
     66c:	d105      	bne.n	67a <UART_RemapToPrintf+0x42>
		cfgRx.pin_func = FUNC_UART_RXD;
     66e:	223f      	movs	r2, #63	; 0x3f
     670:	b2db      	uxtb	r3, r3
     672:	4393      	bics	r3, r2
     674:	3a36      	subs	r2, #54	; 0x36
     676:	4313      	orrs	r3, r2
     678:	700b      	strb	r3, [r1, #0]
	bc_gpio_init(rxPin, &cfgRx);
     67a:	0030      	movs	r0, r6
     67c:	f7ff fd6e 	bl	15c <bc_gpio_init>

	/*cofig uart parameter*/	
	USART_InitTypeDef Uart = {BAUD921600, DATA_BITS_8b, STOP_BITS_1, PARITY_EVEN,
     680:	a903      	add	r1, sp, #12
     682:	000a      	movs	r2, r1
     684:	1d23      	adds	r3, r4, #4
     686:	cb51      	ldmia	r3!, {r0, r4, r6}
     688:	c251      	stmia	r2!, {r0, r4, r6}
     68a:	cb11      	ldmia	r3!, {r0, r4}
     68c:	c211      	stmia	r2!, {r0, r4}
								MODE_DUPLEX, FLOW_CTRL_NONE, 128, 128};
	USART_Init(_printf_uart, &Uart);
     68e:	7828      	ldrb	r0, [r5, #0]
     690:	f7ff fe36 	bl	300 <USART_Init>
	return 0;
}
     694:	2000      	movs	r0, #0
     696:	b009      	add	sp, #36	; 0x24
     698:	bdf0      	pop	{r4, r5, r6, r7, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	00002790 	.word	0x00002790
     6a0:	10010500 	.word	0x10010500

000006a4 <UART_PutChar>:

void UART_PutChar(char c)
{
	if(_printf_uart != UARTN)
     6a4:	4b04      	ldr	r3, [pc, #16]	; (6b8 <UART_PutChar+0x14>)
	USART_Init(_printf_uart, &Uart);
	return 0;
}

void UART_PutChar(char c)
{
     6a6:	0001      	movs	r1, r0
	if(_printf_uart != UARTN)
     6a8:	7818      	ldrb	r0, [r3, #0]
	USART_Init(_printf_uart, &Uart);
	return 0;
}

void UART_PutChar(char c)
{
     6aa:	b510      	push	{r4, lr}
	if(_printf_uart != UARTN)
     6ac:	2802      	cmp	r0, #2
     6ae:	d002      	beq.n	6b6 <UART_PutChar+0x12>
		USART_SendData(_printf_uart, (uint16_t)c);
     6b0:	b289      	uxth	r1, r1
     6b2:	f7ff fec5 	bl	440 <USART_SendData>
}
     6b6:	bd10      	pop	{r4, pc}
     6b8:	10010500 	.word	0x10010500

000006bc <SYS_TimerExpireDefaultHandle>:

void SYS_TimerExpireDefaultHandle(int params)
{
	// YC_LOG_ERROR("default timer expire !\r\n");
	while(0);
}
     6bc:	4770      	bx	lr

000006be <SYS_TimerInit>:

void SYS_TimerInit()
{
	//initial timer lists
	pheader = &header_Timer;
     6be:	4b0d      	ldr	r3, [pc, #52]	; (6f4 <SYS_TimerInit+0x36>)
     6c0:	4a0d      	ldr	r2, [pc, #52]	; (6f8 <SYS_TimerInit+0x3a>)
	// YC_LOG_ERROR("default timer expire !\r\n");
	while(0);
}

void SYS_TimerInit()
{
     6c2:	b510      	push	{r4, lr}
	//initial timer lists
	pheader = &header_Timer;
     6c4:	6013      	str	r3, [r2, #0]
	pheader->pNextTimer = NULL;
	pheader->pfExpireCb = SYS_TimerExpireDefaultHandle;
     6c6:	4a0d      	ldr	r2, [pc, #52]	; (6fc <SYS_TimerInit+0x3e>)

void SYS_TimerInit()
{
	//initial timer lists
	pheader = &header_Timer;
	pheader->pNextTimer = NULL;
     6c8:	2100      	movs	r1, #0
	pheader->pfExpireCb = SYS_TimerExpireDefaultHandle;
     6ca:	60da      	str	r2, [r3, #12]
	pheader->mTimerStatus = TIMER_START;
     6cc:	2201      	movs	r2, #1
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     6ce:	24c0      	movs	r4, #192	; 0xc0
     6d0:	721a      	strb	r2, [r3, #8]
	pheader->mTimerValue = 0;
     6d2:	6019      	str	r1, [r3, #0]

void SYS_TimerInit()
{
	//initial timer lists
	pheader = &header_Timer;
	pheader->pNextTimer = NULL;
     6d4:	6119      	str	r1, [r3, #16]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     6d6:	4a0a      	ldr	r2, [pc, #40]	; (700 <SYS_TimerInit+0x42>)
     6d8:	4b0a      	ldr	r3, [pc, #40]	; (704 <SYS_TimerInit+0x46>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     6da:	480b      	ldr	r0, [pc, #44]	; (708 <SYS_TimerInit+0x4a>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     6dc:	6053      	str	r3, [r2, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     6de:	6a03      	ldr	r3, [r0, #32]
     6e0:	0624      	lsls	r4, r4, #24
     6e2:	021b      	lsls	r3, r3, #8
     6e4:	0a1b      	lsrs	r3, r3, #8
     6e6:	4323      	orrs	r3, r4
     6e8:	6203      	str	r3, [r0, #32]
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     6ea:	2307      	movs	r3, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
     6ec:	6091      	str	r1, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     6ee:	6013      	str	r3, [r2, #0]
	pheader->pfExpireCb = SYS_TimerExpireDefaultHandle;
	pheader->mTimerStatus = TIMER_START;
	pheader->mTimerValue = 0;

	SysTick_Config(SYSTEM_CLOCK/1000); //each  systick interrupt is 1ms
}
     6f0:	bd10      	pop	{r4, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	10010e50 	.word	0x10010e50
     6f8:	10010e4c 	.word	0x10010e4c
     6fc:	000006bd 	.word	0x000006bd
     700:	e000e010 	.word	0xe000e010
     704:	00005dbf 	.word	0x00005dbf
     708:	e000ed00 	.word	0xe000ed00

0000070c <SYS_SetTimer>:


//union is 10ms
bool SYS_SetTimer(SYS_TIMER_TYPE *pTimer, int tick,TIMER_TYPE isSingle,Timer_Expire_CB pfExpire_CB)
{
     70c:	b570      	push	{r4, r5, r6, lr}
     70e:	1e04      	subs	r4, r0, #0
	SYS_TIMER_TYPE *pTemp;
	if(pTimer == NULL)
     710:	d01c      	beq.n	74c <SYS_SetTimer+0x40>
	{
		return false;
	}
	
	if (pfExpire_CB == NULL)
     712:	2b00      	cmp	r3, #0
     714:	d102      	bne.n	71c <SYS_SetTimer+0x10>
	{
		pTimer->pfExpireCb = SYS_TimerExpireDefaultHandle;
     716:	4b0e      	ldr	r3, [pc, #56]	; (750 <SYS_SetTimer+0x44>)
     718:	60c3      	str	r3, [r0, #12]
     71a:	e000      	b.n	71e <SYS_SetTimer+0x12>
	}
	else
	{
		pTimer->pfExpireCb = pfExpire_CB;
     71c:	60c3      	str	r3, [r0, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     71e:	b672      	cpsid	i
	}
	OS_ENTER_CRITICAL();
	pTimer->mTick = tick;
	pTimer->mTimerValue = sys_tick_count+tick;
	pTimer->mTimerStatus = TIMER_START;
     720:	2501      	movs	r5, #1
	{
		pTimer->pfExpireCb = pfExpire_CB;
	}
	OS_ENTER_CRITICAL();
	pTimer->mTick = tick;
	pTimer->mTimerValue = sys_tick_count+tick;
     722:	4b0c      	ldr	r3, [pc, #48]	; (754 <SYS_SetTimer+0x48>)
	else
	{
		pTimer->pfExpireCb = pfExpire_CB;
	}
	OS_ENTER_CRITICAL();
	pTimer->mTick = tick;
     724:	6061      	str	r1, [r4, #4]
	pTimer->mTimerValue = sys_tick_count+tick;
     726:	681b      	ldr	r3, [r3, #0]
	pTimer->mTimerStatus = TIMER_START;
     728:	7225      	strb	r5, [r4, #8]
	{
		pTimer->pfExpireCb = pfExpire_CB;
	}
	OS_ENTER_CRITICAL();
	pTimer->mTick = tick;
	pTimer->mTimerValue = sys_tick_count+tick;
     72a:	1859      	adds	r1, r3, r1
     72c:	6021      	str	r1, [r4, #0]
	pTimer->mTimerStatus = TIMER_START;
	pTimer->mIsCycle = isSingle;
     72e:	7262      	strb	r2, [r4, #9]

	pTimer->cbParams = (int32_t)pTimer;
     730:	6164      	str	r4, [r4, #20]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     732:	b662      	cpsie	i
	OS_EXIT_CRITICAL();
	if (SYS_TimerisExist(pTimer))
     734:	0020      	movs	r0, r4
     736:	f000 f811 	bl	75c <SYS_TimerisExist>
     73a:	2800      	cmp	r0, #0
     73c:	d106      	bne.n	74c <SYS_SetTimer+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     73e:	b672      	cpsid	i
		//printf("timer exised and set timer success\r\n");
		return true;
	}
	OS_ENTER_CRITICAL();
	//insert to list
	pTemp = pheader;
     740:	4b05      	ldr	r3, [pc, #20]	; (758 <SYS_SetTimer+0x4c>)
     742:	681a      	ldr	r2, [r3, #0]
	pheader = pTimer;
     744:	601c      	str	r4, [r3, #0]
		//printf("timer exised and set timer success\r\n");
		return true;
	}
	OS_ENTER_CRITICAL();
	//insert to list
	pTemp = pheader;
     746:	6122      	str	r2, [r4, #16]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     748:	b662      	cpsie	i
	pheader = pTimer;
	pheader->pNextTimer = pTemp;
	OS_EXIT_CRITICAL();
	//printf("set timer success\n");
	//YC_LOG_INFO("set timer %d \r\n",pTimer->cbParams);
	return true;
     74a:	0028      	movs	r0, r5
}
     74c:	bd70      	pop	{r4, r5, r6, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006bd 	.word	0x000006bd
     754:	10010e48 	.word	0x10010e48
     758:	10010e4c 	.word	0x10010e4c

0000075c <SYS_TimerisExist>:

bool SYS_TimerisExist(SYS_TIMER_TYPE *pTimer)
{
     75c:	1e01      	subs	r1, r0, #0
	SYS_TIMER_TYPE *pTemp;
	if (pTimer == NULL)
     75e:	d00b      	beq.n	778 <SYS_TimerisExist+0x1c>
	{
		return false;
	}
	for(pTemp = pheader; pTemp->pNextTimer != NULL; pTemp = pTemp->pNextTimer)
     760:	4b06      	ldr	r3, [pc, #24]	; (77c <SYS_TimerisExist+0x20>)
     762:	681a      	ldr	r2, [r3, #0]
     764:	6913      	ldr	r3, [r2, #16]
     766:	2b00      	cmp	r3, #0
     768:	d003      	beq.n	772 <SYS_TimerisExist+0x16>
	{
		if (pTimer == pTemp)
     76a:	428a      	cmp	r2, r1
     76c:	d003      	beq.n	776 <SYS_TimerisExist+0x1a>
     76e:	001a      	movs	r2, r3
     770:	e7f8      	b.n	764 <SYS_TimerisExist+0x8>
bool SYS_TimerisExist(SYS_TIMER_TYPE *pTimer)
{
	SYS_TIMER_TYPE *pTemp;
	if (pTimer == NULL)
	{
		return false;
     772:	0018      	movs	r0, r3
     774:	e000      	b.n	778 <SYS_TimerisExist+0x1c>
	}
	for(pTemp = pheader; pTemp->pNextTimer != NULL; pTemp = pTemp->pNextTimer)
	{
		if (pTimer == pTemp)
		{
			return true;
     776:	2001      	movs	r0, #1
		}
	}
	return false;
}
     778:	4770      	bx	lr
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	10010e4c 	.word	0x10010e4c

00000780 <SYS_ResetTimer>:


bool SYS_ResetTimer(SYS_TIMER_TYPE *pTimer)
{
     780:	1e01      	subs	r1, r0, #0
	SYS_TIMER_TYPE *pTemp;
	if (pTimer == NULL)
     782:	d010      	beq.n	7a6 <SYS_ResetTimer+0x26>
	{
		return false;
	}
	for(pTemp = pheader; pTemp->pNextTimer != NULL; pTemp = pTemp->pNextTimer)
     784:	4b08      	ldr	r3, [pc, #32]	; (7a8 <SYS_ResetTimer+0x28>)
     786:	681a      	ldr	r2, [r3, #0]
     788:	6913      	ldr	r3, [r2, #16]
     78a:	2b00      	cmp	r3, #0
     78c:	d00a      	beq.n	7a4 <SYS_ResetTimer+0x24>
	{
		if (pTimer == pTemp)
     78e:	428a      	cmp	r2, r1
     790:	d106      	bne.n	7a0 <SYS_ResetTimer+0x20>
		{
			pTimer->mTimerValue = sys_tick_count+(pTimer->mTick);
     792:	4b06      	ldr	r3, [pc, #24]	; (7ac <SYS_ResetTimer+0x2c>)
     794:	6851      	ldr	r1, [r2, #4]
     796:	681b      	ldr	r3, [r3, #0]
			return true;
     798:	2001      	movs	r0, #1
	}
	for(pTemp = pheader; pTemp->pNextTimer != NULL; pTemp = pTemp->pNextTimer)
	{
		if (pTimer == pTemp)
		{
			pTimer->mTimerValue = sys_tick_count+(pTimer->mTick);
     79a:	18cb      	adds	r3, r1, r3
     79c:	6013      	str	r3, [r2, #0]
			return true;
     79e:	e002      	b.n	7a6 <SYS_ResetTimer+0x26>
     7a0:	001a      	movs	r2, r3
     7a2:	e7f1      	b.n	788 <SYS_ResetTimer+0x8>
bool SYS_ResetTimer(SYS_TIMER_TYPE *pTimer)
{
	SYS_TIMER_TYPE *pTemp;
	if (pTimer == NULL)
	{
		return false;
     7a4:	0018      	movs	r0, r3
			pTimer->mTimerValue = sys_tick_count+(pTimer->mTick);
			return true;
		}
	}
	return false;
}
     7a6:	4770      	bx	lr
     7a8:	10010e4c 	.word	0x10010e4c
     7ac:	10010e48 	.word	0x10010e48

000007b0 <SYS_TimerTest>:
	for (pTimer = pheader; pTimer->pNextTimer != NULL; pTimer = pTimer->pNextTimer)
	{
		i++;
	}
	//YC_LOG_INFO("timer count %d \r\n",i);
}
     7b0:	4770      	bx	lr

000007b2 <SYS_timerPolling>:

void SYS_timerPolling()
{
     7b2:	b510      	push	{r4, lr}
	SYS_TIMER_TYPE *pTimer;
	
	if (sys_Timer_Check_Flag)
     7b4:	4b11      	ldr	r3, [pc, #68]	; (7fc <SYS_timerPolling+0x4a>)
     7b6:	781a      	ldrb	r2, [r3, #0]
     7b8:	2a00      	cmp	r2, #0
     7ba:	d01d      	beq.n	7f8 <SYS_timerPolling+0x46>
	{
		sys_Timer_Check_Flag = false;
     7bc:	2200      	movs	r2, #0
     7be:	701a      	strb	r2, [r3, #0]
		//SYS_TimerTest();
	//	printf("2\n");
		for (pTimer = pheader; pTimer->pNextTimer != NULL; pTimer = pTimer->pNextTimer)
     7c0:	4b0f      	ldr	r3, [pc, #60]	; (800 <SYS_timerPolling+0x4e>)
     7c2:	681c      	ldr	r4, [r3, #0]
     7c4:	6923      	ldr	r3, [r4, #16]
     7c6:	2b00      	cmp	r3, #0
     7c8:	d016      	beq.n	7f8 <SYS_timerPolling+0x46>
		{
	//		printf("3\n");
			if (pTimer->mTimerStatus == TIMER_START)
     7ca:	7a23      	ldrb	r3, [r4, #8]
     7cc:	2b01      	cmp	r3, #1
     7ce:	d111      	bne.n	7f4 <SYS_timerPolling+0x42>
			{
		//		printf("sys_tick_count = %d\n",sys_tick_count);
		//		printf("pTimer->mTimerValue = %d\n",pTimer->mTimerValue);
		//		printf("timer %d in\r\n",pTimer->cbParams);
				if (pTimer->mTimerValue <= sys_tick_count)
     7d0:	4b0c      	ldr	r3, [pc, #48]	; (804 <SYS_timerPolling+0x52>)
     7d2:	6822      	ldr	r2, [r4, #0]
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	429a      	cmp	r2, r3
     7d8:	d80c      	bhi.n	7f4 <SYS_timerPolling+0x42>
				{
		//			printf("5\n");
					if (pTimer->mIsCycle == TIMER_SINGLE)
     7da:	7a62      	ldrb	r2, [r4, #9]
     7dc:	2a00      	cmp	r2, #0
     7de:	d103      	bne.n	7e8 <SYS_timerPolling+0x36>
					{
				//		printf("timer release %d in\r\n",pTimer->cbParams);
						SYS_ReleaseTimer(pTimer);
     7e0:	0020      	movs	r0, r4
     7e2:	f000 f811 	bl	808 <SYS_ReleaseTimer>
     7e6:	e002      	b.n	7ee <SYS_timerPolling+0x3c>
					}
					else
					{					
				//		printf("timer cycle in\r\n");
				//		printf("timer release %d in\r\n",pTimer->cbParams);
						pTimer->mTimerValue = sys_tick_count+(pTimer->mTick);
     7e8:	6862      	ldr	r2, [r4, #4]
     7ea:	18d3      	adds	r3, r2, r3
     7ec:	6023      	str	r3, [r4, #0]
					}
			//		printf("6\n");
					pTimer->pfExpireCb(pTimer->cbParams);
     7ee:	6960      	ldr	r0, [r4, #20]
     7f0:	68e3      	ldr	r3, [r4, #12]
     7f2:	4798      	blx	r3
	if (sys_Timer_Check_Flag)
	{
		sys_Timer_Check_Flag = false;
		//SYS_TimerTest();
	//	printf("2\n");
		for (pTimer = pheader; pTimer->pNextTimer != NULL; pTimer = pTimer->pNextTimer)
     7f4:	6924      	ldr	r4, [r4, #16]
     7f6:	e7e5      	b.n	7c4 <SYS_timerPolling+0x12>
					pTimer->pfExpireCb(pTimer->cbParams);
				}
			}
		}
	}
}
     7f8:	bd10      	pop	{r4, pc}
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	10010e68 	.word	0x10010e68
     800:	10010e4c 	.word	0x10010e4c
     804:	10010e48 	.word	0x10010e48

00000808 <SYS_ReleaseTimer>:

bool SYS_ReleaseTimer(SYS_TIMER_TYPE *pTimer)
{
     808:	b510      	push	{r4, lr}
     80a:	1e01      	subs	r1, r0, #0
	SYS_TIMER_TYPE *pTemp, *pPre;
	if (pTimer == NULL)
     80c:	d01a      	beq.n	844 <SYS_ReleaseTimer+0x3c>
	{
		return false;
	}

	if (pTimer == &header_Timer)
     80e:	4b0e      	ldr	r3, [pc, #56]	; (848 <SYS_ReleaseTimer+0x40>)
bool SYS_ReleaseTimer(SYS_TIMER_TYPE *pTimer)
{
	SYS_TIMER_TYPE *pTemp, *pPre;
	if (pTimer == NULL)
	{
		return false;
     810:	2000      	movs	r0, #0
	}

	if (pTimer == &header_Timer)
     812:	4299      	cmp	r1, r3
     814:	d016      	beq.n	844 <SYS_ReleaseTimer+0x3c>
	{
		return false;
	}

	for(pTemp = pPre = pheader; pTemp->pNextTimer != NULL; pPre = pTemp,pTemp = pTemp->pNextTimer)
     816:	4b0d      	ldr	r3, [pc, #52]	; (84c <SYS_ReleaseTimer+0x44>)
     818:	681a      	ldr	r2, [r3, #0]
     81a:	0018      	movs	r0, r3
     81c:	0014      	movs	r4, r2
     81e:	6913      	ldr	r3, [r2, #16]
     820:	2b00      	cmp	r3, #0
     822:	d00e      	beq.n	842 <SYS_ReleaseTimer+0x3a>
	{
		if (pTimer == pTemp)
     824:	428a      	cmp	r2, r1
     826:	d109      	bne.n	83c <SYS_ReleaseTimer+0x34>
		{
			pTemp->mTimerStatus = TIMER_STOP;
     828:	2100      	movs	r1, #0
     82a:	7211      	strb	r1, [r2, #8]
			if (pPre == pTemp) //delete the first one element
     82c:	4294      	cmp	r4, r2
     82e:	d102      	bne.n	836 <SYS_ReleaseTimer+0x2e>
			{
				pheader = pTemp->pNextTimer;
     830:	6003      	str	r3, [r0, #0]
			{
				pPre->pNextTimer = pTemp->pNextTimer;
			}

			//YC_LOG_INFO("release timer %d,%d \r\n",pPre->cbParams,pTimer->cbParams);
			return true;
     832:	2001      	movs	r0, #1
     834:	e006      	b.n	844 <SYS_ReleaseTimer+0x3c>
			{
				pheader = pTemp->pNextTimer;
			}
			else
			{
				pPre->pNextTimer = pTemp->pNextTimer;
     836:	6123      	str	r3, [r4, #16]
			}

			//YC_LOG_INFO("release timer %d,%d \r\n",pPre->cbParams,pTimer->cbParams);
			return true;
     838:	2001      	movs	r0, #1
     83a:	e003      	b.n	844 <SYS_ReleaseTimer+0x3c>
     83c:	0014      	movs	r4, r2
     83e:	001a      	movs	r2, r3
     840:	e7ed      	b.n	81e <SYS_ReleaseTimer+0x16>
bool SYS_ReleaseTimer(SYS_TIMER_TYPE *pTimer)
{
	SYS_TIMER_TYPE *pTemp, *pPre;
	if (pTimer == NULL)
	{
		return false;
     842:	0018      	movs	r0, r3
			//YC_LOG_INFO("release timer %d,%d \r\n",pPre->cbParams,pTimer->cbParams);
			return true;
		}
	}
	return false;
}
     844:	bd10      	pop	{r4, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	10010e50 	.word	0x10010e50
     84c:	10010e4c 	.word	0x10010e4c

00000850 <SYS_ReleaseAllTimer>:
void SYS_ReleaseAllTimer()
{
	SYS_TIMER_TYPE *pTemp;
	for(pTemp = pheader; pTemp->pNextTimer != NULL; pTemp = pTemp->pNextTimer)
	{
		pTemp->mTimerStatus = TIMER_STOP;
     850:	2000      	movs	r0, #0
}

void SYS_ReleaseAllTimer()
{
	SYS_TIMER_TYPE *pTemp;
	for(pTemp = pheader; pTemp->pNextTimer != NULL; pTemp = pTemp->pNextTimer)
     852:	4b05      	ldr	r3, [pc, #20]	; (868 <SYS_ReleaseAllTimer+0x18>)
     854:	681a      	ldr	r2, [r3, #0]
     856:	6911      	ldr	r1, [r2, #16]
     858:	2900      	cmp	r1, #0
     85a:	d002      	beq.n	862 <SYS_ReleaseAllTimer+0x12>
	{
		pTemp->mTimerStatus = TIMER_STOP;
     85c:	7210      	strb	r0, [r2, #8]
     85e:	000a      	movs	r2, r1
     860:	e7f9      	b.n	856 <SYS_ReleaseAllTimer+0x6>
	}
	pheader = &header_Timer;
     862:	4a02      	ldr	r2, [pc, #8]	; (86c <SYS_ReleaseAllTimer+0x1c>)
     864:	601a      	str	r2, [r3, #0]
}
     866:	4770      	bx	lr
     868:	10010e4c 	.word	0x10010e4c
     86c:	10010e50 	.word	0x10010e50

00000870 <SYStick_handle>:

void SYStick_handle()
{
	if(++tmpCnt%10 == 0){//each	systick interrupt is 10ms
     870:	4b08      	ldr	r3, [pc, #32]	; (894 <SYStick_handle+0x24>)
	}
	pheader = &header_Timer;
}

void SYStick_handle()
{
     872:	b510      	push	{r4, lr}
	if(++tmpCnt%10 == 0){//each	systick interrupt is 10ms
     874:	681a      	ldr	r2, [r3, #0]
     876:	210a      	movs	r1, #10
     878:	1c50      	adds	r0, r2, #1
     87a:	6018      	str	r0, [r3, #0]
     87c:	f000 f9d7 	bl	c2e <__aeabi_uidiv>
     880:	2900      	cmp	r1, #0
     882:	d106      	bne.n	892 <SYStick_handle+0x22>
		sys_tick_count++; //10
     884:	4a04      	ldr	r2, [pc, #16]	; (898 <SYStick_handle+0x28>)
     886:	6813      	ldr	r3, [r2, #0]
     888:	3301      	adds	r3, #1
     88a:	6013      	str	r3, [r2, #0]
		sys_Timer_Check_Flag = true;
     88c:	2201      	movs	r2, #1
     88e:	4b03      	ldr	r3, [pc, #12]	; (89c <SYStick_handle+0x2c>)
     890:	701a      	strb	r2, [r3, #0]
	}
}
     892:	bd10      	pop	{r4, pc}
     894:	10010d44 	.word	0x10010d44
     898:	10010e48 	.word	0x10010e48
     89c:	10010e68 	.word	0x10010e68

000008a0 <_get_recved_len>:
const uint8_t frmHead[] = {0x3a, 0xff};
static proto_t proto;

static __INLINE uint8_t _get_recved_len(void)
{
	return proto.head>=proto.tail?
     8a0:	4a06      	ldr	r2, [pc, #24]	; (8bc <_get_recved_len+0x1c>)
     8a2:	3280      	adds	r2, #128	; 0x80
     8a4:	7813      	ldrb	r3, [r2, #0]
     8a6:	8810      	ldrh	r0, [r2, #0]
     8a8:	065b      	lsls	r3, r3, #25
     8aa:	0480      	lsls	r0, r0, #18
     8ac:	0e5b      	lsrs	r3, r3, #25
     8ae:	0e40      	lsrs	r0, r0, #25
     8b0:	4283      	cmp	r3, r0
     8b2:	da00      	bge.n	8b6 <_get_recved_len+0x16>
     8b4:	3b80      	subs	r3, #128	; 0x80
     8b6:	1a18      	subs	r0, r3, r0
     8b8:	b2c0      	uxtb	r0, r0
			proto.head-proto.tail:
			BUFF_SIZE - proto.tail + proto.head;
}
     8ba:	4770      	bx	lr
     8bc:	10010d48 	.word	0x10010d48

000008c0 <_delay_timer_cb>:
static __INLINE void _clear_buff()
{
	proto.tail = 0;
     8c0:	4b04      	ldr	r3, [pc, #16]	; (8d4 <_delay_timer_cb+0x14>)
     8c2:	4a05      	ldr	r2, [pc, #20]	; (8d8 <_delay_timer_cb+0x18>)
     8c4:	3380      	adds	r3, #128	; 0x80
     8c6:	8819      	ldrh	r1, [r3, #0]
     8c8:	400a      	ands	r2, r1
     8ca:	801a      	strh	r2, [r3, #0]
	proto.head = 0; 
     8cc:	2200      	movs	r2, #0
     8ce:	701a      	strb	r2, [r3, #0]
{
#ifndef RELEASE
	printf("clear ring buff");
#endif
	_clear_buff();
}
     8d0:	4770      	bx	lr
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	10010d48 	.word	0x10010d48
     8d8:	ffffc07f 	.word	0xffffc07f

000008dc <protocol_init>:
	
}

void protocol_init(prorocol_rln_cb rcb, prorocol_send_cb scb)
{
	proto.rCb = rcb;
     8dc:	4b07      	ldr	r3, [pc, #28]	; (8fc <protocol_init+0x20>)
     8de:	001a      	movs	r2, r3
     8e0:	3208      	adds	r2, #8
     8e2:	67d0      	str	r0, [r2, #124]	; 0x7c
	proto.sCb = scb;
     8e4:	001a      	movs	r2, r3
     8e6:	3288      	adds	r2, #136	; 0x88
     8e8:	6011      	str	r1, [r2, #0]
			proto.head-proto.tail:
			BUFF_SIZE - proto.tail + proto.head;
}
static __INLINE void _clear_buff()
{
	proto.tail = 0;
     8ea:	3380      	adds	r3, #128	; 0x80
     8ec:	8819      	ldrh	r1, [r3, #0]
     8ee:	4a04      	ldr	r2, [pc, #16]	; (900 <protocol_init+0x24>)
     8f0:	400a      	ands	r2, r1
     8f2:	801a      	strh	r2, [r3, #0]
	proto.head = 0; 
     8f4:	2200      	movs	r2, #0
     8f6:	701a      	strb	r2, [r3, #0]
void protocol_init(prorocol_rln_cb rcb, prorocol_send_cb scb)
{
	proto.rCb = rcb;
	proto.sCb = scb;
	_clear_buff();
}
     8f8:	4770      	bx	lr
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	10010d48 	.word	0x10010d48
     900:	ffffc07f 	.word	0xffffc07f

00000904 <protocol_send>:

void protocol_send(const uint8_t* data, uint8_t len)
{
     904:	b5f0      	push	{r4, r5, r6, r7, lr}
     906:	b085      	sub	sp, #20
     908:	466b      	mov	r3, sp
     90a:	1ddc      	adds	r4, r3, #7
     90c:	71d9      	strb	r1, [r3, #7]
	if(proto.sCb == NULL)
     90e:	4b14      	ldr	r3, [pc, #80]	; (960 <protocol_send+0x5c>)
	proto.sCb = scb;
	_clear_buff();
}

void protocol_send(const uint8_t* data, uint8_t len)
{
     910:	0006      	movs	r6, r0
	if(proto.sCb == NULL)
     912:	001d      	movs	r5, r3
     914:	3588      	adds	r5, #136	; 0x88
     916:	9300      	str	r3, [sp, #0]
     918:	682b      	ldr	r3, [r5, #0]
     91a:	2b00      	cmp	r3, #0
     91c:	d01d      	beq.n	95a <protocol_send+0x56>
		return;
	//calc check sum
	uint8_t _sum = bc_sys_check_sum((uint8_t *)data, len)+len;
     91e:	b2c9      	uxtb	r1, r1
     920:	f000 f92a 	bl	b78 <bc_sys_check_sum>
     924:	270f      	movs	r7, #15
     926:	7823      	ldrb	r3, [r4, #0]
     928:	446f      	add	r7, sp
     92a:	18c0      	adds	r0, r0, r3
     92c:	7038      	strb	r0, [r7, #0]
	//send head
	proto.sCb(frmHead, sizeof(frmHead));
     92e:	2102      	movs	r1, #2
     930:	480c      	ldr	r0, [pc, #48]	; (964 <protocol_send+0x60>)
     932:	682b      	ldr	r3, [r5, #0]
     934:	4798      	blx	r3
	//send len
	proto.sCb(&len, sizeof(len));
     936:	2101      	movs	r1, #1
     938:	0020      	movs	r0, r4
     93a:	682b      	ldr	r3, [r5, #0]
     93c:	4798      	blx	r3
	//send data
	if(data != NULL&& len != 0)
     93e:	2e00      	cmp	r6, #0
     940:	d005      	beq.n	94e <protocol_send+0x4a>
     942:	7821      	ldrb	r1, [r4, #0]
     944:	2900      	cmp	r1, #0
     946:	d002      	beq.n	94e <protocol_send+0x4a>
		proto.sCb(data, len);
     948:	682b      	ldr	r3, [r5, #0]
     94a:	0030      	movs	r0, r6
     94c:	4798      	blx	r3
	//send check sum
	proto.sCb(&_sum, sizeof(_sum));
     94e:	9b00      	ldr	r3, [sp, #0]
     950:	2101      	movs	r1, #1
     952:	3388      	adds	r3, #136	; 0x88
     954:	681b      	ldr	r3, [r3, #0]
     956:	0038      	movs	r0, r7
     958:	4798      	blx	r3
}
     95a:	b005      	add	sp, #20
     95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	10010d48 	.word	0x10010d48
     964:	000027a8 	.word	0x000027a8

00000968 <protocol_recv>:

void protocol_recv(uint8_t* data, uint8_t len)
{
	if(proto.rCb == NULL || data == NULL || len == 0)
     968:	4b5c      	ldr	r3, [pc, #368]	; (adc <protocol_recv+0x174>)
	//send check sum
	proto.sCb(&_sum, sizeof(_sum));
}

void protocol_recv(uint8_t* data, uint8_t len)
{
     96a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(proto.rCb == NULL || data == NULL || len == 0)
     96c:	001a      	movs	r2, r3
     96e:	3208      	adds	r2, #8
     970:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
	//send check sum
	proto.sCb(&_sum, sizeof(_sum));
}

void protocol_recv(uint8_t* data, uint8_t len)
{
     972:	0004      	movs	r4, r0
     974:	9101      	str	r1, [sp, #4]
     976:	9300      	str	r3, [sp, #0]
	if(proto.rCb == NULL || data == NULL || len == 0)
     978:	2a00      	cmp	r2, #0
     97a:	d100      	bne.n	97e <protocol_recv+0x16>
     97c:	e0ac      	b.n	ad8 <protocol_recv+0x170>
     97e:	2800      	cmp	r0, #0
     980:	d100      	bne.n	984 <protocol_recv+0x1c>
     982:	e0a9      	b.n	ad8 <protocol_recv+0x170>
     984:	2900      	cmp	r1, #0
     986:	d100      	bne.n	98a <protocol_recv+0x22>
     988:	e0a6      	b.n	ad8 <protocol_recv+0x170>
		return;
	SYS_SetTimer(&proto.dTmr, FRAME_MIN_TIME, TIMER_SINGLE, _delay_timer_cb);
     98a:	9800      	ldr	r0, [sp, #0]
     98c:	4b54      	ldr	r3, [pc, #336]	; (ae0 <protocol_recv+0x178>)
     98e:	2200      	movs	r2, #0
     990:	210a      	movs	r1, #10
     992:	308c      	adds	r0, #140	; 0x8c
     994:	f7ff feba 	bl	70c <SYS_SetTimer>
}
static __INLINE void _set_byte(uint8_t data)
{
	proto.buff[proto.head] = data;
	if(++proto.head == proto.tail){
		proto.tail++;
     998:	4b52      	ldr	r3, [pc, #328]	; (ae4 <protocol_recv+0x17c>)
void protocol_recv(uint8_t* data, uint8_t len)
{
	if(proto.rCb == NULL || data == NULL || len == 0)
		return;
	SYS_SetTimer(&proto.dTmr, FRAME_MIN_TIME, TIMER_SINGLE, _delay_timer_cb);
	for(int i = 0; i < len; ++i){
     99a:	0022      	movs	r2, r4
	return proto.buff[proto.tail++];
}
static __INLINE void _set_byte(uint8_t data)
{
	proto.buff[proto.head] = data;
	if(++proto.head == proto.tail){
     99c:	267f      	movs	r6, #127	; 0x7f
		proto.tail++;
     99e:	469c      	mov	ip, r3
{
	return proto.buff[proto.tail++];
}
static __INLINE void _set_byte(uint8_t data)
{
	proto.buff[proto.head] = data;
     9a0:	9900      	ldr	r1, [sp, #0]
     9a2:	3180      	adds	r1, #128	; 0x80
void protocol_recv(uint8_t* data, uint8_t len)
{
	if(proto.rCb == NULL || data == NULL || len == 0)
		return;
	SYS_SetTimer(&proto.dTmr, FRAME_MIN_TIME, TIMER_SINGLE, _delay_timer_cb);
	for(int i = 0; i < len; ++i){
     9a4:	9801      	ldr	r0, [sp, #4]
     9a6:	1b13      	subs	r3, r2, r4
     9a8:	4298      	cmp	r0, r3
     9aa:	dd18      	ble.n	9de <protocol_recv+0x76>
{
	return proto.buff[proto.tail++];
}
static __INLINE void _set_byte(uint8_t data)
{
	proto.buff[proto.head] = data;
     9ac:	7808      	ldrb	r0, [r1, #0]
{
	if(proto.rCb == NULL || data == NULL || len == 0)
		return;
	SYS_SetTimer(&proto.dTmr, FRAME_MIN_TIME, TIMER_SINGLE, _delay_timer_cb);
	for(int i = 0; i < len; ++i){
		_set_byte(data[i]);
     9ae:	7815      	ldrb	r5, [r2, #0]
{
	return proto.buff[proto.tail++];
}
static __INLINE void _set_byte(uint8_t data)
{
	proto.buff[proto.head] = data;
     9b0:	0643      	lsls	r3, r0, #25
     9b2:	4f4a      	ldr	r7, [pc, #296]	; (adc <protocol_recv+0x174>)
     9b4:	0e5b      	lsrs	r3, r3, #25
     9b6:	54fd      	strb	r5, [r7, r3]
	if(++proto.head == proto.tail){
     9b8:	1c5d      	adds	r5, r3, #1
     9ba:	4035      	ands	r5, r6
     9bc:	43b0      	bics	r0, r6
     9be:	4328      	orrs	r0, r5
     9c0:	7008      	strb	r0, [r1, #0]
     9c2:	8808      	ldrh	r0, [r1, #0]
     9c4:	0487      	lsls	r7, r0, #18
     9c6:	0e7f      	lsrs	r7, r7, #25
     9c8:	42af      	cmp	r7, r5
     9ca:	d106      	bne.n	9da <protocol_recv+0x72>
		proto.tail++;
     9cc:	4665      	mov	r5, ip
     9ce:	3302      	adds	r3, #2
     9d0:	4033      	ands	r3, r6
     9d2:	01db      	lsls	r3, r3, #7
     9d4:	4028      	ands	r0, r5
     9d6:	4318      	orrs	r0, r3
     9d8:	8008      	strh	r0, [r1, #0]
     9da:	3201      	adds	r2, #1
     9dc:	e7e2      	b.n	9a4 <protocol_recv+0x3c>
		return;
	SYS_SetTimer(&proto.dTmr, FRAME_MIN_TIME, TIMER_SINGLE, _delay_timer_cb);
	for(int i = 0; i < len; ++i){
		_set_byte(data[i]);
	}
	if(_get_recved_len() < FRAME_MIN_SIZE){
     9de:	f7ff ff5f 	bl	8a0 <_get_recved_len>
     9e2:	2803      	cmp	r0, #3
     9e4:	d978      	bls.n	ad8 <protocol_recv+0x170>
	proto.tail+=idx;
}

static __INLINE uint8_t _show_byte(uint8_t idx)
{
	return proto.buff[(proto.tail+idx)&SIZE_MASK];
     9e6:	277f      	movs	r7, #127	; 0x7f
	_clear_buff();
}

static void protocol_do(void)
{
	uint8_t _rLen = _get_recved_len();
     9e8:	f7ff ff5a 	bl	8a0 <_get_recved_len>
	printf("RECV LEN[%x]\r\n", _rLen);
#endif

	bool _found = true;
	//find head
	for(int j = 0; j < _rLen; ++j){
     9ec:	2800      	cmp	r0, #0
     9ee:	d073      	beq.n	ad8 <protocol_recv+0x170>
	proto.tail+=idx;
}

static __INLINE uint8_t _show_byte(uint8_t idx)
{
	return proto.buff[(proto.tail+idx)&SIZE_MASK];
     9f0:	4a3a      	ldr	r2, [pc, #232]	; (adc <protocol_recv+0x174>)
     9f2:	0013      	movs	r3, r2
     9f4:	3380      	adds	r3, #128	; 0x80
     9f6:	881b      	ldrh	r3, [r3, #0]
     9f8:	049b      	lsls	r3, r3, #18
     9fa:	0e5b      	lsrs	r3, r3, #25
#endif

	bool _found = true;
	//find head
	for(int j = 0; j < _rLen; ++j){
		for(int i = 0; i < sizeof(frmHead) && i+j<_rLen; ++i){
     9fc:	2801      	cmp	r0, #1
     9fe:	d004      	beq.n	a0a <protocol_recv+0xa2>
	proto.tail+=idx;
}

static __INLINE uint8_t _show_byte(uint8_t idx)
{
	return proto.buff[(proto.tail+idx)&SIZE_MASK];
     a00:	1c59      	adds	r1, r3, #1
     a02:	4039      	ands	r1, r7

	bool _found = true;
	//find head
	for(int j = 0; j < _rLen; ++j){
		for(int i = 0; i < sizeof(frmHead) && i+j<_rLen; ++i){
			if(frmHead[i] != _show_byte(i)){
     a04:	5c51      	ldrb	r1, [r2, r1]
     a06:	29ff      	cmp	r1, #255	; 0xff
     a08:	d166      	bne.n	ad8 <protocol_recv+0x170>
		_get_byte();
	}
#ifndef RELEASE
	printf("find head[%x]\r\n", _found);
#endif
	if(!_found)
     a0a:	5cd3      	ldrb	r3, [r2, r3]
     a0c:	2b3a      	cmp	r3, #58	; 0x3a
     a0e:	d163      	bne.n	ad8 <protocol_recv+0x170>
		return;

	//check min len
	if(_get_recved_len() < FRAME_MIN_SIZE){
     a10:	2803      	cmp	r0, #3
     a12:	d961      	bls.n	ad8 <protocol_recv+0x170>
	proto.tail+=idx;
}

static __INLINE uint8_t _show_byte(uint8_t idx)
{
	return proto.buff[(proto.tail+idx)&SIZE_MASK];
     a14:	4b31      	ldr	r3, [pc, #196]	; (adc <protocol_recv+0x174>)
     a16:	3380      	adds	r3, #128	; 0x80
     a18:	881e      	ldrh	r6, [r3, #0]
     a1a:	04b6      	lsls	r6, r6, #18
     a1c:	0e76      	lsrs	r6, r6, #25
     a1e:	1cb3      	adds	r3, r6, #2
     a20:	403b      	ands	r3, r7
     a22:	5cd4      	ldrb	r4, [r2, r3]
		printf("little than FRAME_MIN_SIZE\r\n");
#endif
		return;
	}
	//check all len
	if(_get_recved_len() < FRAME_MIN_SIZE+_show_byte(FRAME_LEN_POS)){
     a24:	1ce3      	adds	r3, r4, #3
     a26:	4298      	cmp	r0, r3
     a28:	dd56      	ble.n	ad8 <protocol_recv+0x170>
#endif
		return;
	}
	uint8_t _len = _show_byte(FRAME_LEN_POS);
	uint8_t* _data = NULL;
	if(_len){
     a2a:	2c00      	cmp	r4, #0
     a2c:	d005      	beq.n	a3a <protocol_recv+0xd2>
		_data = malloc(_len);
     a2e:	0020      	movs	r0, r4
     a30:	f000 f916 	bl	c60 <malloc>
     a34:	1e05      	subs	r5, r0, #0
		if(!_data){
     a36:	d101      	bne.n	a3c <protocol_recv+0xd4>
     a38:	e04e      	b.n	ad8 <protocol_recv+0x170>
		printf("little than FRAME SIZE\r\n");
#endif
		return;
	}
	uint8_t _len = _show_byte(FRAME_LEN_POS);
	uint8_t* _data = NULL;
     a3a:	0025      	movs	r5, r4
	}
}

static __INLINE void _updata_pos(uint8_t idx)
{
	proto.tail+=idx;
     a3c:	4827      	ldr	r0, [pc, #156]	; (adc <protocol_recv+0x174>)
     a3e:	4b29      	ldr	r3, [pc, #164]	; (ae4 <protocol_recv+0x17c>)
     a40:	3080      	adds	r0, #128	; 0x80
     a42:	8802      	ldrh	r2, [r0, #0]
     a44:	3603      	adds	r6, #3
     a46:	403e      	ands	r6, r7
     a48:	01f1      	lsls	r1, r6, #7
     a4a:	401a      	ands	r2, r3
     a4c:	430a      	orrs	r2, r1
     a4e:	8002      	strh	r2, [r0, #0]
     a50:	46b4      	mov	ip, r6
     a52:	0030      	movs	r0, r6
     a54:	002a      	movs	r2, r5
     a56:	2600      	movs	r6, #0
     a58:	9301      	str	r3, [sp, #4]
#endif
			return;
		}
	}
	_updata_pos(FRAME_DAT_POS);
	for(int i=0; i<_len; ++i){
     a5a:	1b51      	subs	r1, r2, r5
     a5c:	237f      	movs	r3, #127	; 0x7f
     a5e:	428c      	cmp	r4, r1
     a60:	dd08      	ble.n	a74 <protocol_recv+0x10c>
		_data[i] = _get_byte();
     a62:	491e      	ldr	r1, [pc, #120]	; (adc <protocol_recv+0x174>)
	proto.head = 0; 
}

static __INLINE uint8_t _get_byte()
{
	return proto.buff[proto.tail++];
     a64:	1c43      	adds	r3, r0, #1
			return;
		}
	}
	_updata_pos(FRAME_DAT_POS);
	for(int i=0; i<_len; ++i){
		_data[i] = _get_byte();
     a66:	5c09      	ldrb	r1, [r1, r0]
	proto.head = 0; 
}

static __INLINE uint8_t _get_byte()
{
	return proto.buff[proto.tail++];
     a68:	403b      	ands	r3, r7
			return;
		}
	}
	_updata_pos(FRAME_DAT_POS);
	for(int i=0; i<_len; ++i){
		_data[i] = _get_byte();
     a6a:	7011      	strb	r1, [r2, #0]
     a6c:	2601      	movs	r6, #1
     a6e:	3201      	adds	r2, #1
	proto.head = 0; 
}

static __INLINE uint8_t _get_byte()
{
	return proto.buff[proto.tail++];
     a70:	0018      	movs	r0, r3
     a72:	e7f2      	b.n	a5a <protocol_recv+0xf2>
     a74:	0022      	movs	r2, r4
     a76:	401a      	ands	r2, r3
     a78:	4462      	add	r2, ip
     a7a:	4013      	ands	r3, r2
     a7c:	2e00      	cmp	r6, #0
     a7e:	d007      	beq.n	a90 <protocol_recv+0x128>
     a80:	4a16      	ldr	r2, [pc, #88]	; (adc <protocol_recv+0x174>)
     a82:	01de      	lsls	r6, r3, #7
     a84:	3280      	adds	r2, #128	; 0x80
     a86:	8813      	ldrh	r3, [r2, #0]
     a88:	9901      	ldr	r1, [sp, #4]
     a8a:	400b      	ands	r3, r1
     a8c:	4333      	orrs	r3, r6
     a8e:	8013      	strh	r3, [r2, #0]
     a90:	9900      	ldr	r1, [sp, #0]
     a92:	3180      	adds	r1, #128	; 0x80
     a94:	880e      	ldrh	r6, [r1, #0]
     a96:	04b2      	lsls	r2, r6, #18
     a98:	0e52      	lsrs	r2, r2, #25
     a9a:	1c53      	adds	r3, r2, #1
     a9c:	403b      	ands	r3, r7
     a9e:	01d8      	lsls	r0, r3, #7
     aa0:	9b01      	ldr	r3, [sp, #4]
     aa2:	4033      	ands	r3, r6
     aa4:	4303      	orrs	r3, r0
     aa6:	800b      	strh	r3, [r1, #0]
	_updata_pos(FRAME_DAT_POS);
	for(int i=0; i<_len; ++i){
		_data[i] = _get_byte();
	}
	//check sum
	if(_get_byte() != bc_sys_check_sum(_data, _len)+_len){
     aa8:	9b00      	ldr	r3, [sp, #0]
     aaa:	0021      	movs	r1, r4
     aac:	0028      	movs	r0, r5
     aae:	5c9e      	ldrb	r6, [r3, r2]
     ab0:	f000 f862 	bl	b78 <bc_sys_check_sum>
     ab4:	1900      	adds	r0, r0, r4
     ab6:	4286      	cmp	r6, r0
     ab8:	d10e      	bne.n	ad8 <protocol_recv+0x170>
#ifndef RELEASE
		printf("check sum error\r\n");
#endif
		return;
	}
	proto.rCb(_data, _len);
     aba:	9b00      	ldr	r3, [sp, #0]
     abc:	0021      	movs	r1, r4
     abe:	3308      	adds	r3, #8
     ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     ac2:	0028      	movs	r0, r5
     ac4:	4798      	blx	r3
	if(_data){
     ac6:	2d00      	cmp	r5, #0
     ac8:	d002      	beq.n	ad0 <protocol_recv+0x168>
		free(_data);
     aca:	0028      	movs	r0, r5
     acc:	f000 f8d2 	bl	c74 <free>
	}
	if(_get_recved_len() >= FRAME_MIN_SIZE){
     ad0:	f7ff fee6 	bl	8a0 <_get_recved_len>
     ad4:	2803      	cmp	r0, #3
     ad6:	d887      	bhi.n	9e8 <protocol_recv+0x80>
	}
#ifndef RELEASE
	printf("recv and do\r\n");
#endif
	protocol_do();
}
     ad8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     ada:	46c0      	nop			; (mov r8, r8)
     adc:	10010d48 	.word	0x10010d48
     ae0:	000008c1 	.word	0x000008c1
     ae4:	ffffc07f 	.word	0xffffc07f

00000ae8 <_fstat>:
#include "bc62xx_ble.h"
//#include "Drv_debug.h"

int _fstat (int fd, struct stat *pStat)
{
	pStat->st_mode = S_IFCHR;
     ae8:	2380      	movs	r3, #128	; 0x80
     aea:	019b      	lsls	r3, r3, #6
	return 0;
}
     aec:	2000      	movs	r0, #0
#include "bc62xx_ble.h"
//#include "Drv_debug.h"

int _fstat (int fd, struct stat *pStat)
{
	pStat->st_mode = S_IFCHR;
     aee:	604b      	str	r3, [r1, #4]
	return 0;
}
     af0:	4770      	bx	lr

00000af2 <_close>:

int _close(int fd)
{
	return -1;
}
     af2:	2001      	movs	r0, #1
     af4:	4240      	negs	r0, r0
     af6:	4770      	bx	lr

00000af8 <_write>:

extern void UART_PutChar(char c);
int _write (int fd, char *ptr, int len)
{
     af8:	b570      	push	{r4, r5, r6, lr}
     afa:	000e      	movs	r6, r1
     afc:	0014      	movs	r4, r2
     afe:	000d      	movs	r5, r1
	int i = 0;

	if (fd > 2)
     b00:	2802      	cmp	r0, #2
     b02:	dc09      	bgt.n	b18 <_write+0x20>
		return -1;

	while(*ptr && (i < len))\
     b04:	7828      	ldrb	r0, [r5, #0]
     b06:	2800      	cmp	r0, #0
     b08:	d009      	beq.n	b1e <_write+0x26>
     b0a:	1bab      	subs	r3, r5, r6
     b0c:	429c      	cmp	r4, r3
     b0e:	dd06      	ble.n	b1e <_write+0x26>
	{
		UART_PutChar(*ptr);
     b10:	f7ff fdc8 	bl	6a4 <UART_PutChar>
		i++;
		ptr++;
     b14:	3501      	adds	r5, #1
     b16:	e7f5      	b.n	b04 <_write+0xc>
int _write (int fd, char *ptr, int len)
{
	int i = 0;

	if (fd > 2)
		return -1;
     b18:	2001      	movs	r0, #1
     b1a:	4240      	negs	r0, r0
     b1c:	e000      	b.n	b20 <_write+0x28>
     b1e:	0020      	movs	r0, r4
		i++;
		ptr++;
	}
   
 	return len;
}
     b20:	bd70      	pop	{r4, r5, r6, pc}

00000b22 <_isatty>:

int _isatty (int fd)
{
	return 1;
}
     b22:	2001      	movs	r0, #1
     b24:	4770      	bx	lr

00000b26 <_lseek>:

int _lseek(int fd, int offset, int fromwhere)
{
	return 0;
}
     b26:	2000      	movs	r0, #0
     b28:	4770      	bx	lr

00000b2a <_read>:

int _read (int fd, char *pBuffer, int size)
{
	return 0;
}
     b2a:	2000      	movs	r0, #0
     b2c:	4770      	bx	lr

00000b2e <_sbrk>:
caddr_t _sbrk(int increment)
{
	extern char end asm("end");
	register char *pStack asm("sp");
	static char *s_pHeapEnd;
	if (!s_pHeapEnd)
     b2e:	4b08      	ldr	r3, [pc, #32]	; (b50 <_sbrk+0x22>)
{
	return 0;
}

caddr_t _sbrk(int increment)
{
     b30:	0002      	movs	r2, r0
	extern char end asm("end");
	register char *pStack asm("sp");
	static char *s_pHeapEnd;
	if (!s_pHeapEnd)
     b32:	6819      	ldr	r1, [r3, #0]
     b34:	2900      	cmp	r1, #0
     b36:	d101      	bne.n	b3c <_sbrk+0xe>
		s_pHeapEnd = &end;
     b38:	4906      	ldr	r1, [pc, #24]	; (b54 <_sbrk+0x26>)
     b3a:	6019      	str	r1, [r3, #0]

	if (s_pHeapEnd + increment > pStack)
     b3c:	4669      	mov	r1, sp
     b3e:	6818      	ldr	r0, [r3, #0]
     b40:	1882      	adds	r2, r0, r2
     b42:	428a      	cmp	r2, r1
     b44:	d801      	bhi.n	b4a <_sbrk+0x1c>
		return (caddr_t)-1;

	char *pOldHeapEnd = s_pHeapEnd;
	s_pHeapEnd += increment;
     b46:	601a      	str	r2, [r3, #0]
	return (caddr_t)pOldHeapEnd;
     b48:	e001      	b.n	b4e <_sbrk+0x20>
	static char *s_pHeapEnd;
	if (!s_pHeapEnd)
		s_pHeapEnd = &end;

	if (s_pHeapEnd + increment > pStack)
		return (caddr_t)-1;
     b4a:	2001      	movs	r0, #1
     b4c:	4240      	negs	r0, r0

	char *pOldHeapEnd = s_pHeapEnd;
	s_pHeapEnd += increment;
	return (caddr_t)pOldHeapEnd;
}
     b4e:	4770      	bx	lr
     b50:	10010dec 	.word	0x10010dec
     b54:	10010e70 	.word	0x10010e70

00000b58 <_exit>:

void _exit(int status)
{
     b58:	e7fe      	b.n	b58 <_exit>

00000b5a <Default_Handler>:
	while(1);
}


void Default_Handler(void)
{
     b5a:	b510      	push	{r4, lr}
	printf("\r\n\r\nDefault_Handler\r\n\r\n");
     b5c:	4801      	ldr	r0, [pc, #4]	; (b64 <Default_Handler+0xa>)
     b5e:	f000 fb79 	bl	1254 <puts>
     b62:	e7fe      	b.n	b62 <Default_Handler+0x8>
     b64:	000027aa 	.word	0x000027aa

00000b68 <bc_sys_reset>:
 ****************************************************************************************
 */
uint32_t bc_sys_reset(void)
{
	//HWRITE(CORE_RESET, 1);
	HWRITE(CORE_RESET,0x03);
     b68:	2203      	movs	r2, #3
     b6a:	4b02      	ldr	r3, [pc, #8]	; (b74 <bc_sys_reset+0xc>)
	return 0;
}
     b6c:	2000      	movs	r0, #0
 ****************************************************************************************
 */
uint32_t bc_sys_reset(void)
{
	//HWRITE(CORE_RESET, 1);
	HWRITE(CORE_RESET,0x03);
     b6e:	701a      	strb	r2, [r3, #0]
	return 0;
}
     b70:	4770      	bx	lr
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	10008010 	.word	0x10008010

00000b78 <bc_sys_check_sum>:

uint8_t bc_sys_check_sum(uint8_t* data, int len)
{
	uint8_t crc = 0x00;/* init crc value*/
	if(data == NULL || len == 0){
		return crc;
     b78:	1e03      	subs	r3, r0, #0
}

uint8_t bc_sys_check_sum(uint8_t* data, int len)
{
	uint8_t crc = 0x00;/* init crc value*/
	if(data == NULL || len == 0){
     b7a:	d008      	beq.n	b8e <bc_sys_check_sum+0x16>
		return crc;
     b7c:	2300      	movs	r3, #0
}

uint8_t bc_sys_check_sum(uint8_t* data, int len)
{
	uint8_t crc = 0x00;/* init crc value*/
	if(data == NULL || len == 0){
     b7e:	4299      	cmp	r1, r3
     b80:	d005      	beq.n	b8e <bc_sys_check_sum+0x16>
		return crc;
	}
	do{
		crc += data[--len];
     b82:	3901      	subs	r1, #1
     b84:	5c42      	ldrb	r2, [r0, r1]
     b86:	189b      	adds	r3, r3, r2
     b88:	b2db      	uxtb	r3, r3
	}while(len);
     b8a:	2900      	cmp	r1, #0
     b8c:	d1f9      	bne.n	b82 <bc_sys_check_sum+0xa>
	return crc;
}
     b8e:	0018      	movs	r0, r3
     b90:	4770      	bx	lr
     b92:	46c0      	nop			; (mov r8, r8)

00000b94 <Reset_Handler>:
     b94:	490a      	ldr	r1, [pc, #40]	; (bc0 <Reset_Handler+0x2c>)
     b96:	4a0b      	ldr	r2, [pc, #44]	; (bc4 <Reset_Handler+0x30>)
     b98:	4b0b      	ldr	r3, [pc, #44]	; (bc8 <Reset_Handler+0x34>)
     b9a:	1a9b      	subs	r3, r3, r2
     b9c:	dd03      	ble.n	ba6 <Reset_Handler+0x12>
     b9e:	3b04      	subs	r3, #4
     ba0:	58c8      	ldr	r0, [r1, r3]
     ba2:	50d0      	str	r0, [r2, r3]
     ba4:	dcfb      	bgt.n	b9e <Reset_Handler+0xa>
     ba6:	4909      	ldr	r1, [pc, #36]	; (bcc <Reset_Handler+0x38>)
     ba8:	4a09      	ldr	r2, [pc, #36]	; (bd0 <Reset_Handler+0x3c>)
     baa:	2000      	movs	r0, #0
     bac:	1a52      	subs	r2, r2, r1
     bae:	dd02      	ble.n	bb6 <Reset_Handler+0x22>
     bb0:	3a04      	subs	r2, #4
     bb2:	5088      	str	r0, [r1, r2]
     bb4:	dcfc      	bgt.n	bb0 <Reset_Handler+0x1c>
     bb6:	4807      	ldr	r0, [pc, #28]	; (bd4 <Reset_Handler+0x40>)
     bb8:	4b07      	ldr	r3, [pc, #28]	; (bd8 <Reset_Handler+0x44>)
     bba:	f7ff fa7f 	bl	bc <main>
     bbe:	0000      	.short	0x0000
     bc0:	000027cc 	.word	0x000027cc
     bc4:	10010500 	.word	0x10010500
     bc8:	10010d44 	.word	0x10010d44
     bcc:	10010d44 	.word	0x10010d44
     bd0:	10010e70 	.word	0x10010e70
     bd4:	00012345 	.word	0x00012345
     bd8:	00001111 	.word	0x00001111

00000bdc <DEF_IRQHandler>:
     bdc:	e7fe      	b.n	bdc <DEF_IRQHandler>

00000bde <__aeabi_idiv>:
     bde:	2800      	cmp	r0, #0
     be0:	da04      	bge.n	bec <L_num_pos>
     be2:	4240      	negs	r0, r0
     be4:	2900      	cmp	r1, #0
     be6:	da04      	bge.n	bf2 <L_neg_result>
     be8:	4249      	negs	r1, r1
     bea:	e020      	b.n	c2e <__aeabi_uidiv>

00000bec <L_num_pos>:
     bec:	2900      	cmp	r1, #0
     bee:	da1e      	bge.n	c2e <__aeabi_uidiv>
     bf0:	4249      	negs	r1, r1

00000bf2 <L_neg_result>:
     bf2:	b500      	push	{lr}
     bf4:	f000 f81b 	bl	c2e <__aeabi_uidiv>
     bf8:	4240      	negs	r0, r0
     bfa:	bd00      	pop	{pc}

00000bfc <__aeabi_idivmod>:
     bfc:	2800      	cmp	r0, #0
     bfe:	da0e      	bge.n	c1e <L_num_pos_bis>
     c00:	4240      	negs	r0, r0
     c02:	2900      	cmp	r1, #0
     c04:	da05      	bge.n	c12 <L_neg_both>
     c06:	4249      	negs	r1, r1
     c08:	b500      	push	{lr}
     c0a:	f000 f810 	bl	c2e <__aeabi_uidiv>
     c0e:	4249      	negs	r1, r1
     c10:	bd00      	pop	{pc}

00000c12 <L_neg_both>:
     c12:	b500      	push	{lr}
     c14:	f000 f80b 	bl	c2e <__aeabi_uidiv>
     c18:	4240      	negs	r0, r0
     c1a:	4249      	negs	r1, r1
     c1c:	bd00      	pop	{pc}

00000c1e <L_num_pos_bis>:
     c1e:	2900      	cmp	r1, #0
     c20:	da05      	bge.n	c2e <__aeabi_uidiv>
     c22:	4249      	negs	r1, r1
     c24:	b500      	push	{lr}
     c26:	f000 f802 	bl	c2e <__aeabi_uidiv>
     c2a:	4240      	negs	r0, r0
     c2c:	bd00      	pop	{pc}

00000c2e <__aeabi_uidiv>:
     c2e:	2900      	cmp	r1, #0
     c30:	d100      	bne.n	c34 <L_no_div0>
     c32:	e014      	b.n	c5e <__aeabi_idiv0>

00000c34 <L_no_div0>:
     c34:	2201      	movs	r2, #1
     c36:	2300      	movs	r3, #0
     c38:	4288      	cmp	r0, r1
     c3a:	d906      	bls.n	c4a <L_sub_loop0>
     c3c:	3100      	adds	r1, #0
     c3e:	d404      	bmi.n	c4a <L_sub_loop0>

00000c40 <L_denom_shift_loop>:
     c40:	0052      	lsls	r2, r2, #1
     c42:	0049      	lsls	r1, r1, #1
     c44:	d401      	bmi.n	c4a <L_sub_loop0>
     c46:	4288      	cmp	r0, r1
     c48:	d8fa      	bhi.n	c40 <L_denom_shift_loop>

00000c4a <L_sub_loop0>:
     c4a:	4288      	cmp	r0, r1
     c4c:	d301      	bcc.n	c52 <L_dont_sub0>
     c4e:	1a40      	subs	r0, r0, r1
     c50:	4313      	orrs	r3, r2

00000c52 <L_dont_sub0>:
     c52:	0849      	lsrs	r1, r1, #1
     c54:	0852      	lsrs	r2, r2, #1
     c56:	d1f8      	bne.n	c4a <L_sub_loop0>
     c58:	4601      	mov	r1, r0
     c5a:	4618      	mov	r0, r3
     c5c:	4770      	bx	lr

00000c5e <__aeabi_idiv0>:
     c5e:	e7fe      	b.n	c5e <__aeabi_idiv0>

00000c60 <malloc>:
     c60:	b510      	push	{r4, lr}
     c62:	4b03      	ldr	r3, [pc, #12]	; (c70 <malloc+0x10>)
     c64:	0001      	movs	r1, r0
     c66:	6818      	ldr	r0, [r3, #0]
     c68:	f000 f80e 	bl	c88 <_malloc_r>
     c6c:	bd10      	pop	{r4, pc}
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	10010d40 	.word	0x10010d40

00000c74 <free>:
     c74:	b510      	push	{r4, lr}
     c76:	4b03      	ldr	r3, [pc, #12]	; (c84 <free+0x10>)
     c78:	0001      	movs	r1, r0
     c7a:	6818      	ldr	r0, [r3, #0]
     c7c:	f000 fca2 	bl	15c4 <_free_r>
     c80:	bd10      	pop	{r4, pc}
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	10010d40 	.word	0x10010d40

00000c88 <_malloc_r>:
     c88:	b5f0      	push	{r4, r5, r6, r7, lr}
     c8a:	465f      	mov	r7, fp
     c8c:	464d      	mov	r5, r9
     c8e:	4656      	mov	r6, sl
     c90:	4644      	mov	r4, r8
     c92:	b4f0      	push	{r4, r5, r6, r7}
     c94:	000d      	movs	r5, r1
     c96:	350b      	adds	r5, #11
     c98:	b083      	sub	sp, #12
     c9a:	0007      	movs	r7, r0
     c9c:	2d16      	cmp	r5, #22
     c9e:	d800      	bhi.n	ca2 <_malloc_r+0x1a>
     ca0:	e0a8      	b.n	df4 <_malloc_r+0x16c>
     ca2:	2307      	movs	r3, #7
     ca4:	439d      	bics	r5, r3
     ca6:	d500      	bpl.n	caa <_malloc_r+0x22>
     ca8:	e0ce      	b.n	e48 <_malloc_r+0x1c0>
     caa:	42a9      	cmp	r1, r5
     cac:	d900      	bls.n	cb0 <_malloc_r+0x28>
     cae:	e0cb      	b.n	e48 <_malloc_r+0x1c0>
     cb0:	f000 fa94 	bl	11dc <__malloc_lock>
     cb4:	23f8      	movs	r3, #248	; 0xf8
     cb6:	33ff      	adds	r3, #255	; 0xff
     cb8:	429d      	cmp	r5, r3
     cba:	d800      	bhi.n	cbe <_malloc_r+0x36>
     cbc:	e284      	b.n	11c8 <Stack_Size+0x1c8>
     cbe:	0a6b      	lsrs	r3, r5, #9
     cc0:	d100      	bne.n	cc4 <_malloc_r+0x3c>
     cc2:	e0c5      	b.n	e50 <_malloc_r+0x1c8>
     cc4:	2b04      	cmp	r3, #4
     cc6:	d900      	bls.n	cca <_malloc_r+0x42>
     cc8:	e16c      	b.n	fa4 <_malloc_r+0x31c>
     cca:	2338      	movs	r3, #56	; 0x38
     ccc:	09a9      	lsrs	r1, r5, #6
     cce:	469c      	mov	ip, r3
     cd0:	3301      	adds	r3, #1
     cd2:	4698      	mov	r8, r3
     cd4:	4488      	add	r8, r1
     cd6:	4643      	mov	r3, r8
     cd8:	448c      	add	ip, r1
     cda:	0059      	lsls	r1, r3, #1
     cdc:	4ec9      	ldr	r6, [pc, #804]	; (1004 <Stack_Size+0x4>)
     cde:	0089      	lsls	r1, r1, #2
     ce0:	1871      	adds	r1, r6, r1
     ce2:	3908      	subs	r1, #8
     ce4:	68cc      	ldr	r4, [r1, #12]
     ce6:	42a1      	cmp	r1, r4
     ce8:	d017      	beq.n	d1a <_malloc_r+0x92>
     cea:	2303      	movs	r3, #3
     cec:	6862      	ldr	r2, [r4, #4]
     cee:	439a      	bics	r2, r3
     cf0:	0013      	movs	r3, r2
     cf2:	1b52      	subs	r2, r2, r5
     cf4:	2a0f      	cmp	r2, #15
     cf6:	dd00      	ble.n	cfa <_malloc_r+0x72>
     cf8:	e0b0      	b.n	e5c <_malloc_r+0x1d4>
     cfa:	2003      	movs	r0, #3
     cfc:	2a00      	cmp	r2, #0
     cfe:	db09      	blt.n	d14 <_malloc_r+0x8c>
     d00:	e08d      	b.n	e1e <_malloc_r+0x196>
     d02:	6863      	ldr	r3, [r4, #4]
     d04:	4383      	bics	r3, r0
     d06:	1b5a      	subs	r2, r3, r5
     d08:	2a0f      	cmp	r2, #15
     d0a:	dd00      	ble.n	d0e <_malloc_r+0x86>
     d0c:	e0a6      	b.n	e5c <_malloc_r+0x1d4>
     d0e:	2a00      	cmp	r2, #0
     d10:	db00      	blt.n	d14 <_malloc_r+0x8c>
     d12:	e084      	b.n	e1e <_malloc_r+0x196>
     d14:	68e4      	ldr	r4, [r4, #12]
     d16:	42a1      	cmp	r1, r4
     d18:	d1f3      	bne.n	d02 <_malloc_r+0x7a>
     d1a:	4643      	mov	r3, r8
     d1c:	9300      	str	r3, [sp, #0]
     d1e:	0032      	movs	r2, r6
     d20:	6934      	ldr	r4, [r6, #16]
     d22:	3208      	adds	r2, #8
     d24:	4294      	cmp	r4, r2
     d26:	d100      	bne.n	d2a <_malloc_r+0xa2>
     d28:	e18f      	b.n	104a <Stack_Size+0x4a>
     d2a:	2303      	movs	r3, #3
     d2c:	6861      	ldr	r1, [r4, #4]
     d2e:	4399      	bics	r1, r3
     d30:	000b      	movs	r3, r1
     d32:	1b48      	subs	r0, r1, r5
     d34:	280f      	cmp	r0, #15
     d36:	dd00      	ble.n	d3a <_malloc_r+0xb2>
     d38:	e176      	b.n	1028 <Stack_Size+0x28>
     d3a:	6172      	str	r2, [r6, #20]
     d3c:	6132      	str	r2, [r6, #16]
     d3e:	2800      	cmp	r0, #0
     d40:	da71      	bge.n	e26 <_malloc_r+0x19e>
     d42:	4ab1      	ldr	r2, [pc, #708]	; (1008 <Stack_Size+0x8>)
     d44:	4291      	cmp	r1, r2
     d46:	d900      	bls.n	d4a <_malloc_r+0xc2>
     d48:	e134      	b.n	fb4 <_malloc_r+0x32c>
     d4a:	2301      	movs	r3, #1
     d4c:	08c8      	lsrs	r0, r1, #3
     d4e:	1082      	asrs	r2, r0, #2
     d50:	4093      	lsls	r3, r2
     d52:	6872      	ldr	r2, [r6, #4]
     d54:	431a      	orrs	r2, r3
     d56:	00c3      	lsls	r3, r0, #3
     d58:	199b      	adds	r3, r3, r6
     d5a:	6898      	ldr	r0, [r3, #8]
     d5c:	6072      	str	r2, [r6, #4]
     d5e:	60e3      	str	r3, [r4, #12]
     d60:	60a0      	str	r0, [r4, #8]
     d62:	609c      	str	r4, [r3, #8]
     d64:	0013      	movs	r3, r2
     d66:	60c4      	str	r4, [r0, #12]
     d68:	2001      	movs	r0, #1
     d6a:	9900      	ldr	r1, [sp, #0]
     d6c:	108a      	asrs	r2, r1, #2
     d6e:	4090      	lsls	r0, r2
     d70:	4298      	cmp	r0, r3
     d72:	d900      	bls.n	d76 <_malloc_r+0xee>
     d74:	e075      	b.n	e62 <_malloc_r+0x1da>
     d76:	4203      	tst	r3, r0
     d78:	d10c      	bne.n	d94 <_malloc_r+0x10c>
     d7a:	2203      	movs	r2, #3
     d7c:	4391      	bics	r1, r2
     d7e:	1d0a      	adds	r2, r1, #4
     d80:	0040      	lsls	r0, r0, #1
     d82:	9200      	str	r2, [sp, #0]
     d84:	4203      	tst	r3, r0
     d86:	d105      	bne.n	d94 <_malloc_r+0x10c>
     d88:	9a00      	ldr	r2, [sp, #0]
     d8a:	0040      	lsls	r0, r0, #1
     d8c:	3204      	adds	r2, #4
     d8e:	9200      	str	r2, [sp, #0]
     d90:	4203      	tst	r3, r0
     d92:	d0f9      	beq.n	d88 <_malloc_r+0x100>
     d94:	2303      	movs	r3, #3
     d96:	4698      	mov	r8, r3
     d98:	9a00      	ldr	r2, [sp, #0]
     d9a:	00d3      	lsls	r3, r2, #3
     d9c:	4699      	mov	r9, r3
     d9e:	44b1      	add	r9, r6
     da0:	46cc      	mov	ip, r9
     da2:	4692      	mov	sl, r2
     da4:	4663      	mov	r3, ip
     da6:	68dc      	ldr	r4, [r3, #12]
     da8:	45a4      	cmp	ip, r4
     daa:	d107      	bne.n	dbc <_malloc_r+0x134>
     dac:	e14f      	b.n	104e <Stack_Size+0x4e>
     dae:	2a00      	cmp	r2, #0
     db0:	db00      	blt.n	db4 <_malloc_r+0x12c>
     db2:	e15f      	b.n	1074 <Stack_Size+0x74>
     db4:	68e4      	ldr	r4, [r4, #12]
     db6:	45a4      	cmp	ip, r4
     db8:	d100      	bne.n	dbc <_malloc_r+0x134>
     dba:	e148      	b.n	104e <Stack_Size+0x4e>
     dbc:	4642      	mov	r2, r8
     dbe:	6863      	ldr	r3, [r4, #4]
     dc0:	4393      	bics	r3, r2
     dc2:	1b5a      	subs	r2, r3, r5
     dc4:	2a0f      	cmp	r2, #15
     dc6:	ddf2      	ble.n	dae <_malloc_r+0x126>
     dc8:	2101      	movs	r1, #1
     dca:	1963      	adds	r3, r4, r5
     dcc:	430d      	orrs	r5, r1
     dce:	6065      	str	r5, [r4, #4]
     dd0:	68e0      	ldr	r0, [r4, #12]
     dd2:	68a5      	ldr	r5, [r4, #8]
     dd4:	3608      	adds	r6, #8
     dd6:	60e8      	str	r0, [r5, #12]
     dd8:	4311      	orrs	r1, r2
     dda:	6085      	str	r5, [r0, #8]
     ddc:	60f3      	str	r3, [r6, #12]
     dde:	60b3      	str	r3, [r6, #8]
     de0:	0038      	movs	r0, r7
     de2:	60de      	str	r6, [r3, #12]
     de4:	609e      	str	r6, [r3, #8]
     de6:	6059      	str	r1, [r3, #4]
     de8:	509a      	str	r2, [r3, r2]
     dea:	f000 f9f9 	bl	11e0 <__malloc_unlock>
     dee:	0020      	movs	r0, r4
     df0:	3008      	adds	r0, #8
     df2:	e022      	b.n	e3a <_malloc_r+0x1b2>
     df4:	2910      	cmp	r1, #16
     df6:	d827      	bhi.n	e48 <_malloc_r+0x1c0>
     df8:	0038      	movs	r0, r7
     dfa:	f000 f9ef 	bl	11dc <__malloc_lock>
     dfe:	2510      	movs	r5, #16
     e00:	2306      	movs	r3, #6
     e02:	2102      	movs	r1, #2
     e04:	4e7f      	ldr	r6, [pc, #508]	; (1004 <Stack_Size+0x4>)
     e06:	009b      	lsls	r3, r3, #2
     e08:	18f3      	adds	r3, r6, r3
     e0a:	001a      	movs	r2, r3
     e0c:	685c      	ldr	r4, [r3, #4]
     e0e:	3a08      	subs	r2, #8
     e10:	4294      	cmp	r4, r2
     e12:	d100      	bne.n	e16 <_malloc_r+0x18e>
     e14:	e127      	b.n	1066 <Stack_Size+0x66>
     e16:	2303      	movs	r3, #3
     e18:	6862      	ldr	r2, [r4, #4]
     e1a:	439a      	bics	r2, r3
     e1c:	0013      	movs	r3, r2
     e1e:	68e2      	ldr	r2, [r4, #12]
     e20:	68a1      	ldr	r1, [r4, #8]
     e22:	60ca      	str	r2, [r1, #12]
     e24:	6091      	str	r1, [r2, #8]
     e26:	2201      	movs	r2, #1
     e28:	18e3      	adds	r3, r4, r3
     e2a:	6859      	ldr	r1, [r3, #4]
     e2c:	0038      	movs	r0, r7
     e2e:	430a      	orrs	r2, r1
     e30:	605a      	str	r2, [r3, #4]
     e32:	f000 f9d5 	bl	11e0 <__malloc_unlock>
     e36:	0020      	movs	r0, r4
     e38:	3008      	adds	r0, #8
     e3a:	b003      	add	sp, #12
     e3c:	bc3c      	pop	{r2, r3, r4, r5}
     e3e:	4690      	mov	r8, r2
     e40:	4699      	mov	r9, r3
     e42:	46a2      	mov	sl, r4
     e44:	46ab      	mov	fp, r5
     e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e48:	230c      	movs	r3, #12
     e4a:	2000      	movs	r0, #0
     e4c:	603b      	str	r3, [r7, #0]
     e4e:	e7f4      	b.n	e3a <_malloc_r+0x1b2>
     e50:	2340      	movs	r3, #64	; 0x40
     e52:	4698      	mov	r8, r3
     e54:	3b01      	subs	r3, #1
     e56:	2180      	movs	r1, #128	; 0x80
     e58:	469c      	mov	ip, r3
     e5a:	e73f      	b.n	cdc <_malloc_r+0x54>
     e5c:	4663      	mov	r3, ip
     e5e:	9300      	str	r3, [sp, #0]
     e60:	e75d      	b.n	d1e <_malloc_r+0x96>
     e62:	2303      	movs	r3, #3
     e64:	68b4      	ldr	r4, [r6, #8]
     e66:	6862      	ldr	r2, [r4, #4]
     e68:	439a      	bics	r2, r3
     e6a:	4690      	mov	r8, r2
     e6c:	42aa      	cmp	r2, r5
     e6e:	d303      	bcc.n	e78 <_malloc_r+0x1f0>
     e70:	1b52      	subs	r2, r2, r5
     e72:	2a0f      	cmp	r2, #15
     e74:	dd00      	ble.n	e78 <_malloc_r+0x1f0>
     e76:	e087      	b.n	f88 <_malloc_r+0x300>
     e78:	0023      	movs	r3, r4
     e7a:	4443      	add	r3, r8
     e7c:	4a63      	ldr	r2, [pc, #396]	; (100c <Stack_Size+0xc>)
     e7e:	9301      	str	r3, [sp, #4]
     e80:	4b63      	ldr	r3, [pc, #396]	; (1010 <Stack_Size+0x10>)
     e82:	4693      	mov	fp, r2
     e84:	681b      	ldr	r3, [r3, #0]
     e86:	6812      	ldr	r2, [r2, #0]
     e88:	18eb      	adds	r3, r5, r3
     e8a:	3201      	adds	r2, #1
     e8c:	d100      	bne.n	e90 <_malloc_r+0x208>
     e8e:	e157      	b.n	1140 <Stack_Size+0x140>
     e90:	4a60      	ldr	r2, [pc, #384]	; (1014 <Stack_Size+0x14>)
     e92:	4694      	mov	ip, r2
     e94:	4463      	add	r3, ip
     e96:	0b1b      	lsrs	r3, r3, #12
     e98:	031b      	lsls	r3, r3, #12
     e9a:	9300      	str	r3, [sp, #0]
     e9c:	9900      	ldr	r1, [sp, #0]
     e9e:	0038      	movs	r0, r7
     ea0:	f000 f9e2 	bl	1268 <_sbrk_r>
     ea4:	0003      	movs	r3, r0
     ea6:	4681      	mov	r9, r0
     ea8:	3301      	adds	r3, #1
     eaa:	d061      	beq.n	f70 <_malloc_r+0x2e8>
     eac:	9b01      	ldr	r3, [sp, #4]
     eae:	4283      	cmp	r3, r0
     eb0:	d900      	bls.n	eb4 <_malloc_r+0x22c>
     eb2:	e0fd      	b.n	10b0 <Stack_Size+0xb0>
     eb4:	4b58      	ldr	r3, [pc, #352]	; (1018 <Stack_Size+0x18>)
     eb6:	9a00      	ldr	r2, [sp, #0]
     eb8:	469a      	mov	sl, r3
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	469c      	mov	ip, r3
     ebe:	4653      	mov	r3, sl
     ec0:	4462      	add	r2, ip
     ec2:	601a      	str	r2, [r3, #0]
     ec4:	9b01      	ldr	r3, [sp, #4]
     ec6:	0011      	movs	r1, r2
     ec8:	454b      	cmp	r3, r9
     eca:	d100      	bne.n	ece <_malloc_r+0x246>
     ecc:	e143      	b.n	1156 <Stack_Size+0x156>
     ece:	465b      	mov	r3, fp
     ed0:	681b      	ldr	r3, [r3, #0]
     ed2:	3301      	adds	r3, #1
     ed4:	d100      	bne.n	ed8 <_malloc_r+0x250>
     ed6:	e14f      	b.n	1178 <Stack_Size+0x178>
     ed8:	464b      	mov	r3, r9
     eda:	9a01      	ldr	r2, [sp, #4]
     edc:	1a9b      	subs	r3, r3, r2
     ede:	1859      	adds	r1, r3, r1
     ee0:	4653      	mov	r3, sl
     ee2:	6019      	str	r1, [r3, #0]
     ee4:	2307      	movs	r3, #7
     ee6:	464a      	mov	r2, r9
     ee8:	4013      	ands	r3, r2
     eea:	d100      	bne.n	eee <_malloc_r+0x266>
     eec:	e117      	b.n	111e <Stack_Size+0x11e>
     eee:	2108      	movs	r1, #8
     ef0:	4689      	mov	r9, r1
     ef2:	494a      	ldr	r1, [pc, #296]	; (101c <Stack_Size+0x1c>)
     ef4:	1ad2      	subs	r2, r2, r3
     ef6:	4491      	add	r9, r2
     ef8:	1ac9      	subs	r1, r1, r3
     efa:	9b00      	ldr	r3, [sp, #0]
     efc:	0038      	movs	r0, r7
     efe:	444b      	add	r3, r9
     f00:	051b      	lsls	r3, r3, #20
     f02:	0d1b      	lsrs	r3, r3, #20
     f04:	1acb      	subs	r3, r1, r3
     f06:	0019      	movs	r1, r3
     f08:	469b      	mov	fp, r3
     f0a:	f000 f9ad 	bl	1268 <_sbrk_r>
     f0e:	1c43      	adds	r3, r0, #1
     f10:	d100      	bne.n	f14 <_malloc_r+0x28c>
     f12:	e135      	b.n	1180 <Stack_Size+0x180>
     f14:	464b      	mov	r3, r9
     f16:	1ac0      	subs	r0, r0, r3
     f18:	2301      	movs	r3, #1
     f1a:	4458      	add	r0, fp
     f1c:	4318      	orrs	r0, r3
     f1e:	4653      	mov	r3, sl
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	445b      	add	r3, fp
     f24:	0019      	movs	r1, r3
     f26:	4653      	mov	r3, sl
     f28:	6019      	str	r1, [r3, #0]
     f2a:	464b      	mov	r3, r9
     f2c:	60b3      	str	r3, [r6, #8]
     f2e:	6058      	str	r0, [r3, #4]
     f30:	42b4      	cmp	r4, r6
     f32:	d013      	beq.n	f5c <_malloc_r+0x2d4>
     f34:	4643      	mov	r3, r8
     f36:	2b0f      	cmp	r3, #15
     f38:	d800      	bhi.n	f3c <_malloc_r+0x2b4>
     f3a:	e0e1      	b.n	1100 <Stack_Size+0x100>
     f3c:	4643      	mov	r3, r8
     f3e:	2207      	movs	r2, #7
     f40:	6860      	ldr	r0, [r4, #4]
     f42:	3b0c      	subs	r3, #12
     f44:	4393      	bics	r3, r2
     f46:	3a06      	subs	r2, #6
     f48:	4002      	ands	r2, r0
     f4a:	2005      	movs	r0, #5
     f4c:	431a      	orrs	r2, r3
     f4e:	6062      	str	r2, [r4, #4]
     f50:	18e2      	adds	r2, r4, r3
     f52:	6050      	str	r0, [r2, #4]
     f54:	6090      	str	r0, [r2, #8]
     f56:	2b0f      	cmp	r3, #15
     f58:	d900      	bls.n	f5c <_malloc_r+0x2d4>
     f5a:	e115      	b.n	1188 <Stack_Size+0x188>
     f5c:	4b30      	ldr	r3, [pc, #192]	; (1020 <Stack_Size+0x20>)
     f5e:	681a      	ldr	r2, [r3, #0]
     f60:	4291      	cmp	r1, r2
     f62:	d900      	bls.n	f66 <_malloc_r+0x2de>
     f64:	6019      	str	r1, [r3, #0]
     f66:	4b2f      	ldr	r3, [pc, #188]	; (1024 <Stack_Size+0x24>)
     f68:	681a      	ldr	r2, [r3, #0]
     f6a:	4291      	cmp	r1, r2
     f6c:	d900      	bls.n	f70 <_malloc_r+0x2e8>
     f6e:	6019      	str	r1, [r3, #0]
     f70:	2303      	movs	r3, #3
     f72:	68b4      	ldr	r4, [r6, #8]
     f74:	6862      	ldr	r2, [r4, #4]
     f76:	439a      	bics	r2, r3
     f78:	0013      	movs	r3, r2
     f7a:	1b52      	subs	r2, r2, r5
     f7c:	429d      	cmp	r5, r3
     f7e:	d900      	bls.n	f82 <_malloc_r+0x2fa>
     f80:	e0c1      	b.n	1106 <Stack_Size+0x106>
     f82:	2a0f      	cmp	r2, #15
     f84:	dc00      	bgt.n	f88 <_malloc_r+0x300>
     f86:	e0be      	b.n	1106 <Stack_Size+0x106>
     f88:	2301      	movs	r3, #1
     f8a:	0029      	movs	r1, r5
     f8c:	1965      	adds	r5, r4, r5
     f8e:	4319      	orrs	r1, r3
     f90:	4313      	orrs	r3, r2
     f92:	6061      	str	r1, [r4, #4]
     f94:	0038      	movs	r0, r7
     f96:	60b5      	str	r5, [r6, #8]
     f98:	606b      	str	r3, [r5, #4]
     f9a:	f000 f921 	bl	11e0 <__malloc_unlock>
     f9e:	0020      	movs	r0, r4
     fa0:	3008      	adds	r0, #8
     fa2:	e74a      	b.n	e3a <_malloc_r+0x1b2>
     fa4:	2b14      	cmp	r3, #20
     fa6:	d974      	bls.n	1092 <Stack_Size+0x92>
     fa8:	2b54      	cmp	r3, #84	; 0x54
     faa:	d900      	bls.n	fae <_malloc_r+0x326>
     fac:	e0b0      	b.n	1110 <Stack_Size+0x110>
     fae:	0b29      	lsrs	r1, r5, #12
     fb0:	236e      	movs	r3, #110	; 0x6e
     fb2:	e68c      	b.n	cce <_malloc_r+0x46>
     fb4:	0a4a      	lsrs	r2, r1, #9
     fb6:	2a04      	cmp	r2, #4
     fb8:	d974      	bls.n	10a4 <Stack_Size+0xa4>
     fba:	2a14      	cmp	r2, #20
     fbc:	d900      	bls.n	fc0 <_malloc_r+0x338>
     fbe:	e0c2      	b.n	1146 <Stack_Size+0x146>
     fc0:	0010      	movs	r0, r2
     fc2:	325c      	adds	r2, #92	; 0x5c
     fc4:	305b      	adds	r0, #91	; 0x5b
     fc6:	0052      	lsls	r2, r2, #1
     fc8:	2108      	movs	r1, #8
     fca:	4249      	negs	r1, r1
     fcc:	468c      	mov	ip, r1
     fce:	0092      	lsls	r2, r2, #2
     fd0:	18b2      	adds	r2, r6, r2
     fd2:	4494      	add	ip, r2
     fd4:	4662      	mov	r2, ip
     fd6:	6892      	ldr	r2, [r2, #8]
     fd8:	310b      	adds	r1, #11
     fda:	4688      	mov	r8, r1
     fdc:	4594      	cmp	ip, r2
     fde:	d100      	bne.n	fe2 <_malloc_r+0x35a>
     fe0:	e0a0      	b.n	1124 <Stack_Size+0x124>
     fe2:	4641      	mov	r1, r8
     fe4:	6850      	ldr	r0, [r2, #4]
     fe6:	4388      	bics	r0, r1
     fe8:	4283      	cmp	r3, r0
     fea:	d202      	bcs.n	ff2 <_malloc_r+0x36a>
     fec:	6892      	ldr	r2, [r2, #8]
     fee:	4594      	cmp	ip, r2
     ff0:	d1f7      	bne.n	fe2 <_malloc_r+0x35a>
     ff2:	68d3      	ldr	r3, [r2, #12]
     ff4:	469c      	mov	ip, r3
     ff6:	6873      	ldr	r3, [r6, #4]
     ff8:	4661      	mov	r1, ip
     ffa:	60a2      	str	r2, [r4, #8]
     ffc:	60e1      	str	r1, [r4, #12]
     ffe:	608c      	str	r4, [r1, #8]
    1000:	60d4      	str	r4, [r2, #12]
    1002:	e6b1      	b.n	d68 <_malloc_r+0xe0>
    1004:	10010504 	.word	0x10010504
    1008:	000001ff 	.word	0x000001ff
    100c:	10010910 	.word	0x10010910
    1010:	10010df8 	.word	0x10010df8
    1014:	0000100f 	.word	0x0000100f
    1018:	10010dfc 	.word	0x10010dfc
    101c:	00001008 	.word	0x00001008
    1020:	10010df4 	.word	0x10010df4
    1024:	10010df0 	.word	0x10010df0
    1028:	2101      	movs	r1, #1
    102a:	1963      	adds	r3, r4, r5
    102c:	430d      	orrs	r5, r1
    102e:	4301      	orrs	r1, r0
    1030:	6065      	str	r5, [r4, #4]
    1032:	6173      	str	r3, [r6, #20]
    1034:	6133      	str	r3, [r6, #16]
    1036:	60da      	str	r2, [r3, #12]
    1038:	609a      	str	r2, [r3, #8]
    103a:	6059      	str	r1, [r3, #4]
    103c:	5018      	str	r0, [r3, r0]
    103e:	0038      	movs	r0, r7
    1040:	f000 f8ce 	bl	11e0 <__malloc_unlock>
    1044:	0020      	movs	r0, r4
    1046:	3008      	adds	r0, #8
    1048:	e6f7      	b.n	e3a <_malloc_r+0x1b2>
    104a:	6873      	ldr	r3, [r6, #4]
    104c:	e68c      	b.n	d68 <_malloc_r+0xe0>
    104e:	2308      	movs	r3, #8
    1050:	469b      	mov	fp, r3
    1052:	3b07      	subs	r3, #7
    1054:	44dc      	add	ip, fp
    1056:	469b      	mov	fp, r3
    1058:	44da      	add	sl, fp
    105a:	4643      	mov	r3, r8
    105c:	4652      	mov	r2, sl
    105e:	4213      	tst	r3, r2
    1060:	d000      	beq.n	1064 <Stack_Size+0x64>
    1062:	e69f      	b.n	da4 <_malloc_r+0x11c>
    1064:	e033      	b.n	10ce <Stack_Size+0xce>
    1066:	68dc      	ldr	r4, [r3, #12]
    1068:	1c8a      	adds	r2, r1, #2
    106a:	9200      	str	r2, [sp, #0]
    106c:	42a3      	cmp	r3, r4
    106e:	d100      	bne.n	1072 <Stack_Size+0x72>
    1070:	e655      	b.n	d1e <_malloc_r+0x96>
    1072:	e6d0      	b.n	e16 <_malloc_r+0x18e>
    1074:	2201      	movs	r2, #1
    1076:	18e3      	adds	r3, r4, r3
    1078:	6859      	ldr	r1, [r3, #4]
    107a:	0038      	movs	r0, r7
    107c:	430a      	orrs	r2, r1
    107e:	605a      	str	r2, [r3, #4]
    1080:	68e3      	ldr	r3, [r4, #12]
    1082:	68a2      	ldr	r2, [r4, #8]
    1084:	60d3      	str	r3, [r2, #12]
    1086:	609a      	str	r2, [r3, #8]
    1088:	f000 f8aa 	bl	11e0 <__malloc_unlock>
    108c:	0020      	movs	r0, r4
    108e:	3008      	adds	r0, #8
    1090:	e6d3      	b.n	e3a <_malloc_r+0x1b2>
    1092:	225b      	movs	r2, #91	; 0x5b
    1094:	4694      	mov	ip, r2
    1096:	3201      	adds	r2, #1
    1098:	4690      	mov	r8, r2
    109a:	4498      	add	r8, r3
    109c:	449c      	add	ip, r3
    109e:	4643      	mov	r3, r8
    10a0:	0059      	lsls	r1, r3, #1
    10a2:	e61b      	b.n	cdc <_malloc_r+0x54>
    10a4:	098a      	lsrs	r2, r1, #6
    10a6:	0010      	movs	r0, r2
    10a8:	3239      	adds	r2, #57	; 0x39
    10aa:	3038      	adds	r0, #56	; 0x38
    10ac:	0052      	lsls	r2, r2, #1
    10ae:	e78b      	b.n	fc8 <_malloc_r+0x340>
    10b0:	42b4      	cmp	r4, r6
    10b2:	d000      	beq.n	10b6 <Stack_Size+0xb6>
    10b4:	e75c      	b.n	f70 <_malloc_r+0x2e8>
    10b6:	e6fd      	b.n	eb4 <_malloc_r+0x22c>
    10b8:	9b00      	ldr	r3, [sp, #0]
    10ba:	3b01      	subs	r3, #1
    10bc:	9300      	str	r3, [sp, #0]
    10be:	2308      	movs	r3, #8
    10c0:	425b      	negs	r3, r3
    10c2:	469c      	mov	ip, r3
    10c4:	44e1      	add	r9, ip
    10c6:	464b      	mov	r3, r9
    10c8:	689b      	ldr	r3, [r3, #8]
    10ca:	4599      	cmp	r9, r3
    10cc:	d17a      	bne.n	11c4 <Stack_Size+0x1c4>
    10ce:	4643      	mov	r3, r8
    10d0:	9a00      	ldr	r2, [sp, #0]
    10d2:	4213      	tst	r3, r2
    10d4:	d1f0      	bne.n	10b8 <Stack_Size+0xb8>
    10d6:	6873      	ldr	r3, [r6, #4]
    10d8:	4383      	bics	r3, r0
    10da:	6073      	str	r3, [r6, #4]
    10dc:	0040      	lsls	r0, r0, #1
    10de:	4298      	cmp	r0, r3
    10e0:	d900      	bls.n	10e4 <Stack_Size+0xe4>
    10e2:	e6be      	b.n	e62 <_malloc_r+0x1da>
    10e4:	2800      	cmp	r0, #0
    10e6:	d100      	bne.n	10ea <Stack_Size+0xea>
    10e8:	e6bb      	b.n	e62 <_malloc_r+0x1da>
    10ea:	4203      	tst	r3, r0
    10ec:	d170      	bne.n	11d0 <Stack_Size+0x1d0>
    10ee:	4652      	mov	r2, sl
    10f0:	9200      	str	r2, [sp, #0]
    10f2:	9a00      	ldr	r2, [sp, #0]
    10f4:	0040      	lsls	r0, r0, #1
    10f6:	3204      	adds	r2, #4
    10f8:	9200      	str	r2, [sp, #0]
    10fa:	4203      	tst	r3, r0
    10fc:	d0f9      	beq.n	10f2 <Stack_Size+0xf2>
    10fe:	e64b      	b.n	d98 <_malloc_r+0x110>
    1100:	2301      	movs	r3, #1
    1102:	464a      	mov	r2, r9
    1104:	6053      	str	r3, [r2, #4]
    1106:	0038      	movs	r0, r7
    1108:	f000 f86a 	bl	11e0 <__malloc_unlock>
    110c:	2000      	movs	r0, #0
    110e:	e694      	b.n	e3a <_malloc_r+0x1b2>
    1110:	22aa      	movs	r2, #170	; 0xaa
    1112:	0052      	lsls	r2, r2, #1
    1114:	4293      	cmp	r3, r2
    1116:	d80d      	bhi.n	1134 <Stack_Size+0x134>
    1118:	0be9      	lsrs	r1, r5, #15
    111a:	2377      	movs	r3, #119	; 0x77
    111c:	e5d7      	b.n	cce <_malloc_r+0x46>
    111e:	2180      	movs	r1, #128	; 0x80
    1120:	0149      	lsls	r1, r1, #5
    1122:	e6ea      	b.n	efa <_malloc_r+0x272>
    1124:	2301      	movs	r3, #1
    1126:	1080      	asrs	r0, r0, #2
    1128:	4083      	lsls	r3, r0
    112a:	6872      	ldr	r2, [r6, #4]
    112c:	4313      	orrs	r3, r2
    112e:	6073      	str	r3, [r6, #4]
    1130:	4662      	mov	r2, ip
    1132:	e761      	b.n	ff8 <_malloc_r+0x370>
    1134:	4a28      	ldr	r2, [pc, #160]	; (11d8 <Stack_Size+0x1d8>)
    1136:	4293      	cmp	r3, r2
    1138:	d818      	bhi.n	116c <Stack_Size+0x16c>
    113a:	0ca9      	lsrs	r1, r5, #18
    113c:	237c      	movs	r3, #124	; 0x7c
    113e:	e5c6      	b.n	cce <_malloc_r+0x46>
    1140:	3310      	adds	r3, #16
    1142:	9300      	str	r3, [sp, #0]
    1144:	e6aa      	b.n	e9c <_malloc_r+0x214>
    1146:	2a54      	cmp	r2, #84	; 0x54
    1148:	d826      	bhi.n	1198 <Stack_Size+0x198>
    114a:	0b0a      	lsrs	r2, r1, #12
    114c:	0010      	movs	r0, r2
    114e:	326f      	adds	r2, #111	; 0x6f
    1150:	306e      	adds	r0, #110	; 0x6e
    1152:	0052      	lsls	r2, r2, #1
    1154:	e738      	b.n	fc8 <_malloc_r+0x340>
    1156:	051b      	lsls	r3, r3, #20
    1158:	d000      	beq.n	115c <Stack_Size+0x15c>
    115a:	e6b8      	b.n	ece <_malloc_r+0x246>
    115c:	9b00      	ldr	r3, [sp, #0]
    115e:	68b2      	ldr	r2, [r6, #8]
    1160:	4443      	add	r3, r8
    1162:	0018      	movs	r0, r3
    1164:	2301      	movs	r3, #1
    1166:	4303      	orrs	r3, r0
    1168:	6053      	str	r3, [r2, #4]
    116a:	e6f7      	b.n	f5c <_malloc_r+0x2d4>
    116c:	237f      	movs	r3, #127	; 0x7f
    116e:	4698      	mov	r8, r3
    1170:	3b01      	subs	r3, #1
    1172:	21fe      	movs	r1, #254	; 0xfe
    1174:	469c      	mov	ip, r3
    1176:	e5b1      	b.n	cdc <_malloc_r+0x54>
    1178:	465b      	mov	r3, fp
    117a:	464a      	mov	r2, r9
    117c:	601a      	str	r2, [r3, #0]
    117e:	e6b1      	b.n	ee4 <_malloc_r+0x25c>
    1180:	2300      	movs	r3, #0
    1182:	2001      	movs	r0, #1
    1184:	469b      	mov	fp, r3
    1186:	e6ca      	b.n	f1e <_malloc_r+0x296>
    1188:	0021      	movs	r1, r4
    118a:	0038      	movs	r0, r7
    118c:	3108      	adds	r1, #8
    118e:	f000 fa19 	bl	15c4 <_free_r>
    1192:	4653      	mov	r3, sl
    1194:	6819      	ldr	r1, [r3, #0]
    1196:	e6e1      	b.n	f5c <_malloc_r+0x2d4>
    1198:	20aa      	movs	r0, #170	; 0xaa
    119a:	0040      	lsls	r0, r0, #1
    119c:	4282      	cmp	r2, r0
    119e:	d805      	bhi.n	11ac <Stack_Size+0x1ac>
    11a0:	0bca      	lsrs	r2, r1, #15
    11a2:	0010      	movs	r0, r2
    11a4:	3278      	adds	r2, #120	; 0x78
    11a6:	3077      	adds	r0, #119	; 0x77
    11a8:	0052      	lsls	r2, r2, #1
    11aa:	e70d      	b.n	fc8 <_malloc_r+0x340>
    11ac:	480a      	ldr	r0, [pc, #40]	; (11d8 <Stack_Size+0x1d8>)
    11ae:	4282      	cmp	r2, r0
    11b0:	d805      	bhi.n	11be <Stack_Size+0x1be>
    11b2:	0c8a      	lsrs	r2, r1, #18
    11b4:	0010      	movs	r0, r2
    11b6:	327d      	adds	r2, #125	; 0x7d
    11b8:	307c      	adds	r0, #124	; 0x7c
    11ba:	0052      	lsls	r2, r2, #1
    11bc:	e704      	b.n	fc8 <_malloc_r+0x340>
    11be:	22fe      	movs	r2, #254	; 0xfe
    11c0:	207e      	movs	r0, #126	; 0x7e
    11c2:	e701      	b.n	fc8 <_malloc_r+0x340>
    11c4:	6873      	ldr	r3, [r6, #4]
    11c6:	e789      	b.n	10dc <Stack_Size+0xdc>
    11c8:	08e9      	lsrs	r1, r5, #3
    11ca:	1c4b      	adds	r3, r1, #1
    11cc:	005b      	lsls	r3, r3, #1
    11ce:	e619      	b.n	e04 <_malloc_r+0x17c>
    11d0:	4653      	mov	r3, sl
    11d2:	9300      	str	r3, [sp, #0]
    11d4:	e5e0      	b.n	d98 <_malloc_r+0x110>
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	00000554 	.word	0x00000554

000011dc <__malloc_lock>:
    11dc:	4770      	bx	lr
    11de:	46c0      	nop			; (mov r8, r8)

000011e0 <__malloc_unlock>:
    11e0:	4770      	bx	lr
    11e2:	46c0      	nop			; (mov r8, r8)

000011e4 <_puts_r>:
    11e4:	b530      	push	{r4, r5, lr}
    11e6:	0005      	movs	r5, r0
    11e8:	b089      	sub	sp, #36	; 0x24
    11ea:	0008      	movs	r0, r1
    11ec:	000c      	movs	r4, r1
    11ee:	f000 f84d 	bl	128c <strlen>
    11f2:	ab04      	add	r3, sp, #16
    11f4:	4a15      	ldr	r2, [pc, #84]	; (124c <_puts_r+0x68>)
    11f6:	9301      	str	r3, [sp, #4]
    11f8:	2302      	movs	r3, #2
    11fa:	9206      	str	r2, [sp, #24]
    11fc:	2201      	movs	r2, #1
    11fe:	9302      	str	r3, [sp, #8]
    1200:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1202:	9005      	str	r0, [sp, #20]
    1204:	3001      	adds	r0, #1
    1206:	9404      	str	r4, [sp, #16]
    1208:	9207      	str	r2, [sp, #28]
    120a:	9003      	str	r0, [sp, #12]
    120c:	68ac      	ldr	r4, [r5, #8]
    120e:	2b00      	cmp	r3, #0
    1210:	d017      	beq.n	1242 <_puts_r+0x5e>
    1212:	220c      	movs	r2, #12
    1214:	5ea3      	ldrsh	r3, [r4, r2]
    1216:	2280      	movs	r2, #128	; 0x80
    1218:	0192      	lsls	r2, r2, #6
    121a:	4213      	tst	r3, r2
    121c:	d105      	bne.n	122a <_puts_r+0x46>
    121e:	4313      	orrs	r3, r2
    1220:	81a3      	strh	r3, [r4, #12]
    1222:	6e62      	ldr	r2, [r4, #100]	; 0x64
    1224:	4b0a      	ldr	r3, [pc, #40]	; (1250 <_puts_r+0x6c>)
    1226:	4013      	ands	r3, r2
    1228:	6663      	str	r3, [r4, #100]	; 0x64
    122a:	aa01      	add	r2, sp, #4
    122c:	0021      	movs	r1, r4
    122e:	0028      	movs	r0, r5
    1230:	f000 faaa 	bl	1788 <__sfvwrite_r>
    1234:	1e43      	subs	r3, r0, #1
    1236:	4198      	sbcs	r0, r3
    1238:	230a      	movs	r3, #10
    123a:	4240      	negs	r0, r0
    123c:	4318      	orrs	r0, r3
    123e:	b009      	add	sp, #36	; 0x24
    1240:	bd30      	pop	{r4, r5, pc}
    1242:	0028      	movs	r0, r5
    1244:	f000 f946 	bl	14d4 <__sinit>
    1248:	e7e3      	b.n	1212 <_puts_r+0x2e>
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	000027c4 	.word	0x000027c4
    1250:	ffffdfff 	.word	0xffffdfff

00001254 <puts>:
    1254:	b510      	push	{r4, lr}
    1256:	4b03      	ldr	r3, [pc, #12]	; (1264 <puts+0x10>)
    1258:	0001      	movs	r1, r0
    125a:	6818      	ldr	r0, [r3, #0]
    125c:	f7ff ffc2 	bl	11e4 <_puts_r>
    1260:	bd10      	pop	{r4, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	10010d40 	.word	0x10010d40

00001268 <_sbrk_r>:
    1268:	2300      	movs	r3, #0
    126a:	b570      	push	{r4, r5, r6, lr}
    126c:	4c06      	ldr	r4, [pc, #24]	; (1288 <_sbrk_r+0x20>)
    126e:	0005      	movs	r5, r0
    1270:	0008      	movs	r0, r1
    1272:	6023      	str	r3, [r4, #0]
    1274:	f7ff fc5b 	bl	b2e <_sbrk>
    1278:	1c43      	adds	r3, r0, #1
    127a:	d000      	beq.n	127e <_sbrk_r+0x16>
    127c:	bd70      	pop	{r4, r5, r6, pc}
    127e:	6823      	ldr	r3, [r4, #0]
    1280:	2b00      	cmp	r3, #0
    1282:	d0fb      	beq.n	127c <_sbrk_r+0x14>
    1284:	602b      	str	r3, [r5, #0]
    1286:	e7f9      	b.n	127c <_sbrk_r+0x14>
    1288:	10010e6c 	.word	0x10010e6c

0000128c <strlen>:
    128c:	b510      	push	{r4, lr}
    128e:	0783      	lsls	r3, r0, #30
    1290:	d027      	beq.n	12e2 <strlen+0x56>
    1292:	7803      	ldrb	r3, [r0, #0]
    1294:	2b00      	cmp	r3, #0
    1296:	d026      	beq.n	12e6 <strlen+0x5a>
    1298:	0003      	movs	r3, r0
    129a:	2103      	movs	r1, #3
    129c:	e002      	b.n	12a4 <strlen+0x18>
    129e:	781a      	ldrb	r2, [r3, #0]
    12a0:	2a00      	cmp	r2, #0
    12a2:	d01c      	beq.n	12de <strlen+0x52>
    12a4:	3301      	adds	r3, #1
    12a6:	420b      	tst	r3, r1
    12a8:	d1f9      	bne.n	129e <strlen+0x12>
    12aa:	6819      	ldr	r1, [r3, #0]
    12ac:	4a0f      	ldr	r2, [pc, #60]	; (12ec <strlen+0x60>)
    12ae:	4c10      	ldr	r4, [pc, #64]	; (12f0 <strlen+0x64>)
    12b0:	188a      	adds	r2, r1, r2
    12b2:	438a      	bics	r2, r1
    12b4:	4222      	tst	r2, r4
    12b6:	d10f      	bne.n	12d8 <strlen+0x4c>
    12b8:	3304      	adds	r3, #4
    12ba:	6819      	ldr	r1, [r3, #0]
    12bc:	4a0b      	ldr	r2, [pc, #44]	; (12ec <strlen+0x60>)
    12be:	188a      	adds	r2, r1, r2
    12c0:	438a      	bics	r2, r1
    12c2:	4222      	tst	r2, r4
    12c4:	d108      	bne.n	12d8 <strlen+0x4c>
    12c6:	3304      	adds	r3, #4
    12c8:	6819      	ldr	r1, [r3, #0]
    12ca:	4a08      	ldr	r2, [pc, #32]	; (12ec <strlen+0x60>)
    12cc:	188a      	adds	r2, r1, r2
    12ce:	438a      	bics	r2, r1
    12d0:	4222      	tst	r2, r4
    12d2:	d0f1      	beq.n	12b8 <strlen+0x2c>
    12d4:	e000      	b.n	12d8 <strlen+0x4c>
    12d6:	3301      	adds	r3, #1
    12d8:	781a      	ldrb	r2, [r3, #0]
    12da:	2a00      	cmp	r2, #0
    12dc:	d1fb      	bne.n	12d6 <strlen+0x4a>
    12de:	1a18      	subs	r0, r3, r0
    12e0:	bd10      	pop	{r4, pc}
    12e2:	0003      	movs	r3, r0
    12e4:	e7e1      	b.n	12aa <strlen+0x1e>
    12e6:	2000      	movs	r0, #0
    12e8:	e7fa      	b.n	12e0 <strlen+0x54>
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	fefefeff 	.word	0xfefefeff
    12f0:	80808080 	.word	0x80808080

000012f4 <__fp_unlock>:
    12f4:	2000      	movs	r0, #0
    12f6:	4770      	bx	lr

000012f8 <_cleanup_r>:
    12f8:	b510      	push	{r4, lr}
    12fa:	4902      	ldr	r1, [pc, #8]	; (1304 <_cleanup_r+0xc>)
    12fc:	f000 fbf4 	bl	1ae8 <_fwalk_reent>
    1300:	bd10      	pop	{r4, pc}
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	000023b1 	.word	0x000023b1

00001308 <__sinit.part.1>:
    1308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    130a:	465f      	mov	r7, fp
    130c:	4656      	mov	r6, sl
    130e:	464d      	mov	r5, r9
    1310:	4644      	mov	r4, r8
    1312:	4b34      	ldr	r3, [pc, #208]	; (13e4 <__sinit.part.1+0xdc>)
    1314:	b4f0      	push	{r4, r5, r6, r7}
    1316:	63c3      	str	r3, [r0, #60]	; 0x3c
    1318:	23b8      	movs	r3, #184	; 0xb8
    131a:	2400      	movs	r4, #0
    131c:	2203      	movs	r2, #3
    131e:	009b      	lsls	r3, r3, #2
    1320:	50c4      	str	r4, [r0, r3]
    1322:	3304      	adds	r3, #4
    1324:	6845      	ldr	r5, [r0, #4]
    1326:	50c2      	str	r2, [r0, r3]
    1328:	3308      	adds	r3, #8
    132a:	18c2      	adds	r2, r0, r3
    132c:	3b04      	subs	r3, #4
    132e:	50c2      	str	r2, [r0, r3]
    1330:	0006      	movs	r6, r0
    1332:	2304      	movs	r3, #4
    1334:	0028      	movs	r0, r5
    1336:	602c      	str	r4, [r5, #0]
    1338:	606c      	str	r4, [r5, #4]
    133a:	60ac      	str	r4, [r5, #8]
    133c:	81ab      	strh	r3, [r5, #12]
    133e:	666c      	str	r4, [r5, #100]	; 0x64
    1340:	81ec      	strh	r4, [r5, #14]
    1342:	612c      	str	r4, [r5, #16]
    1344:	616c      	str	r4, [r5, #20]
    1346:	61ac      	str	r4, [r5, #24]
    1348:	2208      	movs	r2, #8
    134a:	2100      	movs	r1, #0
    134c:	305c      	adds	r0, #92	; 0x5c
    134e:	f000 fcc3 	bl	1cd8 <memset>
    1352:	4b25      	ldr	r3, [pc, #148]	; (13e8 <__sinit.part.1+0xe0>)
    1354:	4f25      	ldr	r7, [pc, #148]	; (13ec <__sinit.part.1+0xe4>)
    1356:	469a      	mov	sl, r3
    1358:	622b      	str	r3, [r5, #32]
    135a:	4b25      	ldr	r3, [pc, #148]	; (13f0 <__sinit.part.1+0xe8>)
    135c:	62ef      	str	r7, [r5, #44]	; 0x2c
    135e:	4699      	mov	r9, r3
    1360:	626b      	str	r3, [r5, #36]	; 0x24
    1362:	4b24      	ldr	r3, [pc, #144]	; (13f4 <__sinit.part.1+0xec>)
    1364:	61ed      	str	r5, [r5, #28]
    1366:	62ab      	str	r3, [r5, #40]	; 0x28
    1368:	68b5      	ldr	r5, [r6, #8]
    136a:	4698      	mov	r8, r3
    136c:	2309      	movs	r3, #9
    136e:	0028      	movs	r0, r5
    1370:	81ab      	strh	r3, [r5, #12]
    1372:	3b08      	subs	r3, #8
    1374:	602c      	str	r4, [r5, #0]
    1376:	606c      	str	r4, [r5, #4]
    1378:	60ac      	str	r4, [r5, #8]
    137a:	666c      	str	r4, [r5, #100]	; 0x64
    137c:	81eb      	strh	r3, [r5, #14]
    137e:	612c      	str	r4, [r5, #16]
    1380:	616c      	str	r4, [r5, #20]
    1382:	61ac      	str	r4, [r5, #24]
    1384:	2208      	movs	r2, #8
    1386:	2100      	movs	r1, #0
    1388:	305c      	adds	r0, #92	; 0x5c
    138a:	469b      	mov	fp, r3
    138c:	f000 fca4 	bl	1cd8 <memset>
    1390:	4653      	mov	r3, sl
    1392:	622b      	str	r3, [r5, #32]
    1394:	464b      	mov	r3, r9
    1396:	626b      	str	r3, [r5, #36]	; 0x24
    1398:	4643      	mov	r3, r8
    139a:	62ef      	str	r7, [r5, #44]	; 0x2c
    139c:	62ab      	str	r3, [r5, #40]	; 0x28
    139e:	61ed      	str	r5, [r5, #28]
    13a0:	68f5      	ldr	r5, [r6, #12]
    13a2:	2312      	movs	r3, #18
    13a4:	0028      	movs	r0, r5
    13a6:	81ab      	strh	r3, [r5, #12]
    13a8:	3b10      	subs	r3, #16
    13aa:	81eb      	strh	r3, [r5, #14]
    13ac:	602c      	str	r4, [r5, #0]
    13ae:	606c      	str	r4, [r5, #4]
    13b0:	60ac      	str	r4, [r5, #8]
    13b2:	666c      	str	r4, [r5, #100]	; 0x64
    13b4:	612c      	str	r4, [r5, #16]
    13b6:	616c      	str	r4, [r5, #20]
    13b8:	61ac      	str	r4, [r5, #24]
    13ba:	2208      	movs	r2, #8
    13bc:	2100      	movs	r1, #0
    13be:	305c      	adds	r0, #92	; 0x5c
    13c0:	f000 fc8a 	bl	1cd8 <memset>
    13c4:	4653      	mov	r3, sl
    13c6:	622b      	str	r3, [r5, #32]
    13c8:	464b      	mov	r3, r9
    13ca:	626b      	str	r3, [r5, #36]	; 0x24
    13cc:	4643      	mov	r3, r8
    13ce:	62ab      	str	r3, [r5, #40]	; 0x28
    13d0:	465b      	mov	r3, fp
    13d2:	62ef      	str	r7, [r5, #44]	; 0x2c
    13d4:	61ed      	str	r5, [r5, #28]
    13d6:	63b3      	str	r3, [r6, #56]	; 0x38
    13d8:	bc3c      	pop	{r2, r3, r4, r5}
    13da:	4690      	mov	r8, r2
    13dc:	4699      	mov	r9, r3
    13de:	46a2      	mov	sl, r4
    13e0:	46ab      	mov	fp, r5
    13e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13e4:	000012f9 	.word	0x000012f9
    13e8:	000021f1 	.word	0x000021f1
    13ec:	00002285 	.word	0x00002285
    13f0:	0000221d 	.word	0x0000221d
    13f4:	00002259 	.word	0x00002259

000013f8 <__fp_lock>:
    13f8:	2000      	movs	r0, #0
    13fa:	4770      	bx	lr

000013fc <__sfmoreglue>:
    13fc:	2368      	movs	r3, #104	; 0x68
    13fe:	b570      	push	{r4, r5, r6, lr}
    1400:	1e4c      	subs	r4, r1, #1
    1402:	435c      	muls	r4, r3
    1404:	000e      	movs	r6, r1
    1406:	0021      	movs	r1, r4
    1408:	3174      	adds	r1, #116	; 0x74
    140a:	f7ff fc3d 	bl	c88 <_malloc_r>
    140e:	1e05      	subs	r5, r0, #0
    1410:	d009      	beq.n	1426 <__sfmoreglue+0x2a>
    1412:	2300      	movs	r3, #0
    1414:	0022      	movs	r2, r4
    1416:	6003      	str	r3, [r0, #0]
    1418:	6046      	str	r6, [r0, #4]
    141a:	300c      	adds	r0, #12
    141c:	60a8      	str	r0, [r5, #8]
    141e:	3268      	adds	r2, #104	; 0x68
    1420:	2100      	movs	r1, #0
    1422:	f000 fc59 	bl	1cd8 <memset>
    1426:	0028      	movs	r0, r5
    1428:	bd70      	pop	{r4, r5, r6, pc}
    142a:	46c0      	nop			; (mov r8, r8)

0000142c <__sfp>:
    142c:	4b22      	ldr	r3, [pc, #136]	; (14b8 <__sfp+0x8c>)
    142e:	b570      	push	{r4, r5, r6, lr}
    1430:	681d      	ldr	r5, [r3, #0]
    1432:	0006      	movs	r6, r0
    1434:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1436:	2b00      	cmp	r3, #0
    1438:	d102      	bne.n	1440 <__sfp+0x14>
    143a:	0028      	movs	r0, r5
    143c:	f7ff ff64 	bl	1308 <__sinit.part.1>
    1440:	23b8      	movs	r3, #184	; 0xb8
    1442:	009b      	lsls	r3, r3, #2
    1444:	469c      	mov	ip, r3
    1446:	4465      	add	r5, ip
    1448:	686b      	ldr	r3, [r5, #4]
    144a:	68ac      	ldr	r4, [r5, #8]
    144c:	3b01      	subs	r3, #1
    144e:	d503      	bpl.n	1458 <__sfp+0x2c>
    1450:	e01f      	b.n	1492 <__sfp+0x66>
    1452:	3468      	adds	r4, #104	; 0x68
    1454:	3b01      	subs	r3, #1
    1456:	d31c      	bcc.n	1492 <__sfp+0x66>
    1458:	210c      	movs	r1, #12
    145a:	5e62      	ldrsh	r2, [r4, r1]
    145c:	2a00      	cmp	r2, #0
    145e:	d1f8      	bne.n	1452 <__sfp+0x26>
    1460:	2301      	movs	r3, #1
    1462:	2500      	movs	r5, #0
    1464:	0020      	movs	r0, r4
    1466:	425b      	negs	r3, r3
    1468:	81e3      	strh	r3, [r4, #14]
    146a:	3302      	adds	r3, #2
    146c:	81a3      	strh	r3, [r4, #12]
    146e:	6665      	str	r5, [r4, #100]	; 0x64
    1470:	6025      	str	r5, [r4, #0]
    1472:	60a5      	str	r5, [r4, #8]
    1474:	6065      	str	r5, [r4, #4]
    1476:	6125      	str	r5, [r4, #16]
    1478:	6165      	str	r5, [r4, #20]
    147a:	61a5      	str	r5, [r4, #24]
    147c:	305c      	adds	r0, #92	; 0x5c
    147e:	2208      	movs	r2, #8
    1480:	2100      	movs	r1, #0
    1482:	f000 fc29 	bl	1cd8 <memset>
    1486:	0020      	movs	r0, r4
    1488:	6325      	str	r5, [r4, #48]	; 0x30
    148a:	6365      	str	r5, [r4, #52]	; 0x34
    148c:	6465      	str	r5, [r4, #68]	; 0x44
    148e:	64a5      	str	r5, [r4, #72]	; 0x48
    1490:	bd70      	pop	{r4, r5, r6, pc}
    1492:	682b      	ldr	r3, [r5, #0]
    1494:	2b00      	cmp	r3, #0
    1496:	d001      	beq.n	149c <__sfp+0x70>
    1498:	001d      	movs	r5, r3
    149a:	e7d5      	b.n	1448 <__sfp+0x1c>
    149c:	2104      	movs	r1, #4
    149e:	0030      	movs	r0, r6
    14a0:	f7ff ffac 	bl	13fc <__sfmoreglue>
    14a4:	6028      	str	r0, [r5, #0]
    14a6:	2800      	cmp	r0, #0
    14a8:	d001      	beq.n	14ae <__sfp+0x82>
    14aa:	0005      	movs	r5, r0
    14ac:	e7cc      	b.n	1448 <__sfp+0x1c>
    14ae:	230c      	movs	r3, #12
    14b0:	2000      	movs	r0, #0
    14b2:	6033      	str	r3, [r6, #0]
    14b4:	e7ec      	b.n	1490 <__sfp+0x64>
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	000027c8 	.word	0x000027c8

000014bc <_cleanup>:
    14bc:	b510      	push	{r4, lr}
    14be:	4b03      	ldr	r3, [pc, #12]	; (14cc <_cleanup+0x10>)
    14c0:	4903      	ldr	r1, [pc, #12]	; (14d0 <_cleanup+0x14>)
    14c2:	6818      	ldr	r0, [r3, #0]
    14c4:	f000 fb10 	bl	1ae8 <_fwalk_reent>
    14c8:	bd10      	pop	{r4, pc}
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	000027c8 	.word	0x000027c8
    14d0:	000023b1 	.word	0x000023b1

000014d4 <__sinit>:
    14d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    14d6:	b510      	push	{r4, lr}
    14d8:	2b00      	cmp	r3, #0
    14da:	d101      	bne.n	14e0 <__sinit+0xc>
    14dc:	f7ff ff14 	bl	1308 <__sinit.part.1>
    14e0:	bd10      	pop	{r4, pc}
    14e2:	46c0      	nop			; (mov r8, r8)

000014e4 <__sfp_lock_acquire>:
    14e4:	4770      	bx	lr
    14e6:	46c0      	nop			; (mov r8, r8)

000014e8 <__sfp_lock_release>:
    14e8:	4770      	bx	lr
    14ea:	46c0      	nop			; (mov r8, r8)

000014ec <__sinit_lock_acquire>:
    14ec:	4770      	bx	lr
    14ee:	46c0      	nop			; (mov r8, r8)

000014f0 <__sinit_lock_release>:
    14f0:	4770      	bx	lr
    14f2:	46c0      	nop			; (mov r8, r8)

000014f4 <__fp_lock_all>:
    14f4:	b510      	push	{r4, lr}
    14f6:	4b03      	ldr	r3, [pc, #12]	; (1504 <__fp_lock_all+0x10>)
    14f8:	4903      	ldr	r1, [pc, #12]	; (1508 <__fp_lock_all+0x14>)
    14fa:	6818      	ldr	r0, [r3, #0]
    14fc:	f000 fad2 	bl	1aa4 <_fwalk>
    1500:	bd10      	pop	{r4, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	10010d40 	.word	0x10010d40
    1508:	000013f9 	.word	0x000013f9

0000150c <__fp_unlock_all>:
    150c:	b510      	push	{r4, lr}
    150e:	4b03      	ldr	r3, [pc, #12]	; (151c <__fp_unlock_all+0x10>)
    1510:	4903      	ldr	r1, [pc, #12]	; (1520 <__fp_unlock_all+0x14>)
    1512:	6818      	ldr	r0, [r3, #0]
    1514:	f000 fac6 	bl	1aa4 <_fwalk>
    1518:	bd10      	pop	{r4, pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	10010d40 	.word	0x10010d40
    1520:	000012f5 	.word	0x000012f5

00001524 <_malloc_trim_r>:
    1524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1526:	000c      	movs	r4, r1
    1528:	0006      	movs	r6, r0
    152a:	f7ff fe57 	bl	11dc <__malloc_lock>
    152e:	4f20      	ldr	r7, [pc, #128]	; (15b0 <_malloc_trim_r+0x8c>)
    1530:	68bb      	ldr	r3, [r7, #8]
    1532:	685d      	ldr	r5, [r3, #4]
    1534:	2303      	movs	r3, #3
    1536:	439d      	bics	r5, r3
    1538:	4b1e      	ldr	r3, [pc, #120]	; (15b4 <_malloc_trim_r+0x90>)
    153a:	1b2c      	subs	r4, r5, r4
    153c:	469c      	mov	ip, r3
    153e:	4464      	add	r4, ip
    1540:	0b24      	lsrs	r4, r4, #12
    1542:	4b1d      	ldr	r3, [pc, #116]	; (15b8 <_malloc_trim_r+0x94>)
    1544:	3c01      	subs	r4, #1
    1546:	0324      	lsls	r4, r4, #12
    1548:	429c      	cmp	r4, r3
    154a:	dd07      	ble.n	155c <_malloc_trim_r+0x38>
    154c:	2100      	movs	r1, #0
    154e:	0030      	movs	r0, r6
    1550:	f7ff fe8a 	bl	1268 <_sbrk_r>
    1554:	68bb      	ldr	r3, [r7, #8]
    1556:	195b      	adds	r3, r3, r5
    1558:	4298      	cmp	r0, r3
    155a:	d004      	beq.n	1566 <_malloc_trim_r+0x42>
    155c:	0030      	movs	r0, r6
    155e:	f7ff fe3f 	bl	11e0 <__malloc_unlock>
    1562:	2000      	movs	r0, #0
    1564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1566:	4261      	negs	r1, r4
    1568:	0030      	movs	r0, r6
    156a:	f7ff fe7d 	bl	1268 <_sbrk_r>
    156e:	1c43      	adds	r3, r0, #1
    1570:	d00d      	beq.n	158e <_malloc_trim_r+0x6a>
    1572:	2301      	movs	r3, #1
    1574:	1b2d      	subs	r5, r5, r4
    1576:	68ba      	ldr	r2, [r7, #8]
    1578:	431d      	orrs	r5, r3
    157a:	4b10      	ldr	r3, [pc, #64]	; (15bc <_malloc_trim_r+0x98>)
    157c:	6055      	str	r5, [r2, #4]
    157e:	681a      	ldr	r2, [r3, #0]
    1580:	0030      	movs	r0, r6
    1582:	1b14      	subs	r4, r2, r4
    1584:	601c      	str	r4, [r3, #0]
    1586:	f7ff fe2b 	bl	11e0 <__malloc_unlock>
    158a:	2001      	movs	r0, #1
    158c:	e7ea      	b.n	1564 <_malloc_trim_r+0x40>
    158e:	2100      	movs	r1, #0
    1590:	0030      	movs	r0, r6
    1592:	f7ff fe69 	bl	1268 <_sbrk_r>
    1596:	68bb      	ldr	r3, [r7, #8]
    1598:	1ac2      	subs	r2, r0, r3
    159a:	2a0f      	cmp	r2, #15
    159c:	ddde      	ble.n	155c <_malloc_trim_r+0x38>
    159e:	4908      	ldr	r1, [pc, #32]	; (15c0 <_malloc_trim_r+0x9c>)
    15a0:	6809      	ldr	r1, [r1, #0]
    15a2:	1a40      	subs	r0, r0, r1
    15a4:	4905      	ldr	r1, [pc, #20]	; (15bc <_malloc_trim_r+0x98>)
    15a6:	6008      	str	r0, [r1, #0]
    15a8:	2101      	movs	r1, #1
    15aa:	430a      	orrs	r2, r1
    15ac:	605a      	str	r2, [r3, #4]
    15ae:	e7d5      	b.n	155c <_malloc_trim_r+0x38>
    15b0:	10010504 	.word	0x10010504
    15b4:	00000fef 	.word	0x00000fef
    15b8:	00000fff 	.word	0x00000fff
    15bc:	10010dfc 	.word	0x10010dfc
    15c0:	10010910 	.word	0x10010910

000015c4 <_free_r>:
    15c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15c6:	4647      	mov	r7, r8
    15c8:	0005      	movs	r5, r0
    15ca:	b480      	push	{r7}
    15cc:	1e0c      	subs	r4, r1, #0
    15ce:	d03e      	beq.n	164e <_free_r+0x8a>
    15d0:	f7ff fe04 	bl	11dc <__malloc_lock>
    15d4:	2301      	movs	r3, #1
    15d6:	0021      	movs	r1, r4
    15d8:	4698      	mov	r8, r3
    15da:	3908      	subs	r1, #8
    15dc:	684e      	ldr	r6, [r1, #4]
    15de:	4642      	mov	r2, r8
    15e0:	0033      	movs	r3, r6
    15e2:	2003      	movs	r0, #3
    15e4:	4393      	bics	r3, r2
    15e6:	18cc      	adds	r4, r1, r3
    15e8:	6862      	ldr	r2, [r4, #4]
    15ea:	4382      	bics	r2, r0
    15ec:	4860      	ldr	r0, [pc, #384]	; (1770 <_free_r+0x1ac>)
    15ee:	6887      	ldr	r7, [r0, #8]
    15f0:	42bc      	cmp	r4, r7
    15f2:	d05a      	beq.n	16aa <_free_r+0xe6>
    15f4:	4647      	mov	r7, r8
    15f6:	6062      	str	r2, [r4, #4]
    15f8:	4237      	tst	r7, r6
    15fa:	d10b      	bne.n	1614 <_free_r+0x50>
    15fc:	2708      	movs	r7, #8
    15fe:	46bc      	mov	ip, r7
    1600:	680e      	ldr	r6, [r1, #0]
    1602:	4484      	add	ip, r0
    1604:	1b89      	subs	r1, r1, r6
    1606:	199b      	adds	r3, r3, r6
    1608:	688e      	ldr	r6, [r1, #8]
    160a:	4566      	cmp	r6, ip
    160c:	d066      	beq.n	16dc <_free_r+0x118>
    160e:	68cf      	ldr	r7, [r1, #12]
    1610:	60f7      	str	r7, [r6, #12]
    1612:	60be      	str	r6, [r7, #8]
    1614:	2601      	movs	r6, #1
    1616:	18a7      	adds	r7, r4, r2
    1618:	687f      	ldr	r7, [r7, #4]
    161a:	4237      	tst	r7, r6
    161c:	d036      	beq.n	168c <_free_r+0xc8>
    161e:	4a55      	ldr	r2, [pc, #340]	; (1774 <_free_r+0x1b0>)
    1620:	431e      	orrs	r6, r3
    1622:	604e      	str	r6, [r1, #4]
    1624:	50cb      	str	r3, [r1, r3]
    1626:	4293      	cmp	r3, r2
    1628:	d814      	bhi.n	1654 <_free_r+0x90>
    162a:	08db      	lsrs	r3, r3, #3
    162c:	3aff      	subs	r2, #255	; 0xff
    162e:	109c      	asrs	r4, r3, #2
    1630:	3aff      	subs	r2, #255	; 0xff
    1632:	40a2      	lsls	r2, r4
    1634:	6844      	ldr	r4, [r0, #4]
    1636:	00db      	lsls	r3, r3, #3
    1638:	4322      	orrs	r2, r4
    163a:	6042      	str	r2, [r0, #4]
    163c:	1818      	adds	r0, r3, r0
    163e:	6883      	ldr	r3, [r0, #8]
    1640:	60c8      	str	r0, [r1, #12]
    1642:	608b      	str	r3, [r1, #8]
    1644:	6081      	str	r1, [r0, #8]
    1646:	60d9      	str	r1, [r3, #12]
    1648:	0028      	movs	r0, r5
    164a:	f7ff fdc9 	bl	11e0 <__malloc_unlock>
    164e:	bc04      	pop	{r2}
    1650:	4690      	mov	r8, r2
    1652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1654:	0a5a      	lsrs	r2, r3, #9
    1656:	2a04      	cmp	r2, #4
    1658:	d84f      	bhi.n	16fa <_free_r+0x136>
    165a:	099c      	lsrs	r4, r3, #6
    165c:	0026      	movs	r6, r4
    165e:	3439      	adds	r4, #57	; 0x39
    1660:	3638      	adds	r6, #56	; 0x38
    1662:	0064      	lsls	r4, r4, #1
    1664:	00a4      	lsls	r4, r4, #2
    1666:	1904      	adds	r4, r0, r4
    1668:	3c08      	subs	r4, #8
    166a:	68a2      	ldr	r2, [r4, #8]
    166c:	2703      	movs	r7, #3
    166e:	4294      	cmp	r4, r2
    1670:	d04a      	beq.n	1708 <_free_r+0x144>
    1672:	6850      	ldr	r0, [r2, #4]
    1674:	43b8      	bics	r0, r7
    1676:	4283      	cmp	r3, r0
    1678:	d202      	bcs.n	1680 <_free_r+0xbc>
    167a:	6892      	ldr	r2, [r2, #8]
    167c:	4294      	cmp	r4, r2
    167e:	d1f8      	bne.n	1672 <_free_r+0xae>
    1680:	68d4      	ldr	r4, [r2, #12]
    1682:	60cc      	str	r4, [r1, #12]
    1684:	608a      	str	r2, [r1, #8]
    1686:	60a1      	str	r1, [r4, #8]
    1688:	60d1      	str	r1, [r2, #12]
    168a:	e7dd      	b.n	1648 <_free_r+0x84>
    168c:	189b      	adds	r3, r3, r2
    168e:	4f3a      	ldr	r7, [pc, #232]	; (1778 <_free_r+0x1b4>)
    1690:	68a2      	ldr	r2, [r4, #8]
    1692:	42ba      	cmp	r2, r7
    1694:	d040      	beq.n	1718 <_free_r+0x154>
    1696:	68e4      	ldr	r4, [r4, #12]
    1698:	431e      	orrs	r6, r3
    169a:	60d4      	str	r4, [r2, #12]
    169c:	60a2      	str	r2, [r4, #8]
    169e:	4a35      	ldr	r2, [pc, #212]	; (1774 <_free_r+0x1b0>)
    16a0:	604e      	str	r6, [r1, #4]
    16a2:	50cb      	str	r3, [r1, r3]
    16a4:	4293      	cmp	r3, r2
    16a6:	d8d5      	bhi.n	1654 <_free_r+0x90>
    16a8:	e7bf      	b.n	162a <_free_r+0x66>
    16aa:	189b      	adds	r3, r3, r2
    16ac:	4642      	mov	r2, r8
    16ae:	4232      	tst	r2, r6
    16b0:	d106      	bne.n	16c0 <_free_r+0xfc>
    16b2:	680a      	ldr	r2, [r1, #0]
    16b4:	1a89      	subs	r1, r1, r2
    16b6:	688c      	ldr	r4, [r1, #8]
    16b8:	189b      	adds	r3, r3, r2
    16ba:	68ca      	ldr	r2, [r1, #12]
    16bc:	60e2      	str	r2, [r4, #12]
    16be:	6094      	str	r4, [r2, #8]
    16c0:	2401      	movs	r4, #1
    16c2:	4a2e      	ldr	r2, [pc, #184]	; (177c <_free_r+0x1b8>)
    16c4:	431c      	orrs	r4, r3
    16c6:	6812      	ldr	r2, [r2, #0]
    16c8:	604c      	str	r4, [r1, #4]
    16ca:	6081      	str	r1, [r0, #8]
    16cc:	4293      	cmp	r3, r2
    16ce:	d3bb      	bcc.n	1648 <_free_r+0x84>
    16d0:	4b2b      	ldr	r3, [pc, #172]	; (1780 <_free_r+0x1bc>)
    16d2:	0028      	movs	r0, r5
    16d4:	6819      	ldr	r1, [r3, #0]
    16d6:	f7ff ff25 	bl	1524 <_malloc_trim_r>
    16da:	e7b5      	b.n	1648 <_free_r+0x84>
    16dc:	4646      	mov	r6, r8
    16de:	18a0      	adds	r0, r4, r2
    16e0:	6840      	ldr	r0, [r0, #4]
    16e2:	4230      	tst	r0, r6
    16e4:	d13e      	bne.n	1764 <_free_r+0x1a0>
    16e6:	68a0      	ldr	r0, [r4, #8]
    16e8:	18d3      	adds	r3, r2, r3
    16ea:	68e2      	ldr	r2, [r4, #12]
    16ec:	60c2      	str	r2, [r0, #12]
    16ee:	6090      	str	r0, [r2, #8]
    16f0:	4642      	mov	r2, r8
    16f2:	431a      	orrs	r2, r3
    16f4:	604a      	str	r2, [r1, #4]
    16f6:	50cb      	str	r3, [r1, r3]
    16f8:	e7a6      	b.n	1648 <_free_r+0x84>
    16fa:	2a14      	cmp	r2, #20
    16fc:	d814      	bhi.n	1728 <_free_r+0x164>
    16fe:	0016      	movs	r6, r2
    1700:	325c      	adds	r2, #92	; 0x5c
    1702:	365b      	adds	r6, #91	; 0x5b
    1704:	0054      	lsls	r4, r2, #1
    1706:	e7ad      	b.n	1664 <_free_r+0xa0>
    1708:	2301      	movs	r3, #1
    170a:	10b6      	asrs	r6, r6, #2
    170c:	40b3      	lsls	r3, r6
    170e:	6842      	ldr	r2, [r0, #4]
    1710:	4313      	orrs	r3, r2
    1712:	6043      	str	r3, [r0, #4]
    1714:	0022      	movs	r2, r4
    1716:	e7b4      	b.n	1682 <_free_r+0xbe>
    1718:	431e      	orrs	r6, r3
    171a:	60d1      	str	r1, [r2, #12]
    171c:	6091      	str	r1, [r2, #8]
    171e:	60ca      	str	r2, [r1, #12]
    1720:	608a      	str	r2, [r1, #8]
    1722:	604e      	str	r6, [r1, #4]
    1724:	50cb      	str	r3, [r1, r3]
    1726:	e78f      	b.n	1648 <_free_r+0x84>
    1728:	2a54      	cmp	r2, #84	; 0x54
    172a:	d805      	bhi.n	1738 <_free_r+0x174>
    172c:	0b1c      	lsrs	r4, r3, #12
    172e:	0026      	movs	r6, r4
    1730:	346f      	adds	r4, #111	; 0x6f
    1732:	366e      	adds	r6, #110	; 0x6e
    1734:	0064      	lsls	r4, r4, #1
    1736:	e795      	b.n	1664 <_free_r+0xa0>
    1738:	24aa      	movs	r4, #170	; 0xaa
    173a:	0064      	lsls	r4, r4, #1
    173c:	42a2      	cmp	r2, r4
    173e:	d805      	bhi.n	174c <_free_r+0x188>
    1740:	0bdc      	lsrs	r4, r3, #15
    1742:	0026      	movs	r6, r4
    1744:	3478      	adds	r4, #120	; 0x78
    1746:	3677      	adds	r6, #119	; 0x77
    1748:	0064      	lsls	r4, r4, #1
    174a:	e78b      	b.n	1664 <_free_r+0xa0>
    174c:	4c0d      	ldr	r4, [pc, #52]	; (1784 <_free_r+0x1c0>)
    174e:	42a2      	cmp	r2, r4
    1750:	d805      	bhi.n	175e <_free_r+0x19a>
    1752:	0c9c      	lsrs	r4, r3, #18
    1754:	0026      	movs	r6, r4
    1756:	347d      	adds	r4, #125	; 0x7d
    1758:	367c      	adds	r6, #124	; 0x7c
    175a:	0064      	lsls	r4, r4, #1
    175c:	e782      	b.n	1664 <_free_r+0xa0>
    175e:	24fe      	movs	r4, #254	; 0xfe
    1760:	267e      	movs	r6, #126	; 0x7e
    1762:	e77f      	b.n	1664 <_free_r+0xa0>
    1764:	4642      	mov	r2, r8
    1766:	431a      	orrs	r2, r3
    1768:	604a      	str	r2, [r1, #4]
    176a:	50cb      	str	r3, [r1, r3]
    176c:	e76c      	b.n	1648 <_free_r+0x84>
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	10010504 	.word	0x10010504
    1774:	000001ff 	.word	0x000001ff
    1778:	1001050c 	.word	0x1001050c
    177c:	1001090c 	.word	0x1001090c
    1780:	10010df8 	.word	0x10010df8
    1784:	00000554 	.word	0x00000554

00001788 <__sfvwrite_r>:
    1788:	b5f0      	push	{r4, r5, r6, r7, lr}
    178a:	4656      	mov	r6, sl
    178c:	4644      	mov	r4, r8
    178e:	465f      	mov	r7, fp
    1790:	464d      	mov	r5, r9
    1792:	b4f0      	push	{r4, r5, r6, r7}
    1794:	6893      	ldr	r3, [r2, #8]
    1796:	b085      	sub	sp, #20
    1798:	9001      	str	r0, [sp, #4]
    179a:	000c      	movs	r4, r1
    179c:	4692      	mov	sl, r2
    179e:	2b00      	cmp	r3, #0
    17a0:	d025      	beq.n	17ee <__sfvwrite_r+0x66>
    17a2:	898b      	ldrh	r3, [r1, #12]
    17a4:	071a      	lsls	r2, r3, #28
    17a6:	d52a      	bpl.n	17fe <__sfvwrite_r+0x76>
    17a8:	690a      	ldr	r2, [r1, #16]
    17aa:	2a00      	cmp	r2, #0
    17ac:	d027      	beq.n	17fe <__sfvwrite_r+0x76>
    17ae:	4652      	mov	r2, sl
    17b0:	6812      	ldr	r2, [r2, #0]
    17b2:	4693      	mov	fp, r2
    17b4:	079a      	lsls	r2, r3, #30
    17b6:	d52f      	bpl.n	1818 <__sfvwrite_r+0x90>
    17b8:	4bb7      	ldr	r3, [pc, #732]	; (1a98 <__sfvwrite_r+0x310>)
    17ba:	2600      	movs	r6, #0
    17bc:	2500      	movs	r5, #0
    17be:	4698      	mov	r8, r3
    17c0:	2d00      	cmp	r5, #0
    17c2:	d100      	bne.n	17c6 <__sfvwrite_r+0x3e>
    17c4:	e06d      	b.n	18a2 <__sfvwrite_r+0x11a>
    17c6:	002b      	movs	r3, r5
    17c8:	4545      	cmp	r5, r8
    17ca:	d900      	bls.n	17ce <__sfvwrite_r+0x46>
    17cc:	4bb2      	ldr	r3, [pc, #712]	; (1a98 <__sfvwrite_r+0x310>)
    17ce:	0032      	movs	r2, r6
    17d0:	69e1      	ldr	r1, [r4, #28]
    17d2:	9801      	ldr	r0, [sp, #4]
    17d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
    17d6:	47b8      	blx	r7
    17d8:	2800      	cmp	r0, #0
    17da:	dc00      	bgt.n	17de <__sfvwrite_r+0x56>
    17dc:	e079      	b.n	18d2 <__sfvwrite_r+0x14a>
    17de:	4653      	mov	r3, sl
    17e0:	689b      	ldr	r3, [r3, #8]
    17e2:	1836      	adds	r6, r6, r0
    17e4:	1a2d      	subs	r5, r5, r0
    17e6:	1a18      	subs	r0, r3, r0
    17e8:	4653      	mov	r3, sl
    17ea:	6098      	str	r0, [r3, #8]
    17ec:	d1e8      	bne.n	17c0 <__sfvwrite_r+0x38>
    17ee:	2000      	movs	r0, #0
    17f0:	b005      	add	sp, #20
    17f2:	bc3c      	pop	{r2, r3, r4, r5}
    17f4:	4690      	mov	r8, r2
    17f6:	4699      	mov	r9, r3
    17f8:	46a2      	mov	sl, r4
    17fa:	46ab      	mov	fp, r5
    17fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17fe:	0021      	movs	r1, r4
    1800:	9801      	ldr	r0, [sp, #4]
    1802:	f000 fd59 	bl	22b8 <__swsetup_r>
    1806:	2800      	cmp	r0, #0
    1808:	d000      	beq.n	180c <__sfvwrite_r+0x84>
    180a:	e13b      	b.n	1a84 <__sfvwrite_r+0x2fc>
    180c:	4652      	mov	r2, sl
    180e:	89a3      	ldrh	r3, [r4, #12]
    1810:	6812      	ldr	r2, [r2, #0]
    1812:	4693      	mov	fp, r2
    1814:	079a      	lsls	r2, r3, #30
    1816:	d4cf      	bmi.n	17b8 <__sfvwrite_r+0x30>
    1818:	07da      	lsls	r2, r3, #31
    181a:	d562      	bpl.n	18e2 <__sfvwrite_r+0x15a>
    181c:	2300      	movs	r3, #0
    181e:	2700      	movs	r7, #0
    1820:	4699      	mov	r9, r3
    1822:	001d      	movs	r5, r3
    1824:	9302      	str	r3, [sp, #8]
    1826:	2f00      	cmp	r7, #0
    1828:	d030      	beq.n	188c <__sfvwrite_r+0x104>
    182a:	9b02      	ldr	r3, [sp, #8]
    182c:	2b00      	cmp	r3, #0
    182e:	d100      	bne.n	1832 <__sfvwrite_r+0xaa>
    1830:	e0c3      	b.n	19ba <__sfvwrite_r+0x232>
    1832:	002e      	movs	r6, r5
    1834:	42bd      	cmp	r5, r7
    1836:	d900      	bls.n	183a <__sfvwrite_r+0xb2>
    1838:	003e      	movs	r6, r7
    183a:	6820      	ldr	r0, [r4, #0]
    183c:	6922      	ldr	r2, [r4, #16]
    183e:	46b0      	mov	r8, r6
    1840:	6963      	ldr	r3, [r4, #20]
    1842:	4290      	cmp	r0, r2
    1844:	d907      	bls.n	1856 <__sfvwrite_r+0xce>
    1846:	68a2      	ldr	r2, [r4, #8]
    1848:	4694      	mov	ip, r2
    184a:	449c      	add	ip, r3
    184c:	4662      	mov	r2, ip
    184e:	9203      	str	r2, [sp, #12]
    1850:	4566      	cmp	r6, ip
    1852:	dd00      	ble.n	1856 <__sfvwrite_r+0xce>
    1854:	e0ef      	b.n	1a36 <__sfvwrite_r+0x2ae>
    1856:	429e      	cmp	r6, r3
    1858:	da00      	bge.n	185c <__sfvwrite_r+0xd4>
    185a:	e092      	b.n	1982 <__sfvwrite_r+0x1fa>
    185c:	464a      	mov	r2, r9
    185e:	69e1      	ldr	r1, [r4, #28]
    1860:	9801      	ldr	r0, [sp, #4]
    1862:	6a66      	ldr	r6, [r4, #36]	; 0x24
    1864:	47b0      	blx	r6
    1866:	4680      	mov	r8, r0
    1868:	2800      	cmp	r0, #0
    186a:	dd32      	ble.n	18d2 <__sfvwrite_r+0x14a>
    186c:	4643      	mov	r3, r8
    186e:	1aed      	subs	r5, r5, r3
    1870:	d100      	bne.n	1874 <__sfvwrite_r+0xec>
    1872:	e095      	b.n	19a0 <__sfvwrite_r+0x218>
    1874:	4643      	mov	r3, r8
    1876:	1aff      	subs	r7, r7, r3
    1878:	4653      	mov	r3, sl
    187a:	4642      	mov	r2, r8
    187c:	689b      	ldr	r3, [r3, #8]
    187e:	44c1      	add	r9, r8
    1880:	1a9b      	subs	r3, r3, r2
    1882:	4652      	mov	r2, sl
    1884:	6093      	str	r3, [r2, #8]
    1886:	d0b2      	beq.n	17ee <__sfvwrite_r+0x66>
    1888:	2f00      	cmp	r7, #0
    188a:	d1ce      	bne.n	182a <__sfvwrite_r+0xa2>
    188c:	465b      	mov	r3, fp
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	4699      	mov	r9, r3
    1892:	465b      	mov	r3, fp
    1894:	685f      	ldr	r7, [r3, #4]
    1896:	2308      	movs	r3, #8
    1898:	469c      	mov	ip, r3
    189a:	2300      	movs	r3, #0
    189c:	44e3      	add	fp, ip
    189e:	9302      	str	r3, [sp, #8]
    18a0:	e7c1      	b.n	1826 <__sfvwrite_r+0x9e>
    18a2:	465b      	mov	r3, fp
    18a4:	681e      	ldr	r6, [r3, #0]
    18a6:	685d      	ldr	r5, [r3, #4]
    18a8:	2308      	movs	r3, #8
    18aa:	469c      	mov	ip, r3
    18ac:	44e3      	add	fp, ip
    18ae:	e787      	b.n	17c0 <__sfvwrite_r+0x38>
    18b0:	4b7a      	ldr	r3, [pc, #488]	; (1a9c <__sfvwrite_r+0x314>)
    18b2:	0030      	movs	r0, r6
    18b4:	429e      	cmp	r6, r3
    18b6:	d900      	bls.n	18ba <__sfvwrite_r+0x132>
    18b8:	0018      	movs	r0, r3
    18ba:	4641      	mov	r1, r8
    18bc:	f7ff f98f 	bl	bde <__aeabi_idiv>
    18c0:	4643      	mov	r3, r8
    18c2:	003a      	movs	r2, r7
    18c4:	4343      	muls	r3, r0
    18c6:	69e1      	ldr	r1, [r4, #28]
    18c8:	9801      	ldr	r0, [sp, #4]
    18ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
    18cc:	47a8      	blx	r5
    18ce:	2800      	cmp	r0, #0
    18d0:	dc23      	bgt.n	191a <__sfvwrite_r+0x192>
    18d2:	230c      	movs	r3, #12
    18d4:	5ee2      	ldrsh	r2, [r4, r3]
    18d6:	2340      	movs	r3, #64	; 0x40
    18d8:	2001      	movs	r0, #1
    18da:	4313      	orrs	r3, r2
    18dc:	81a3      	strh	r3, [r4, #12]
    18de:	4240      	negs	r0, r0
    18e0:	e786      	b.n	17f0 <__sfvwrite_r+0x68>
    18e2:	2700      	movs	r7, #0
    18e4:	2600      	movs	r6, #0
    18e6:	2e00      	cmp	r6, #0
    18e8:	d023      	beq.n	1932 <__sfvwrite_r+0x1aa>
    18ea:	2280      	movs	r2, #128	; 0x80
    18ec:	0092      	lsls	r2, r2, #2
    18ee:	68a5      	ldr	r5, [r4, #8]
    18f0:	4213      	tst	r3, r2
    18f2:	d025      	beq.n	1940 <__sfvwrite_r+0x1b8>
    18f4:	46a8      	mov	r8, r5
    18f6:	42ae      	cmp	r6, r5
    18f8:	d35b      	bcc.n	19b2 <__sfvwrite_r+0x22a>
    18fa:	2290      	movs	r2, #144	; 0x90
    18fc:	00d2      	lsls	r2, r2, #3
    18fe:	4213      	tst	r3, r2
    1900:	d168      	bne.n	19d4 <__sfvwrite_r+0x24c>
    1902:	6820      	ldr	r0, [r4, #0]
    1904:	4642      	mov	r2, r8
    1906:	0039      	movs	r1, r7
    1908:	f000 f99a 	bl	1c40 <memmove>
    190c:	0030      	movs	r0, r6
    190e:	68a3      	ldr	r3, [r4, #8]
    1910:	1b5d      	subs	r5, r3, r5
    1912:	6823      	ldr	r3, [r4, #0]
    1914:	60a5      	str	r5, [r4, #8]
    1916:	4443      	add	r3, r8
    1918:	6023      	str	r3, [r4, #0]
    191a:	4653      	mov	r3, sl
    191c:	689b      	ldr	r3, [r3, #8]
    191e:	183f      	adds	r7, r7, r0
    1920:	1a36      	subs	r6, r6, r0
    1922:	1a18      	subs	r0, r3, r0
    1924:	4653      	mov	r3, sl
    1926:	6098      	str	r0, [r3, #8]
    1928:	d100      	bne.n	192c <__sfvwrite_r+0x1a4>
    192a:	e760      	b.n	17ee <__sfvwrite_r+0x66>
    192c:	89a3      	ldrh	r3, [r4, #12]
    192e:	2e00      	cmp	r6, #0
    1930:	d1db      	bne.n	18ea <__sfvwrite_r+0x162>
    1932:	465a      	mov	r2, fp
    1934:	6817      	ldr	r7, [r2, #0]
    1936:	6856      	ldr	r6, [r2, #4]
    1938:	2208      	movs	r2, #8
    193a:	4694      	mov	ip, r2
    193c:	44e3      	add	fp, ip
    193e:	e7d2      	b.n	18e6 <__sfvwrite_r+0x15e>
    1940:	6820      	ldr	r0, [r4, #0]
    1942:	6923      	ldr	r3, [r4, #16]
    1944:	4298      	cmp	r0, r3
    1946:	d803      	bhi.n	1950 <__sfvwrite_r+0x1c8>
    1948:	6963      	ldr	r3, [r4, #20]
    194a:	4698      	mov	r8, r3
    194c:	429e      	cmp	r6, r3
    194e:	d2af      	bcs.n	18b0 <__sfvwrite_r+0x128>
    1950:	42b5      	cmp	r5, r6
    1952:	d900      	bls.n	1956 <__sfvwrite_r+0x1ce>
    1954:	0035      	movs	r5, r6
    1956:	002a      	movs	r2, r5
    1958:	0039      	movs	r1, r7
    195a:	f000 f971 	bl	1c40 <memmove>
    195e:	68a3      	ldr	r3, [r4, #8]
    1960:	6822      	ldr	r2, [r4, #0]
    1962:	1b5b      	subs	r3, r3, r5
    1964:	1952      	adds	r2, r2, r5
    1966:	60a3      	str	r3, [r4, #8]
    1968:	6022      	str	r2, [r4, #0]
    196a:	2b00      	cmp	r3, #0
    196c:	d001      	beq.n	1972 <__sfvwrite_r+0x1ea>
    196e:	0028      	movs	r0, r5
    1970:	e7d3      	b.n	191a <__sfvwrite_r+0x192>
    1972:	0021      	movs	r1, r4
    1974:	9801      	ldr	r0, [sp, #4]
    1976:	f000 fe13 	bl	25a0 <_fflush_r>
    197a:	2800      	cmp	r0, #0
    197c:	d1a9      	bne.n	18d2 <__sfvwrite_r+0x14a>
    197e:	0028      	movs	r0, r5
    1980:	e7cb      	b.n	191a <__sfvwrite_r+0x192>
    1982:	0032      	movs	r2, r6
    1984:	4649      	mov	r1, r9
    1986:	f000 f95b 	bl	1c40 <memmove>
    198a:	68a3      	ldr	r3, [r4, #8]
    198c:	1b9b      	subs	r3, r3, r6
    198e:	60a3      	str	r3, [r4, #8]
    1990:	6823      	ldr	r3, [r4, #0]
    1992:	469c      	mov	ip, r3
    1994:	4643      	mov	r3, r8
    1996:	4466      	add	r6, ip
    1998:	6026      	str	r6, [r4, #0]
    199a:	1aed      	subs	r5, r5, r3
    199c:	d000      	beq.n	19a0 <__sfvwrite_r+0x218>
    199e:	e769      	b.n	1874 <__sfvwrite_r+0xec>
    19a0:	0021      	movs	r1, r4
    19a2:	9801      	ldr	r0, [sp, #4]
    19a4:	f000 fdfc 	bl	25a0 <_fflush_r>
    19a8:	2800      	cmp	r0, #0
    19aa:	d192      	bne.n	18d2 <__sfvwrite_r+0x14a>
    19ac:	2300      	movs	r3, #0
    19ae:	9302      	str	r3, [sp, #8]
    19b0:	e760      	b.n	1874 <__sfvwrite_r+0xec>
    19b2:	0035      	movs	r5, r6
    19b4:	6820      	ldr	r0, [r4, #0]
    19b6:	46b0      	mov	r8, r6
    19b8:	e7a4      	b.n	1904 <__sfvwrite_r+0x17c>
    19ba:	003a      	movs	r2, r7
    19bc:	210a      	movs	r1, #10
    19be:	4648      	mov	r0, r9
    19c0:	f000 f8b8 	bl	1b34 <memchr>
    19c4:	2800      	cmp	r0, #0
    19c6:	d059      	beq.n	1a7c <__sfvwrite_r+0x2f4>
    19c8:	464b      	mov	r3, r9
    19ca:	3001      	adds	r0, #1
    19cc:	1ac5      	subs	r5, r0, r3
    19ce:	2301      	movs	r3, #1
    19d0:	9302      	str	r3, [sp, #8]
    19d2:	e72e      	b.n	1832 <__sfvwrite_r+0xaa>
    19d4:	6921      	ldr	r1, [r4, #16]
    19d6:	6822      	ldr	r2, [r4, #0]
    19d8:	1a52      	subs	r2, r2, r1
    19da:	4691      	mov	r9, r2
    19dc:	6962      	ldr	r2, [r4, #20]
    19de:	0050      	lsls	r0, r2, #1
    19e0:	1882      	adds	r2, r0, r2
    19e2:	0fd0      	lsrs	r0, r2, #31
    19e4:	1882      	adds	r2, r0, r2
    19e6:	1052      	asrs	r2, r2, #1
    19e8:	4690      	mov	r8, r2
    19ea:	464a      	mov	r2, r9
    19ec:	1c50      	adds	r0, r2, #1
    19ee:	1980      	adds	r0, r0, r6
    19f0:	4642      	mov	r2, r8
    19f2:	4540      	cmp	r0, r8
    19f4:	d901      	bls.n	19fa <__sfvwrite_r+0x272>
    19f6:	4680      	mov	r8, r0
    19f8:	0002      	movs	r2, r0
    19fa:	055b      	lsls	r3, r3, #21
    19fc:	d52d      	bpl.n	1a5a <__sfvwrite_r+0x2d2>
    19fe:	0011      	movs	r1, r2
    1a00:	9801      	ldr	r0, [sp, #4]
    1a02:	f7ff f941 	bl	c88 <_malloc_r>
    1a06:	1e05      	subs	r5, r0, #0
    1a08:	d03f      	beq.n	1a8a <__sfvwrite_r+0x302>
    1a0a:	464a      	mov	r2, r9
    1a0c:	6921      	ldr	r1, [r4, #16]
    1a0e:	f000 f8d9 	bl	1bc4 <memcpy>
    1a12:	89a2      	ldrh	r2, [r4, #12]
    1a14:	4b22      	ldr	r3, [pc, #136]	; (1aa0 <__sfvwrite_r+0x318>)
    1a16:	4013      	ands	r3, r2
    1a18:	2280      	movs	r2, #128	; 0x80
    1a1a:	4313      	orrs	r3, r2
    1a1c:	81a3      	strh	r3, [r4, #12]
    1a1e:	4643      	mov	r3, r8
    1a20:	0028      	movs	r0, r5
    1a22:	464a      	mov	r2, r9
    1a24:	4448      	add	r0, r9
    1a26:	6163      	str	r3, [r4, #20]
    1a28:	1a9b      	subs	r3, r3, r2
    1a2a:	6125      	str	r5, [r4, #16]
    1a2c:	6020      	str	r0, [r4, #0]
    1a2e:	0035      	movs	r5, r6
    1a30:	60a3      	str	r3, [r4, #8]
    1a32:	46b0      	mov	r8, r6
    1a34:	e766      	b.n	1904 <__sfvwrite_r+0x17c>
    1a36:	4666      	mov	r6, ip
    1a38:	4649      	mov	r1, r9
    1a3a:	f000 f901 	bl	1c40 <memmove>
    1a3e:	46b4      	mov	ip, r6
    1a40:	6823      	ldr	r3, [r4, #0]
    1a42:	0021      	movs	r1, r4
    1a44:	4463      	add	r3, ip
    1a46:	6023      	str	r3, [r4, #0]
    1a48:	9801      	ldr	r0, [sp, #4]
    1a4a:	f000 fda9 	bl	25a0 <_fflush_r>
    1a4e:	2800      	cmp	r0, #0
    1a50:	d000      	beq.n	1a54 <__sfvwrite_r+0x2cc>
    1a52:	e73e      	b.n	18d2 <__sfvwrite_r+0x14a>
    1a54:	9b03      	ldr	r3, [sp, #12]
    1a56:	4698      	mov	r8, r3
    1a58:	e708      	b.n	186c <__sfvwrite_r+0xe4>
    1a5a:	9801      	ldr	r0, [sp, #4]
    1a5c:	f000 f982 	bl	1d64 <_realloc_r>
    1a60:	1e05      	subs	r5, r0, #0
    1a62:	d1dc      	bne.n	1a1e <__sfvwrite_r+0x296>
    1a64:	9d01      	ldr	r5, [sp, #4]
    1a66:	6921      	ldr	r1, [r4, #16]
    1a68:	0028      	movs	r0, r5
    1a6a:	f7ff fdab 	bl	15c4 <_free_r>
    1a6e:	2280      	movs	r2, #128	; 0x80
    1a70:	89a3      	ldrh	r3, [r4, #12]
    1a72:	4393      	bics	r3, r2
    1a74:	b21a      	sxth	r2, r3
    1a76:	230c      	movs	r3, #12
    1a78:	602b      	str	r3, [r5, #0]
    1a7a:	e72c      	b.n	18d6 <__sfvwrite_r+0x14e>
    1a7c:	2301      	movs	r3, #1
    1a7e:	1c7d      	adds	r5, r7, #1
    1a80:	9302      	str	r3, [sp, #8]
    1a82:	e6d6      	b.n	1832 <__sfvwrite_r+0xaa>
    1a84:	2001      	movs	r0, #1
    1a86:	4240      	negs	r0, r0
    1a88:	e6b2      	b.n	17f0 <__sfvwrite_r+0x68>
    1a8a:	230c      	movs	r3, #12
    1a8c:	9a01      	ldr	r2, [sp, #4]
    1a8e:	6013      	str	r3, [r2, #0]
    1a90:	230c      	movs	r3, #12
    1a92:	5ee2      	ldrsh	r2, [r4, r3]
    1a94:	e71f      	b.n	18d6 <__sfvwrite_r+0x14e>
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	7ffffc00 	.word	0x7ffffc00
    1a9c:	7fffffff 	.word	0x7fffffff
    1aa0:	fffffb7f 	.word	0xfffffb7f

00001aa4 <_fwalk>:
    1aa4:	23b8      	movs	r3, #184	; 0xb8
    1aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa8:	4647      	mov	r7, r8
    1aaa:	009b      	lsls	r3, r3, #2
    1aac:	b480      	push	{r7}
    1aae:	18c7      	adds	r7, r0, r3
    1ab0:	4688      	mov	r8, r1
    1ab2:	2600      	movs	r6, #0
    1ab4:	2f00      	cmp	r7, #0
    1ab6:	d013      	beq.n	1ae0 <_fwalk+0x3c>
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	68bc      	ldr	r4, [r7, #8]
    1abc:	1e5d      	subs	r5, r3, #1
    1abe:	d40c      	bmi.n	1ada <_fwalk+0x36>
    1ac0:	89a3      	ldrh	r3, [r4, #12]
    1ac2:	2b01      	cmp	r3, #1
    1ac4:	d906      	bls.n	1ad4 <_fwalk+0x30>
    1ac6:	220e      	movs	r2, #14
    1ac8:	5ea3      	ldrsh	r3, [r4, r2]
    1aca:	3301      	adds	r3, #1
    1acc:	d002      	beq.n	1ad4 <_fwalk+0x30>
    1ace:	0020      	movs	r0, r4
    1ad0:	47c0      	blx	r8
    1ad2:	4306      	orrs	r6, r0
    1ad4:	3468      	adds	r4, #104	; 0x68
    1ad6:	3d01      	subs	r5, #1
    1ad8:	d2f2      	bcs.n	1ac0 <_fwalk+0x1c>
    1ada:	683f      	ldr	r7, [r7, #0]
    1adc:	2f00      	cmp	r7, #0
    1ade:	d1eb      	bne.n	1ab8 <_fwalk+0x14>
    1ae0:	0030      	movs	r0, r6
    1ae2:	bc04      	pop	{r2}
    1ae4:	4690      	mov	r8, r2
    1ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ae8 <_fwalk_reent>:
    1ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aea:	464f      	mov	r7, r9
    1aec:	4646      	mov	r6, r8
    1aee:	b4c0      	push	{r6, r7}
    1af0:	27b8      	movs	r7, #184	; 0xb8
    1af2:	4680      	mov	r8, r0
    1af4:	00bf      	lsls	r7, r7, #2
    1af6:	4447      	add	r7, r8
    1af8:	4689      	mov	r9, r1
    1afa:	2600      	movs	r6, #0
    1afc:	2f00      	cmp	r7, #0
    1afe:	d014      	beq.n	1b2a <_fwalk_reent+0x42>
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	68bc      	ldr	r4, [r7, #8]
    1b04:	1e5d      	subs	r5, r3, #1
    1b06:	d40d      	bmi.n	1b24 <_fwalk_reent+0x3c>
    1b08:	89a3      	ldrh	r3, [r4, #12]
    1b0a:	2b01      	cmp	r3, #1
    1b0c:	d907      	bls.n	1b1e <_fwalk_reent+0x36>
    1b0e:	220e      	movs	r2, #14
    1b10:	5ea3      	ldrsh	r3, [r4, r2]
    1b12:	3301      	adds	r3, #1
    1b14:	d003      	beq.n	1b1e <_fwalk_reent+0x36>
    1b16:	0021      	movs	r1, r4
    1b18:	4640      	mov	r0, r8
    1b1a:	47c8      	blx	r9
    1b1c:	4306      	orrs	r6, r0
    1b1e:	3468      	adds	r4, #104	; 0x68
    1b20:	3d01      	subs	r5, #1
    1b22:	d2f1      	bcs.n	1b08 <_fwalk_reent+0x20>
    1b24:	683f      	ldr	r7, [r7, #0]
    1b26:	2f00      	cmp	r7, #0
    1b28:	d1ea      	bne.n	1b00 <_fwalk_reent+0x18>
    1b2a:	0030      	movs	r0, r6
    1b2c:	bc0c      	pop	{r2, r3}
    1b2e:	4690      	mov	r8, r2
    1b30:	4699      	mov	r9, r3
    1b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001b34 <memchr>:
    1b34:	b570      	push	{r4, r5, r6, lr}
    1b36:	b2cd      	uxtb	r5, r1
    1b38:	0783      	lsls	r3, r0, #30
    1b3a:	d03c      	beq.n	1bb6 <memchr+0x82>
    1b3c:	1e53      	subs	r3, r2, #1
    1b3e:	2a00      	cmp	r2, #0
    1b40:	d01f      	beq.n	1b82 <memchr+0x4e>
    1b42:	7802      	ldrb	r2, [r0, #0]
    1b44:	42aa      	cmp	r2, r5
    1b46:	d01d      	beq.n	1b84 <memchr+0x50>
    1b48:	2403      	movs	r4, #3
    1b4a:	e005      	b.n	1b58 <memchr+0x24>
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d018      	beq.n	1b82 <memchr+0x4e>
    1b50:	7802      	ldrb	r2, [r0, #0]
    1b52:	3b01      	subs	r3, #1
    1b54:	42aa      	cmp	r2, r5
    1b56:	d015      	beq.n	1b84 <memchr+0x50>
    1b58:	3001      	adds	r0, #1
    1b5a:	4220      	tst	r0, r4
    1b5c:	d1f6      	bne.n	1b4c <memchr+0x18>
    1b5e:	2b03      	cmp	r3, #3
    1b60:	d811      	bhi.n	1b86 <memchr+0x52>
    1b62:	2b00      	cmp	r3, #0
    1b64:	d00d      	beq.n	1b82 <memchr+0x4e>
    1b66:	7802      	ldrb	r2, [r0, #0]
    1b68:	42aa      	cmp	r2, r5
    1b6a:	d00b      	beq.n	1b84 <memchr+0x50>
    1b6c:	1c42      	adds	r2, r0, #1
    1b6e:	18c0      	adds	r0, r0, r3
    1b70:	e004      	b.n	1b7c <memchr+0x48>
    1b72:	3201      	adds	r2, #1
    1b74:	1e51      	subs	r1, r2, #1
    1b76:	7809      	ldrb	r1, [r1, #0]
    1b78:	42a9      	cmp	r1, r5
    1b7a:	d01a      	beq.n	1bb2 <memchr+0x7e>
    1b7c:	0013      	movs	r3, r2
    1b7e:	4290      	cmp	r0, r2
    1b80:	d1f7      	bne.n	1b72 <memchr+0x3e>
    1b82:	2000      	movs	r0, #0
    1b84:	bd70      	pop	{r4, r5, r6, pc}
    1b86:	22ff      	movs	r2, #255	; 0xff
    1b88:	020c      	lsls	r4, r1, #8
    1b8a:	0212      	lsls	r2, r2, #8
    1b8c:	4022      	ands	r2, r4
    1b8e:	24ff      	movs	r4, #255	; 0xff
    1b90:	4021      	ands	r1, r4
    1b92:	4311      	orrs	r1, r2
    1b94:	040c      	lsls	r4, r1, #16
    1b96:	4e09      	ldr	r6, [pc, #36]	; (1bbc <memchr+0x88>)
    1b98:	430c      	orrs	r4, r1
    1b9a:	6802      	ldr	r2, [r0, #0]
    1b9c:	4908      	ldr	r1, [pc, #32]	; (1bc0 <memchr+0x8c>)
    1b9e:	4062      	eors	r2, r4
    1ba0:	1851      	adds	r1, r2, r1
    1ba2:	4391      	bics	r1, r2
    1ba4:	4231      	tst	r1, r6
    1ba6:	d1de      	bne.n	1b66 <memchr+0x32>
    1ba8:	3b04      	subs	r3, #4
    1baa:	3004      	adds	r0, #4
    1bac:	2b03      	cmp	r3, #3
    1bae:	d8f4      	bhi.n	1b9a <memchr+0x66>
    1bb0:	e7d7      	b.n	1b62 <memchr+0x2e>
    1bb2:	0018      	movs	r0, r3
    1bb4:	e7e6      	b.n	1b84 <memchr+0x50>
    1bb6:	0013      	movs	r3, r2
    1bb8:	e7d1      	b.n	1b5e <memchr+0x2a>
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	80808080 	.word	0x80808080
    1bc0:	fefefeff 	.word	0xfefefeff

00001bc4 <memcpy>:
    1bc4:	b570      	push	{r4, r5, r6, lr}
    1bc6:	2a0f      	cmp	r2, #15
    1bc8:	d932      	bls.n	1c30 <memcpy+0x6c>
    1bca:	000c      	movs	r4, r1
    1bcc:	4304      	orrs	r4, r0
    1bce:	000b      	movs	r3, r1
    1bd0:	07a4      	lsls	r4, r4, #30
    1bd2:	d131      	bne.n	1c38 <memcpy+0x74>
    1bd4:	0015      	movs	r5, r2
    1bd6:	0004      	movs	r4, r0
    1bd8:	3d10      	subs	r5, #16
    1bda:	092d      	lsrs	r5, r5, #4
    1bdc:	3501      	adds	r5, #1
    1bde:	012d      	lsls	r5, r5, #4
    1be0:	1949      	adds	r1, r1, r5
    1be2:	681e      	ldr	r6, [r3, #0]
    1be4:	6026      	str	r6, [r4, #0]
    1be6:	685e      	ldr	r6, [r3, #4]
    1be8:	6066      	str	r6, [r4, #4]
    1bea:	689e      	ldr	r6, [r3, #8]
    1bec:	60a6      	str	r6, [r4, #8]
    1bee:	68de      	ldr	r6, [r3, #12]
    1bf0:	3310      	adds	r3, #16
    1bf2:	60e6      	str	r6, [r4, #12]
    1bf4:	3410      	adds	r4, #16
    1bf6:	4299      	cmp	r1, r3
    1bf8:	d1f3      	bne.n	1be2 <memcpy+0x1e>
    1bfa:	230f      	movs	r3, #15
    1bfc:	1945      	adds	r5, r0, r5
    1bfe:	4013      	ands	r3, r2
    1c00:	2b03      	cmp	r3, #3
    1c02:	d91b      	bls.n	1c3c <memcpy+0x78>
    1c04:	1f1c      	subs	r4, r3, #4
    1c06:	2300      	movs	r3, #0
    1c08:	08a4      	lsrs	r4, r4, #2
    1c0a:	3401      	adds	r4, #1
    1c0c:	00a4      	lsls	r4, r4, #2
    1c0e:	58ce      	ldr	r6, [r1, r3]
    1c10:	50ee      	str	r6, [r5, r3]
    1c12:	3304      	adds	r3, #4
    1c14:	429c      	cmp	r4, r3
    1c16:	d1fa      	bne.n	1c0e <memcpy+0x4a>
    1c18:	2303      	movs	r3, #3
    1c1a:	192d      	adds	r5, r5, r4
    1c1c:	1909      	adds	r1, r1, r4
    1c1e:	401a      	ands	r2, r3
    1c20:	d005      	beq.n	1c2e <memcpy+0x6a>
    1c22:	2300      	movs	r3, #0
    1c24:	5ccc      	ldrb	r4, [r1, r3]
    1c26:	54ec      	strb	r4, [r5, r3]
    1c28:	3301      	adds	r3, #1
    1c2a:	429a      	cmp	r2, r3
    1c2c:	d1fa      	bne.n	1c24 <memcpy+0x60>
    1c2e:	bd70      	pop	{r4, r5, r6, pc}
    1c30:	0005      	movs	r5, r0
    1c32:	2a00      	cmp	r2, #0
    1c34:	d1f5      	bne.n	1c22 <memcpy+0x5e>
    1c36:	e7fa      	b.n	1c2e <memcpy+0x6a>
    1c38:	0005      	movs	r5, r0
    1c3a:	e7f2      	b.n	1c22 <memcpy+0x5e>
    1c3c:	001a      	movs	r2, r3
    1c3e:	e7f8      	b.n	1c32 <memcpy+0x6e>

00001c40 <memmove>:
    1c40:	b570      	push	{r4, r5, r6, lr}
    1c42:	4288      	cmp	r0, r1
    1c44:	d90b      	bls.n	1c5e <memmove+0x1e>
    1c46:	188b      	adds	r3, r1, r2
    1c48:	4298      	cmp	r0, r3
    1c4a:	d208      	bcs.n	1c5e <memmove+0x1e>
    1c4c:	1a99      	subs	r1, r3, r2
    1c4e:	1e53      	subs	r3, r2, #1
    1c50:	2a00      	cmp	r2, #0
    1c52:	d003      	beq.n	1c5c <memmove+0x1c>
    1c54:	5cca      	ldrb	r2, [r1, r3]
    1c56:	54c2      	strb	r2, [r0, r3]
    1c58:	3b01      	subs	r3, #1
    1c5a:	d2fb      	bcs.n	1c54 <memmove+0x14>
    1c5c:	bd70      	pop	{r4, r5, r6, pc}
    1c5e:	2a0f      	cmp	r2, #15
    1c60:	d809      	bhi.n	1c76 <memmove+0x36>
    1c62:	0005      	movs	r5, r0
    1c64:	2a00      	cmp	r2, #0
    1c66:	d0f9      	beq.n	1c5c <memmove+0x1c>
    1c68:	2300      	movs	r3, #0
    1c6a:	5ccc      	ldrb	r4, [r1, r3]
    1c6c:	54ec      	strb	r4, [r5, r3]
    1c6e:	3301      	adds	r3, #1
    1c70:	429a      	cmp	r2, r3
    1c72:	d1fa      	bne.n	1c6a <memmove+0x2a>
    1c74:	e7f2      	b.n	1c5c <memmove+0x1c>
    1c76:	000c      	movs	r4, r1
    1c78:	4304      	orrs	r4, r0
    1c7a:	000b      	movs	r3, r1
    1c7c:	07a4      	lsls	r4, r4, #30
    1c7e:	d126      	bne.n	1cce <memmove+0x8e>
    1c80:	0015      	movs	r5, r2
    1c82:	0004      	movs	r4, r0
    1c84:	3d10      	subs	r5, #16
    1c86:	092d      	lsrs	r5, r5, #4
    1c88:	3501      	adds	r5, #1
    1c8a:	012d      	lsls	r5, r5, #4
    1c8c:	1949      	adds	r1, r1, r5
    1c8e:	681e      	ldr	r6, [r3, #0]
    1c90:	6026      	str	r6, [r4, #0]
    1c92:	685e      	ldr	r6, [r3, #4]
    1c94:	6066      	str	r6, [r4, #4]
    1c96:	689e      	ldr	r6, [r3, #8]
    1c98:	60a6      	str	r6, [r4, #8]
    1c9a:	68de      	ldr	r6, [r3, #12]
    1c9c:	3310      	adds	r3, #16
    1c9e:	60e6      	str	r6, [r4, #12]
    1ca0:	3410      	adds	r4, #16
    1ca2:	4299      	cmp	r1, r3
    1ca4:	d1f3      	bne.n	1c8e <memmove+0x4e>
    1ca6:	240f      	movs	r4, #15
    1ca8:	1945      	adds	r5, r0, r5
    1caa:	4014      	ands	r4, r2
    1cac:	2c03      	cmp	r4, #3
    1cae:	d910      	bls.n	1cd2 <memmove+0x92>
    1cb0:	2300      	movs	r3, #0
    1cb2:	3c04      	subs	r4, #4
    1cb4:	08a4      	lsrs	r4, r4, #2
    1cb6:	3401      	adds	r4, #1
    1cb8:	00a4      	lsls	r4, r4, #2
    1cba:	58ce      	ldr	r6, [r1, r3]
    1cbc:	50ee      	str	r6, [r5, r3]
    1cbe:	3304      	adds	r3, #4
    1cc0:	429c      	cmp	r4, r3
    1cc2:	d1fa      	bne.n	1cba <memmove+0x7a>
    1cc4:	2303      	movs	r3, #3
    1cc6:	192d      	adds	r5, r5, r4
    1cc8:	1909      	adds	r1, r1, r4
    1cca:	401a      	ands	r2, r3
    1ccc:	e7ca      	b.n	1c64 <memmove+0x24>
    1cce:	0005      	movs	r5, r0
    1cd0:	e7ca      	b.n	1c68 <memmove+0x28>
    1cd2:	0022      	movs	r2, r4
    1cd4:	e7c6      	b.n	1c64 <memmove+0x24>
    1cd6:	46c0      	nop			; (mov r8, r8)

00001cd8 <memset>:
    1cd8:	b570      	push	{r4, r5, r6, lr}
    1cda:	0783      	lsls	r3, r0, #30
    1cdc:	d03f      	beq.n	1d5e <memset+0x86>
    1cde:	1e54      	subs	r4, r2, #1
    1ce0:	2a00      	cmp	r2, #0
    1ce2:	d03b      	beq.n	1d5c <memset+0x84>
    1ce4:	b2ce      	uxtb	r6, r1
    1ce6:	0003      	movs	r3, r0
    1ce8:	2503      	movs	r5, #3
    1cea:	e003      	b.n	1cf4 <memset+0x1c>
    1cec:	1e62      	subs	r2, r4, #1
    1cee:	2c00      	cmp	r4, #0
    1cf0:	d034      	beq.n	1d5c <memset+0x84>
    1cf2:	0014      	movs	r4, r2
    1cf4:	3301      	adds	r3, #1
    1cf6:	1e5a      	subs	r2, r3, #1
    1cf8:	7016      	strb	r6, [r2, #0]
    1cfa:	422b      	tst	r3, r5
    1cfc:	d1f6      	bne.n	1cec <memset+0x14>
    1cfe:	2c03      	cmp	r4, #3
    1d00:	d924      	bls.n	1d4c <memset+0x74>
    1d02:	25ff      	movs	r5, #255	; 0xff
    1d04:	400d      	ands	r5, r1
    1d06:	022a      	lsls	r2, r5, #8
    1d08:	4315      	orrs	r5, r2
    1d0a:	042a      	lsls	r2, r5, #16
    1d0c:	4315      	orrs	r5, r2
    1d0e:	2c0f      	cmp	r4, #15
    1d10:	d911      	bls.n	1d36 <memset+0x5e>
    1d12:	0026      	movs	r6, r4
    1d14:	3e10      	subs	r6, #16
    1d16:	0936      	lsrs	r6, r6, #4
    1d18:	3601      	adds	r6, #1
    1d1a:	0136      	lsls	r6, r6, #4
    1d1c:	001a      	movs	r2, r3
    1d1e:	199b      	adds	r3, r3, r6
    1d20:	6015      	str	r5, [r2, #0]
    1d22:	6055      	str	r5, [r2, #4]
    1d24:	6095      	str	r5, [r2, #8]
    1d26:	60d5      	str	r5, [r2, #12]
    1d28:	3210      	adds	r2, #16
    1d2a:	4293      	cmp	r3, r2
    1d2c:	d1f8      	bne.n	1d20 <memset+0x48>
    1d2e:	220f      	movs	r2, #15
    1d30:	4014      	ands	r4, r2
    1d32:	2c03      	cmp	r4, #3
    1d34:	d90a      	bls.n	1d4c <memset+0x74>
    1d36:	1f26      	subs	r6, r4, #4
    1d38:	08b6      	lsrs	r6, r6, #2
    1d3a:	3601      	adds	r6, #1
    1d3c:	00b6      	lsls	r6, r6, #2
    1d3e:	001a      	movs	r2, r3
    1d40:	199b      	adds	r3, r3, r6
    1d42:	c220      	stmia	r2!, {r5}
    1d44:	4293      	cmp	r3, r2
    1d46:	d1fc      	bne.n	1d42 <memset+0x6a>
    1d48:	2203      	movs	r2, #3
    1d4a:	4014      	ands	r4, r2
    1d4c:	2c00      	cmp	r4, #0
    1d4e:	d005      	beq.n	1d5c <memset+0x84>
    1d50:	b2c9      	uxtb	r1, r1
    1d52:	191c      	adds	r4, r3, r4
    1d54:	7019      	strb	r1, [r3, #0]
    1d56:	3301      	adds	r3, #1
    1d58:	429c      	cmp	r4, r3
    1d5a:	d1fb      	bne.n	1d54 <memset+0x7c>
    1d5c:	bd70      	pop	{r4, r5, r6, pc}
    1d5e:	0014      	movs	r4, r2
    1d60:	0003      	movs	r3, r0
    1d62:	e7cc      	b.n	1cfe <memset+0x26>

00001d64 <_realloc_r>:
    1d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d66:	4656      	mov	r6, sl
    1d68:	464d      	mov	r5, r9
    1d6a:	4644      	mov	r4, r8
    1d6c:	465f      	mov	r7, fp
    1d6e:	b4f0      	push	{r4, r5, r6, r7}
    1d70:	4680      	mov	r8, r0
    1d72:	b085      	sub	sp, #20
    1d74:	1e0e      	subs	r6, r1, #0
    1d76:	4691      	mov	r9, r2
    1d78:	d100      	bne.n	1d7c <_realloc_r+0x18>
    1d7a:	e0cb      	b.n	1f14 <_realloc_r+0x1b0>
    1d7c:	0037      	movs	r7, r6
    1d7e:	3f08      	subs	r7, #8
    1d80:	f7ff fa2c 	bl	11dc <__malloc_lock>
    1d84:	687a      	ldr	r2, [r7, #4]
    1d86:	464d      	mov	r5, r9
    1d88:	2303      	movs	r3, #3
    1d8a:	0014      	movs	r4, r2
    1d8c:	350b      	adds	r5, #11
    1d8e:	46ba      	mov	sl, r7
    1d90:	439c      	bics	r4, r3
    1d92:	2d16      	cmp	r5, #22
    1d94:	d84a      	bhi.n	1e2c <_realloc_r+0xc8>
    1d96:	2310      	movs	r3, #16
    1d98:	2510      	movs	r5, #16
    1d9a:	45a9      	cmp	r9, r5
    1d9c:	d84a      	bhi.n	1e34 <_realloc_r+0xd0>
    1d9e:	429c      	cmp	r4, r3
    1da0:	da7b      	bge.n	1e9a <_realloc_r+0x136>
    1da2:	49d3      	ldr	r1, [pc, #844]	; (20f0 <_realloc_r+0x38c>)
    1da4:	1938      	adds	r0, r7, r4
    1da6:	6889      	ldr	r1, [r1, #8]
    1da8:	9001      	str	r0, [sp, #4]
    1daa:	4288      	cmp	r0, r1
    1dac:	d100      	bne.n	1db0 <_realloc_r+0x4c>
    1dae:	e0ec      	b.n	1f8a <_realloc_r+0x226>
    1db0:	6840      	ldr	r0, [r0, #4]
    1db2:	0001      	movs	r1, r0
    1db4:	9002      	str	r0, [sp, #8]
    1db6:	2001      	movs	r0, #1
    1db8:	9003      	str	r0, [sp, #12]
    1dba:	0008      	movs	r0, r1
    1dbc:	2101      	movs	r1, #1
    1dbe:	4388      	bics	r0, r1
    1dc0:	9901      	ldr	r1, [sp, #4]
    1dc2:	4684      	mov	ip, r0
    1dc4:	468b      	mov	fp, r1
    1dc6:	44dc      	add	ip, fp
    1dc8:	4661      	mov	r1, ip
    1dca:	2001      	movs	r0, #1
    1dcc:	6849      	ldr	r1, [r1, #4]
    1dce:	4201      	tst	r1, r0
    1dd0:	d100      	bne.n	1dd4 <_realloc_r+0x70>
    1dd2:	e07c      	b.n	1ece <_realloc_r+0x16a>
    1dd4:	2101      	movs	r1, #1
    1dd6:	4211      	tst	r1, r2
    1dd8:	d031      	beq.n	1e3e <_realloc_r+0xda>
    1dda:	4649      	mov	r1, r9
    1ddc:	4640      	mov	r0, r8
    1dde:	f7fe ff53 	bl	c88 <_malloc_r>
    1de2:	4681      	mov	r9, r0
    1de4:	2800      	cmp	r0, #0
    1de6:	d100      	bne.n	1dea <_realloc_r+0x86>
    1de8:	e19c      	b.n	2124 <_realloc_r+0x3c0>
    1dea:	2301      	movs	r3, #1
    1dec:	0002      	movs	r2, r0
    1dee:	6879      	ldr	r1, [r7, #4]
    1df0:	3a08      	subs	r2, #8
    1df2:	4399      	bics	r1, r3
    1df4:	187f      	adds	r7, r7, r1
    1df6:	42ba      	cmp	r2, r7
    1df8:	d100      	bne.n	1dfc <_realloc_r+0x98>
    1dfa:	e13c      	b.n	2076 <_realloc_r+0x312>
    1dfc:	1f22      	subs	r2, r4, #4
    1dfe:	2a24      	cmp	r2, #36	; 0x24
    1e00:	d900      	bls.n	1e04 <_realloc_r+0xa0>
    1e02:	e129      	b.n	2058 <_realloc_r+0x2f4>
    1e04:	0003      	movs	r3, r0
    1e06:	2a13      	cmp	r2, #19
    1e08:	d900      	bls.n	1e0c <_realloc_r+0xa8>
    1e0a:	e10b      	b.n	2024 <_realloc_r+0x2c0>
    1e0c:	0032      	movs	r2, r6
    1e0e:	6811      	ldr	r1, [r2, #0]
    1e10:	6019      	str	r1, [r3, #0]
    1e12:	6851      	ldr	r1, [r2, #4]
    1e14:	6059      	str	r1, [r3, #4]
    1e16:	6892      	ldr	r2, [r2, #8]
    1e18:	609a      	str	r2, [r3, #8]
    1e1a:	0031      	movs	r1, r6
    1e1c:	4640      	mov	r0, r8
    1e1e:	f7ff fbd1 	bl	15c4 <_free_r>
    1e22:	4640      	mov	r0, r8
    1e24:	f7ff f9dc 	bl	11e0 <__malloc_unlock>
    1e28:	4648      	mov	r0, r9
    1e2a:	e049      	b.n	1ec0 <_realloc_r+0x15c>
    1e2c:	3304      	adds	r3, #4
    1e2e:	439d      	bics	r5, r3
    1e30:	1e2b      	subs	r3, r5, #0
    1e32:	dab2      	bge.n	1d9a <_realloc_r+0x36>
    1e34:	230c      	movs	r3, #12
    1e36:	4642      	mov	r2, r8
    1e38:	2000      	movs	r0, #0
    1e3a:	6013      	str	r3, [r2, #0]
    1e3c:	e040      	b.n	1ec0 <_realloc_r+0x15c>
    1e3e:	683a      	ldr	r2, [r7, #0]
    1e40:	1aba      	subs	r2, r7, r2
    1e42:	4693      	mov	fp, r2
    1e44:	4659      	mov	r1, fp
    1e46:	2203      	movs	r2, #3
    1e48:	6849      	ldr	r1, [r1, #4]
    1e4a:	4391      	bics	r1, r2
    1e4c:	000a      	movs	r2, r1
    1e4e:	18a2      	adds	r2, r4, r2
    1e50:	9201      	str	r2, [sp, #4]
    1e52:	429a      	cmp	r2, r3
    1e54:	dbc1      	blt.n	1dda <_realloc_r+0x76>
    1e56:	465b      	mov	r3, fp
    1e58:	465a      	mov	r2, fp
    1e5a:	465f      	mov	r7, fp
    1e5c:	6892      	ldr	r2, [r2, #8]
    1e5e:	68db      	ldr	r3, [r3, #12]
    1e60:	3708      	adds	r7, #8
    1e62:	60d3      	str	r3, [r2, #12]
    1e64:	609a      	str	r2, [r3, #8]
    1e66:	1f22      	subs	r2, r4, #4
    1e68:	2a24      	cmp	r2, #36	; 0x24
    1e6a:	d900      	bls.n	1e6e <_realloc_r+0x10a>
    1e6c:	e110      	b.n	2090 <_realloc_r+0x32c>
    1e6e:	003b      	movs	r3, r7
    1e70:	2a13      	cmp	r2, #19
    1e72:	d909      	bls.n	1e88 <_realloc_r+0x124>
    1e74:	465b      	mov	r3, fp
    1e76:	6831      	ldr	r1, [r6, #0]
    1e78:	6099      	str	r1, [r3, #8]
    1e7a:	6871      	ldr	r1, [r6, #4]
    1e7c:	60d9      	str	r1, [r3, #12]
    1e7e:	2a1b      	cmp	r2, #27
    1e80:	d900      	bls.n	1e84 <_realloc_r+0x120>
    1e82:	e121      	b.n	20c8 <_realloc_r+0x364>
    1e84:	3310      	adds	r3, #16
    1e86:	3608      	adds	r6, #8
    1e88:	6832      	ldr	r2, [r6, #0]
    1e8a:	46da      	mov	sl, fp
    1e8c:	601a      	str	r2, [r3, #0]
    1e8e:	6872      	ldr	r2, [r6, #4]
    1e90:	9c01      	ldr	r4, [sp, #4]
    1e92:	605a      	str	r2, [r3, #4]
    1e94:	68b2      	ldr	r2, [r6, #8]
    1e96:	003e      	movs	r6, r7
    1e98:	609a      	str	r2, [r3, #8]
    1e9a:	1b63      	subs	r3, r4, r5
    1e9c:	2b0f      	cmp	r3, #15
    1e9e:	d824      	bhi.n	1eea <_realloc_r+0x186>
    1ea0:	4653      	mov	r3, sl
    1ea2:	2101      	movs	r1, #1
    1ea4:	4652      	mov	r2, sl
    1ea6:	685b      	ldr	r3, [r3, #4]
    1ea8:	400b      	ands	r3, r1
    1eaa:	4323      	orrs	r3, r4
    1eac:	6053      	str	r3, [r2, #4]
    1eae:	0022      	movs	r2, r4
    1eb0:	4452      	add	r2, sl
    1eb2:	6853      	ldr	r3, [r2, #4]
    1eb4:	4319      	orrs	r1, r3
    1eb6:	6051      	str	r1, [r2, #4]
    1eb8:	4640      	mov	r0, r8
    1eba:	f7ff f991 	bl	11e0 <__malloc_unlock>
    1ebe:	0030      	movs	r0, r6
    1ec0:	b005      	add	sp, #20
    1ec2:	bc3c      	pop	{r2, r3, r4, r5}
    1ec4:	4690      	mov	r8, r2
    1ec6:	4699      	mov	r9, r3
    1ec8:	46a2      	mov	sl, r4
    1eca:	46ab      	mov	fp, r5
    1ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ece:	2103      	movs	r1, #3
    1ed0:	9802      	ldr	r0, [sp, #8]
    1ed2:	468c      	mov	ip, r1
    1ed4:	4388      	bics	r0, r1
    1ed6:	1901      	adds	r1, r0, r4
    1ed8:	4299      	cmp	r1, r3
    1eda:	db1f      	blt.n	1f1c <_realloc_r+0x1b8>
    1edc:	9a01      	ldr	r2, [sp, #4]
    1ede:	000c      	movs	r4, r1
    1ee0:	68d3      	ldr	r3, [r2, #12]
    1ee2:	6892      	ldr	r2, [r2, #8]
    1ee4:	60d3      	str	r3, [r2, #12]
    1ee6:	609a      	str	r2, [r3, #8]
    1ee8:	e7d7      	b.n	1e9a <_realloc_r+0x136>
    1eea:	4652      	mov	r2, sl
    1eec:	4650      	mov	r0, sl
    1eee:	1951      	adds	r1, r2, r5
    1ef0:	2201      	movs	r2, #1
    1ef2:	6840      	ldr	r0, [r0, #4]
    1ef4:	4010      	ands	r0, r2
    1ef6:	4305      	orrs	r5, r0
    1ef8:	4650      	mov	r0, sl
    1efa:	6045      	str	r5, [r0, #4]
    1efc:	0018      	movs	r0, r3
    1efe:	4310      	orrs	r0, r2
    1f00:	18cb      	adds	r3, r1, r3
    1f02:	6048      	str	r0, [r1, #4]
    1f04:	6858      	ldr	r0, [r3, #4]
    1f06:	3108      	adds	r1, #8
    1f08:	4302      	orrs	r2, r0
    1f0a:	605a      	str	r2, [r3, #4]
    1f0c:	4640      	mov	r0, r8
    1f0e:	f7ff fb59 	bl	15c4 <_free_r>
    1f12:	e7d1      	b.n	1eb8 <_realloc_r+0x154>
    1f14:	0011      	movs	r1, r2
    1f16:	f7fe feb7 	bl	c88 <_malloc_r>
    1f1a:	e7d1      	b.n	1ec0 <_realloc_r+0x15c>
    1f1c:	2001      	movs	r0, #1
    1f1e:	4210      	tst	r0, r2
    1f20:	d000      	beq.n	1f24 <_realloc_r+0x1c0>
    1f22:	e75a      	b.n	1dda <_realloc_r+0x76>
    1f24:	4660      	mov	r0, ip
    1f26:	683a      	ldr	r2, [r7, #0]
    1f28:	1aba      	subs	r2, r7, r2
    1f2a:	4693      	mov	fp, r2
    1f2c:	6852      	ldr	r2, [r2, #4]
    1f2e:	4382      	bics	r2, r0
    1f30:	1889      	adds	r1, r1, r2
    1f32:	9102      	str	r1, [sp, #8]
    1f34:	4299      	cmp	r1, r3
    1f36:	da00      	bge.n	1f3a <_realloc_r+0x1d6>
    1f38:	e789      	b.n	1e4e <_realloc_r+0xea>
    1f3a:	9a01      	ldr	r2, [sp, #4]
    1f3c:	465f      	mov	r7, fp
    1f3e:	68d3      	ldr	r3, [r2, #12]
    1f40:	6892      	ldr	r2, [r2, #8]
    1f42:	3708      	adds	r7, #8
    1f44:	60d3      	str	r3, [r2, #12]
    1f46:	609a      	str	r2, [r3, #8]
    1f48:	465b      	mov	r3, fp
    1f4a:	465a      	mov	r2, fp
    1f4c:	68db      	ldr	r3, [r3, #12]
    1f4e:	6892      	ldr	r2, [r2, #8]
    1f50:	60d3      	str	r3, [r2, #12]
    1f52:	609a      	str	r2, [r3, #8]
    1f54:	1f22      	subs	r2, r4, #4
    1f56:	2a24      	cmp	r2, #36	; 0x24
    1f58:	d900      	bls.n	1f5c <_realloc_r+0x1f8>
    1f5a:	e091      	b.n	2080 <_realloc_r+0x31c>
    1f5c:	003b      	movs	r3, r7
    1f5e:	2a13      	cmp	r2, #19
    1f60:	d909      	bls.n	1f76 <_realloc_r+0x212>
    1f62:	465b      	mov	r3, fp
    1f64:	6831      	ldr	r1, [r6, #0]
    1f66:	6099      	str	r1, [r3, #8]
    1f68:	6871      	ldr	r1, [r6, #4]
    1f6a:	60d9      	str	r1, [r3, #12]
    1f6c:	2a1b      	cmp	r2, #27
    1f6e:	d900      	bls.n	1f72 <_realloc_r+0x20e>
    1f70:	e096      	b.n	20a0 <_realloc_r+0x33c>
    1f72:	3310      	adds	r3, #16
    1f74:	3608      	adds	r6, #8
    1f76:	6832      	ldr	r2, [r6, #0]
    1f78:	9c02      	ldr	r4, [sp, #8]
    1f7a:	601a      	str	r2, [r3, #0]
    1f7c:	6872      	ldr	r2, [r6, #4]
    1f7e:	46da      	mov	sl, fp
    1f80:	605a      	str	r2, [r3, #4]
    1f82:	68b2      	ldr	r2, [r6, #8]
    1f84:	003e      	movs	r6, r7
    1f86:	609a      	str	r2, [r3, #8]
    1f88:	e787      	b.n	1e9a <_realloc_r+0x136>
    1f8a:	2003      	movs	r0, #3
    1f8c:	9901      	ldr	r1, [sp, #4]
    1f8e:	4684      	mov	ip, r0
    1f90:	6849      	ldr	r1, [r1, #4]
    1f92:	4381      	bics	r1, r0
    1f94:	0028      	movs	r0, r5
    1f96:	1909      	adds	r1, r1, r4
    1f98:	3010      	adds	r0, #16
    1f9a:	9001      	str	r0, [sp, #4]
    1f9c:	4281      	cmp	r1, r0
    1f9e:	da4b      	bge.n	2038 <_realloc_r+0x2d4>
    1fa0:	07d2      	lsls	r2, r2, #31
    1fa2:	d500      	bpl.n	1fa6 <_realloc_r+0x242>
    1fa4:	e719      	b.n	1dda <_realloc_r+0x76>
    1fa6:	4660      	mov	r0, ip
    1fa8:	683a      	ldr	r2, [r7, #0]
    1faa:	1aba      	subs	r2, r7, r2
    1fac:	4693      	mov	fp, r2
    1fae:	6852      	ldr	r2, [r2, #4]
    1fb0:	4382      	bics	r2, r0
    1fb2:	9801      	ldr	r0, [sp, #4]
    1fb4:	1851      	adds	r1, r2, r1
    1fb6:	9102      	str	r1, [sp, #8]
    1fb8:	4288      	cmp	r0, r1
    1fba:	dd00      	ble.n	1fbe <_realloc_r+0x25a>
    1fbc:	e747      	b.n	1e4e <_realloc_r+0xea>
    1fbe:	465b      	mov	r3, fp
    1fc0:	465a      	mov	r2, fp
    1fc2:	465f      	mov	r7, fp
    1fc4:	6892      	ldr	r2, [r2, #8]
    1fc6:	68db      	ldr	r3, [r3, #12]
    1fc8:	3708      	adds	r7, #8
    1fca:	60d3      	str	r3, [r2, #12]
    1fcc:	609a      	str	r2, [r3, #8]
    1fce:	1f22      	subs	r2, r4, #4
    1fd0:	2a24      	cmp	r2, #36	; 0x24
    1fd2:	d900      	bls.n	1fd6 <_realloc_r+0x272>
    1fd4:	e097      	b.n	2106 <_realloc_r+0x3a2>
    1fd6:	003b      	movs	r3, r7
    1fd8:	2a13      	cmp	r2, #19
    1fda:	d909      	bls.n	1ff0 <_realloc_r+0x28c>
    1fdc:	465b      	mov	r3, fp
    1fde:	6831      	ldr	r1, [r6, #0]
    1fe0:	6099      	str	r1, [r3, #8]
    1fe2:	6871      	ldr	r1, [r6, #4]
    1fe4:	60d9      	str	r1, [r3, #12]
    1fe6:	2a1b      	cmp	r2, #27
    1fe8:	d900      	bls.n	1fec <_realloc_r+0x288>
    1fea:	e091      	b.n	2110 <_realloc_r+0x3ac>
    1fec:	3310      	adds	r3, #16
    1fee:	3608      	adds	r6, #8
    1ff0:	6832      	ldr	r2, [r6, #0]
    1ff2:	601a      	str	r2, [r3, #0]
    1ff4:	6872      	ldr	r2, [r6, #4]
    1ff6:	605a      	str	r2, [r3, #4]
    1ff8:	68b2      	ldr	r2, [r6, #8]
    1ffa:	609a      	str	r2, [r3, #8]
    1ffc:	465b      	mov	r3, fp
    1ffe:	1959      	adds	r1, r3, r5
    2000:	4b3b      	ldr	r3, [pc, #236]	; (20f0 <_realloc_r+0x38c>)
    2002:	4640      	mov	r0, r8
    2004:	6099      	str	r1, [r3, #8]
    2006:	9b02      	ldr	r3, [sp, #8]
    2008:	1b5a      	subs	r2, r3, r5
    200a:	2301      	movs	r3, #1
    200c:	431a      	orrs	r2, r3
    200e:	604a      	str	r2, [r1, #4]
    2010:	465a      	mov	r2, fp
    2012:	6852      	ldr	r2, [r2, #4]
    2014:	4013      	ands	r3, r2
    2016:	431d      	orrs	r5, r3
    2018:	465b      	mov	r3, fp
    201a:	605d      	str	r5, [r3, #4]
    201c:	f7ff f8e0 	bl	11e0 <__malloc_unlock>
    2020:	0038      	movs	r0, r7
    2022:	e74d      	b.n	1ec0 <_realloc_r+0x15c>
    2024:	6831      	ldr	r1, [r6, #0]
    2026:	6001      	str	r1, [r0, #0]
    2028:	6871      	ldr	r1, [r6, #4]
    202a:	6041      	str	r1, [r0, #4]
    202c:	2a1b      	cmp	r2, #27
    202e:	d817      	bhi.n	2060 <_realloc_r+0x2fc>
    2030:	0032      	movs	r2, r6
    2032:	3308      	adds	r3, #8
    2034:	3208      	adds	r2, #8
    2036:	e6ea      	b.n	1e0e <_realloc_r+0xaa>
    2038:	4b2d      	ldr	r3, [pc, #180]	; (20f0 <_realloc_r+0x38c>)
    203a:	197a      	adds	r2, r7, r5
    203c:	609a      	str	r2, [r3, #8]
    203e:	2301      	movs	r3, #1
    2040:	1b49      	subs	r1, r1, r5
    2042:	4319      	orrs	r1, r3
    2044:	6051      	str	r1, [r2, #4]
    2046:	687a      	ldr	r2, [r7, #4]
    2048:	4640      	mov	r0, r8
    204a:	4013      	ands	r3, r2
    204c:	431d      	orrs	r5, r3
    204e:	607d      	str	r5, [r7, #4]
    2050:	f7ff f8c6 	bl	11e0 <__malloc_unlock>
    2054:	0030      	movs	r0, r6
    2056:	e733      	b.n	1ec0 <_realloc_r+0x15c>
    2058:	0031      	movs	r1, r6
    205a:	f7ff fdf1 	bl	1c40 <memmove>
    205e:	e6dc      	b.n	1e1a <_realloc_r+0xb6>
    2060:	68b1      	ldr	r1, [r6, #8]
    2062:	0003      	movs	r3, r0
    2064:	6081      	str	r1, [r0, #8]
    2066:	68f1      	ldr	r1, [r6, #12]
    2068:	60c1      	str	r1, [r0, #12]
    206a:	2a24      	cmp	r2, #36	; 0x24
    206c:	d022      	beq.n	20b4 <_realloc_r+0x350>
    206e:	0032      	movs	r2, r6
    2070:	3310      	adds	r3, #16
    2072:	3210      	adds	r2, #16
    2074:	e6cb      	b.n	1e0e <_realloc_r+0xaa>
    2076:	6853      	ldr	r3, [r2, #4]
    2078:	2203      	movs	r2, #3
    207a:	4393      	bics	r3, r2
    207c:	18e4      	adds	r4, r4, r3
    207e:	e70c      	b.n	1e9a <_realloc_r+0x136>
    2080:	0031      	movs	r1, r6
    2082:	0038      	movs	r0, r7
    2084:	f7ff fddc 	bl	1c40 <memmove>
    2088:	003e      	movs	r6, r7
    208a:	9c02      	ldr	r4, [sp, #8]
    208c:	46da      	mov	sl, fp
    208e:	e704      	b.n	1e9a <_realloc_r+0x136>
    2090:	0031      	movs	r1, r6
    2092:	0038      	movs	r0, r7
    2094:	f7ff fdd4 	bl	1c40 <memmove>
    2098:	003e      	movs	r6, r7
    209a:	9c01      	ldr	r4, [sp, #4]
    209c:	46da      	mov	sl, fp
    209e:	e6fc      	b.n	1e9a <_realloc_r+0x136>
    20a0:	465b      	mov	r3, fp
    20a2:	68b1      	ldr	r1, [r6, #8]
    20a4:	6119      	str	r1, [r3, #16]
    20a6:	68f1      	ldr	r1, [r6, #12]
    20a8:	6159      	str	r1, [r3, #20]
    20aa:	2a24      	cmp	r2, #36	; 0x24
    20ac:	d016      	beq.n	20dc <_realloc_r+0x378>
    20ae:	3318      	adds	r3, #24
    20b0:	3610      	adds	r6, #16
    20b2:	e760      	b.n	1f76 <_realloc_r+0x212>
    20b4:	6932      	ldr	r2, [r6, #16]
    20b6:	0003      	movs	r3, r0
    20b8:	6102      	str	r2, [r0, #16]
    20ba:	0001      	movs	r1, r0
    20bc:	0032      	movs	r2, r6
    20be:	6970      	ldr	r0, [r6, #20]
    20c0:	3318      	adds	r3, #24
    20c2:	3218      	adds	r2, #24
    20c4:	6148      	str	r0, [r1, #20]
    20c6:	e6a2      	b.n	1e0e <_realloc_r+0xaa>
    20c8:	465b      	mov	r3, fp
    20ca:	68b1      	ldr	r1, [r6, #8]
    20cc:	6119      	str	r1, [r3, #16]
    20ce:	68f1      	ldr	r1, [r6, #12]
    20d0:	6159      	str	r1, [r3, #20]
    20d2:	2a24      	cmp	r2, #36	; 0x24
    20d4:	d00e      	beq.n	20f4 <_realloc_r+0x390>
    20d6:	3318      	adds	r3, #24
    20d8:	3610      	adds	r6, #16
    20da:	e6d5      	b.n	1e88 <_realloc_r+0x124>
    20dc:	465b      	mov	r3, fp
    20de:	6932      	ldr	r2, [r6, #16]
    20e0:	619a      	str	r2, [r3, #24]
    20e2:	465a      	mov	r2, fp
    20e4:	6971      	ldr	r1, [r6, #20]
    20e6:	3320      	adds	r3, #32
    20e8:	61d1      	str	r1, [r2, #28]
    20ea:	3618      	adds	r6, #24
    20ec:	e743      	b.n	1f76 <_realloc_r+0x212>
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	10010504 	.word	0x10010504
    20f4:	465b      	mov	r3, fp
    20f6:	6932      	ldr	r2, [r6, #16]
    20f8:	619a      	str	r2, [r3, #24]
    20fa:	465a      	mov	r2, fp
    20fc:	6971      	ldr	r1, [r6, #20]
    20fe:	3320      	adds	r3, #32
    2100:	61d1      	str	r1, [r2, #28]
    2102:	3618      	adds	r6, #24
    2104:	e6c0      	b.n	1e88 <_realloc_r+0x124>
    2106:	0031      	movs	r1, r6
    2108:	0038      	movs	r0, r7
    210a:	f7ff fd99 	bl	1c40 <memmove>
    210e:	e775      	b.n	1ffc <_realloc_r+0x298>
    2110:	465b      	mov	r3, fp
    2112:	68b1      	ldr	r1, [r6, #8]
    2114:	6119      	str	r1, [r3, #16]
    2116:	68f1      	ldr	r1, [r6, #12]
    2118:	6159      	str	r1, [r3, #20]
    211a:	2a24      	cmp	r2, #36	; 0x24
    211c:	d007      	beq.n	212e <_realloc_r+0x3ca>
    211e:	3318      	adds	r3, #24
    2120:	3610      	adds	r6, #16
    2122:	e765      	b.n	1ff0 <_realloc_r+0x28c>
    2124:	4640      	mov	r0, r8
    2126:	f7ff f85b 	bl	11e0 <__malloc_unlock>
    212a:	2000      	movs	r0, #0
    212c:	e6c8      	b.n	1ec0 <_realloc_r+0x15c>
    212e:	465b      	mov	r3, fp
    2130:	6932      	ldr	r2, [r6, #16]
    2132:	619a      	str	r2, [r3, #24]
    2134:	465a      	mov	r2, fp
    2136:	6971      	ldr	r1, [r6, #20]
    2138:	3320      	adds	r3, #32
    213a:	61d1      	str	r1, [r2, #28]
    213c:	3618      	adds	r6, #24
    213e:	e757      	b.n	1ff0 <_realloc_r+0x28c>

00002140 <cleanup_glue>:
    2140:	b570      	push	{r4, r5, r6, lr}
    2142:	000c      	movs	r4, r1
    2144:	6809      	ldr	r1, [r1, #0]
    2146:	0005      	movs	r5, r0
    2148:	2900      	cmp	r1, #0
    214a:	d001      	beq.n	2150 <cleanup_glue+0x10>
    214c:	f7ff fff8 	bl	2140 <cleanup_glue>
    2150:	0028      	movs	r0, r5
    2152:	0021      	movs	r1, r4
    2154:	f7ff fa36 	bl	15c4 <_free_r>
    2158:	bd70      	pop	{r4, r5, r6, pc}
    215a:	46c0      	nop			; (mov r8, r8)

0000215c <_reclaim_reent>:
    215c:	4b23      	ldr	r3, [pc, #140]	; (21ec <_reclaim_reent+0x90>)
    215e:	b570      	push	{r4, r5, r6, lr}
    2160:	681b      	ldr	r3, [r3, #0]
    2162:	0005      	movs	r5, r0
    2164:	4283      	cmp	r3, r0
    2166:	d034      	beq.n	21d2 <_reclaim_reent+0x76>
    2168:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    216a:	2b00      	cmp	r3, #0
    216c:	d011      	beq.n	2192 <_reclaim_reent+0x36>
    216e:	2600      	movs	r6, #0
    2170:	5999      	ldr	r1, [r3, r6]
    2172:	2900      	cmp	r1, #0
    2174:	d006      	beq.n	2184 <_reclaim_reent+0x28>
    2176:	680c      	ldr	r4, [r1, #0]
    2178:	0028      	movs	r0, r5
    217a:	f7ff fa23 	bl	15c4 <_free_r>
    217e:	1e21      	subs	r1, r4, #0
    2180:	d1f9      	bne.n	2176 <_reclaim_reent+0x1a>
    2182:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    2184:	3604      	adds	r6, #4
    2186:	2e80      	cmp	r6, #128	; 0x80
    2188:	d1f2      	bne.n	2170 <_reclaim_reent+0x14>
    218a:	0019      	movs	r1, r3
    218c:	0028      	movs	r0, r5
    218e:	f7ff fa19 	bl	15c4 <_free_r>
    2192:	6c29      	ldr	r1, [r5, #64]	; 0x40
    2194:	2900      	cmp	r1, #0
    2196:	d002      	beq.n	219e <_reclaim_reent+0x42>
    2198:	0028      	movs	r0, r5
    219a:	f7ff fa13 	bl	15c4 <_free_r>
    219e:	23a4      	movs	r3, #164	; 0xa4
    21a0:	005b      	lsls	r3, r3, #1
    21a2:	58e9      	ldr	r1, [r5, r3]
    21a4:	2900      	cmp	r1, #0
    21a6:	d00b      	beq.n	21c0 <_reclaim_reent+0x64>
    21a8:	002e      	movs	r6, r5
    21aa:	364d      	adds	r6, #77	; 0x4d
    21ac:	36ff      	adds	r6, #255	; 0xff
    21ae:	42b1      	cmp	r1, r6
    21b0:	d006      	beq.n	21c0 <_reclaim_reent+0x64>
    21b2:	680c      	ldr	r4, [r1, #0]
    21b4:	0028      	movs	r0, r5
    21b6:	f7ff fa05 	bl	15c4 <_free_r>
    21ba:	0021      	movs	r1, r4
    21bc:	42a6      	cmp	r6, r4
    21be:	d1f8      	bne.n	21b2 <_reclaim_reent+0x56>
    21c0:	6d69      	ldr	r1, [r5, #84]	; 0x54
    21c2:	2900      	cmp	r1, #0
    21c4:	d002      	beq.n	21cc <_reclaim_reent+0x70>
    21c6:	0028      	movs	r0, r5
    21c8:	f7ff f9fc 	bl	15c4 <_free_r>
    21cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    21ce:	2b00      	cmp	r3, #0
    21d0:	d100      	bne.n	21d4 <_reclaim_reent+0x78>
    21d2:	bd70      	pop	{r4, r5, r6, pc}
    21d4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    21d6:	0028      	movs	r0, r5
    21d8:	4798      	blx	r3
    21da:	23b8      	movs	r3, #184	; 0xb8
    21dc:	009b      	lsls	r3, r3, #2
    21de:	58e9      	ldr	r1, [r5, r3]
    21e0:	2900      	cmp	r1, #0
    21e2:	d0f6      	beq.n	21d2 <_reclaim_reent+0x76>
    21e4:	0028      	movs	r0, r5
    21e6:	f7ff ffab 	bl	2140 <cleanup_glue>
    21ea:	e7f2      	b.n	21d2 <_reclaim_reent+0x76>
    21ec:	10010d40 	.word	0x10010d40

000021f0 <__sread>:
    21f0:	b570      	push	{r4, r5, r6, lr}
    21f2:	000c      	movs	r4, r1
    21f4:	250e      	movs	r5, #14
    21f6:	5f49      	ldrsh	r1, [r1, r5]
    21f8:	f000 fa84 	bl	2704 <_read_r>
    21fc:	2800      	cmp	r0, #0
    21fe:	db03      	blt.n	2208 <__sread+0x18>
    2200:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2202:	181b      	adds	r3, r3, r0
    2204:	6523      	str	r3, [r4, #80]	; 0x50
    2206:	bd70      	pop	{r4, r5, r6, pc}
    2208:	89a2      	ldrh	r2, [r4, #12]
    220a:	4b02      	ldr	r3, [pc, #8]	; (2214 <__sread+0x24>)
    220c:	4013      	ands	r3, r2
    220e:	81a3      	strh	r3, [r4, #12]
    2210:	e7f9      	b.n	2206 <__sread+0x16>
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	ffffefff 	.word	0xffffefff

00002218 <__seofread>:
    2218:	2000      	movs	r0, #0
    221a:	4770      	bx	lr

0000221c <__swrite>:
    221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    221e:	0016      	movs	r6, r2
    2220:	001f      	movs	r7, r3
    2222:	230c      	movs	r3, #12
    2224:	5eca      	ldrsh	r2, [r1, r3]
    2226:	0005      	movs	r5, r0
    2228:	000c      	movs	r4, r1
    222a:	05d3      	lsls	r3, r2, #23
    222c:	d507      	bpl.n	223e <__swrite+0x22>
    222e:	230e      	movs	r3, #14
    2230:	5ec9      	ldrsh	r1, [r1, r3]
    2232:	2200      	movs	r2, #0
    2234:	2302      	movs	r3, #2
    2236:	f000 f9dd 	bl	25f4 <_lseek_r>
    223a:	230c      	movs	r3, #12
    223c:	5ee2      	ldrsh	r2, [r4, r3]
    223e:	4b05      	ldr	r3, [pc, #20]	; (2254 <__swrite+0x38>)
    2240:	0028      	movs	r0, r5
    2242:	4013      	ands	r3, r2
    2244:	81a3      	strh	r3, [r4, #12]
    2246:	0032      	movs	r2, r6
    2248:	230e      	movs	r3, #14
    224a:	5ee1      	ldrsh	r1, [r4, r3]
    224c:	003b      	movs	r3, r7
    224e:	f000 f81f 	bl	2290 <_write_r>
    2252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2254:	ffffefff 	.word	0xffffefff

00002258 <__sseek>:
    2258:	b570      	push	{r4, r5, r6, lr}
    225a:	000c      	movs	r4, r1
    225c:	250e      	movs	r5, #14
    225e:	5f49      	ldrsh	r1, [r1, r5]
    2260:	f000 f9c8 	bl	25f4 <_lseek_r>
    2264:	1c43      	adds	r3, r0, #1
    2266:	d006      	beq.n	2276 <__sseek+0x1e>
    2268:	2280      	movs	r2, #128	; 0x80
    226a:	89a3      	ldrh	r3, [r4, #12]
    226c:	0152      	lsls	r2, r2, #5
    226e:	4313      	orrs	r3, r2
    2270:	81a3      	strh	r3, [r4, #12]
    2272:	6520      	str	r0, [r4, #80]	; 0x50
    2274:	bd70      	pop	{r4, r5, r6, pc}
    2276:	89a2      	ldrh	r2, [r4, #12]
    2278:	4b01      	ldr	r3, [pc, #4]	; (2280 <__sseek+0x28>)
    227a:	4013      	ands	r3, r2
    227c:	81a3      	strh	r3, [r4, #12]
    227e:	e7f9      	b.n	2274 <__sseek+0x1c>
    2280:	ffffefff 	.word	0xffffefff

00002284 <__sclose>:
    2284:	b510      	push	{r4, lr}
    2286:	230e      	movs	r3, #14
    2288:	5ec9      	ldrsh	r1, [r1, r3]
    228a:	f000 f87f 	bl	238c <_close_r>
    228e:	bd10      	pop	{r4, pc}

00002290 <_write_r>:
    2290:	b570      	push	{r4, r5, r6, lr}
    2292:	0005      	movs	r5, r0
    2294:	0008      	movs	r0, r1
    2296:	0011      	movs	r1, r2
    2298:	2200      	movs	r2, #0
    229a:	4c06      	ldr	r4, [pc, #24]	; (22b4 <_write_r+0x24>)
    229c:	6022      	str	r2, [r4, #0]
    229e:	001a      	movs	r2, r3
    22a0:	f7fe fc2a 	bl	af8 <_write>
    22a4:	1c43      	adds	r3, r0, #1
    22a6:	d000      	beq.n	22aa <_write_r+0x1a>
    22a8:	bd70      	pop	{r4, r5, r6, pc}
    22aa:	6823      	ldr	r3, [r4, #0]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d0fb      	beq.n	22a8 <_write_r+0x18>
    22b0:	602b      	str	r3, [r5, #0]
    22b2:	e7f9      	b.n	22a8 <_write_r+0x18>
    22b4:	10010e6c 	.word	0x10010e6c

000022b8 <__swsetup_r>:
    22b8:	4b33      	ldr	r3, [pc, #204]	; (2388 <__swsetup_r+0xd0>)
    22ba:	b570      	push	{r4, r5, r6, lr}
    22bc:	0005      	movs	r5, r0
    22be:	6818      	ldr	r0, [r3, #0]
    22c0:	000c      	movs	r4, r1
    22c2:	2800      	cmp	r0, #0
    22c4:	d002      	beq.n	22cc <__swsetup_r+0x14>
    22c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    22c8:	2b00      	cmp	r3, #0
    22ca:	d03d      	beq.n	2348 <__swsetup_r+0x90>
    22cc:	230c      	movs	r3, #12
    22ce:	5ee0      	ldrsh	r0, [r4, r3]
    22d0:	b283      	uxth	r3, r0
    22d2:	071a      	lsls	r2, r3, #28
    22d4:	d50d      	bpl.n	22f2 <__swsetup_r+0x3a>
    22d6:	6921      	ldr	r1, [r4, #16]
    22d8:	2900      	cmp	r1, #0
    22da:	d016      	beq.n	230a <__swsetup_r+0x52>
    22dc:	07da      	lsls	r2, r3, #31
    22de:	d522      	bpl.n	2326 <__swsetup_r+0x6e>
    22e0:	2300      	movs	r3, #0
    22e2:	60a3      	str	r3, [r4, #8]
    22e4:	6963      	ldr	r3, [r4, #20]
    22e6:	2000      	movs	r0, #0
    22e8:	425b      	negs	r3, r3
    22ea:	61a3      	str	r3, [r4, #24]
    22ec:	2900      	cmp	r1, #0
    22ee:	d022      	beq.n	2336 <__swsetup_r+0x7e>
    22f0:	bd70      	pop	{r4, r5, r6, pc}
    22f2:	06da      	lsls	r2, r3, #27
    22f4:	d540      	bpl.n	2378 <__swsetup_r+0xc0>
    22f6:	075b      	lsls	r3, r3, #29
    22f8:	d429      	bmi.n	234e <__swsetup_r+0x96>
    22fa:	6921      	ldr	r1, [r4, #16]
    22fc:	2208      	movs	r2, #8
    22fe:	0003      	movs	r3, r0
    2300:	4313      	orrs	r3, r2
    2302:	81a3      	strh	r3, [r4, #12]
    2304:	b29b      	uxth	r3, r3
    2306:	2900      	cmp	r1, #0
    2308:	d1e8      	bne.n	22dc <__swsetup_r+0x24>
    230a:	22a0      	movs	r2, #160	; 0xa0
    230c:	2080      	movs	r0, #128	; 0x80
    230e:	0092      	lsls	r2, r2, #2
    2310:	0080      	lsls	r0, r0, #2
    2312:	401a      	ands	r2, r3
    2314:	4282      	cmp	r2, r0
    2316:	d0e1      	beq.n	22dc <__swsetup_r+0x24>
    2318:	0021      	movs	r1, r4
    231a:	0028      	movs	r0, r5
    231c:	f000 f9ae 	bl	267c <__smakebuf_r>
    2320:	89a3      	ldrh	r3, [r4, #12]
    2322:	6921      	ldr	r1, [r4, #16]
    2324:	e7da      	b.n	22dc <__swsetup_r+0x24>
    2326:	2200      	movs	r2, #0
    2328:	079b      	lsls	r3, r3, #30
    232a:	d400      	bmi.n	232e <__swsetup_r+0x76>
    232c:	6962      	ldr	r2, [r4, #20]
    232e:	60a2      	str	r2, [r4, #8]
    2330:	2000      	movs	r0, #0
    2332:	2900      	cmp	r1, #0
    2334:	d1dc      	bne.n	22f0 <__swsetup_r+0x38>
    2336:	220c      	movs	r2, #12
    2338:	5ea3      	ldrsh	r3, [r4, r2]
    233a:	061a      	lsls	r2, r3, #24
    233c:	d5d8      	bpl.n	22f0 <__swsetup_r+0x38>
    233e:	2240      	movs	r2, #64	; 0x40
    2340:	4313      	orrs	r3, r2
    2342:	81a3      	strh	r3, [r4, #12]
    2344:	3801      	subs	r0, #1
    2346:	e7d3      	b.n	22f0 <__swsetup_r+0x38>
    2348:	f7ff f8c4 	bl	14d4 <__sinit>
    234c:	e7be      	b.n	22cc <__swsetup_r+0x14>
    234e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2350:	2900      	cmp	r1, #0
    2352:	d00a      	beq.n	236a <__swsetup_r+0xb2>
    2354:	0023      	movs	r3, r4
    2356:	3340      	adds	r3, #64	; 0x40
    2358:	4299      	cmp	r1, r3
    235a:	d004      	beq.n	2366 <__swsetup_r+0xae>
    235c:	0028      	movs	r0, r5
    235e:	f7ff f931 	bl	15c4 <_free_r>
    2362:	230c      	movs	r3, #12
    2364:	5ee0      	ldrsh	r0, [r4, r3]
    2366:	2300      	movs	r3, #0
    2368:	6323      	str	r3, [r4, #48]	; 0x30
    236a:	2324      	movs	r3, #36	; 0x24
    236c:	4398      	bics	r0, r3
    236e:	2300      	movs	r3, #0
    2370:	6921      	ldr	r1, [r4, #16]
    2372:	6063      	str	r3, [r4, #4]
    2374:	6021      	str	r1, [r4, #0]
    2376:	e7c1      	b.n	22fc <__swsetup_r+0x44>
    2378:	2309      	movs	r3, #9
    237a:	602b      	str	r3, [r5, #0]
    237c:	2340      	movs	r3, #64	; 0x40
    237e:	4303      	orrs	r3, r0
    2380:	2001      	movs	r0, #1
    2382:	81a3      	strh	r3, [r4, #12]
    2384:	4240      	negs	r0, r0
    2386:	e7b3      	b.n	22f0 <__swsetup_r+0x38>
    2388:	10010d40 	.word	0x10010d40

0000238c <_close_r>:
    238c:	2300      	movs	r3, #0
    238e:	b570      	push	{r4, r5, r6, lr}
    2390:	4c06      	ldr	r4, [pc, #24]	; (23ac <_close_r+0x20>)
    2392:	0005      	movs	r5, r0
    2394:	0008      	movs	r0, r1
    2396:	6023      	str	r3, [r4, #0]
    2398:	f7fe fbab 	bl	af2 <_close>
    239c:	1c43      	adds	r3, r0, #1
    239e:	d000      	beq.n	23a2 <_close_r+0x16>
    23a0:	bd70      	pop	{r4, r5, r6, pc}
    23a2:	6823      	ldr	r3, [r4, #0]
    23a4:	2b00      	cmp	r3, #0
    23a6:	d0fb      	beq.n	23a0 <_close_r+0x14>
    23a8:	602b      	str	r3, [r5, #0]
    23aa:	e7f9      	b.n	23a0 <_close_r+0x14>
    23ac:	10010e6c 	.word	0x10010e6c

000023b0 <_fclose_r>:
    23b0:	b570      	push	{r4, r5, r6, lr}
    23b2:	0005      	movs	r5, r0
    23b4:	1e0c      	subs	r4, r1, #0
    23b6:	d008      	beq.n	23ca <_fclose_r+0x1a>
    23b8:	2800      	cmp	r0, #0
    23ba:	d002      	beq.n	23c2 <_fclose_r+0x12>
    23bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    23be:	2b00      	cmp	r3, #0
    23c0:	d031      	beq.n	2426 <_fclose_r+0x76>
    23c2:	220c      	movs	r2, #12
    23c4:	5ea3      	ldrsh	r3, [r4, r2]
    23c6:	2b00      	cmp	r3, #0
    23c8:	d101      	bne.n	23ce <_fclose_r+0x1e>
    23ca:	2000      	movs	r0, #0
    23cc:	bd70      	pop	{r4, r5, r6, pc}
    23ce:	0021      	movs	r1, r4
    23d0:	0028      	movs	r0, r5
    23d2:	f000 f83d 	bl	2450 <__sflush_r>
    23d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    23d8:	0006      	movs	r6, r0
    23da:	2b00      	cmp	r3, #0
    23dc:	d004      	beq.n	23e8 <_fclose_r+0x38>
    23de:	69e1      	ldr	r1, [r4, #28]
    23e0:	0028      	movs	r0, r5
    23e2:	4798      	blx	r3
    23e4:	2800      	cmp	r0, #0
    23e6:	db21      	blt.n	242c <_fclose_r+0x7c>
    23e8:	89a3      	ldrh	r3, [r4, #12]
    23ea:	061b      	lsls	r3, r3, #24
    23ec:	d421      	bmi.n	2432 <_fclose_r+0x82>
    23ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
    23f0:	2900      	cmp	r1, #0
    23f2:	d008      	beq.n	2406 <_fclose_r+0x56>
    23f4:	0023      	movs	r3, r4
    23f6:	3340      	adds	r3, #64	; 0x40
    23f8:	4299      	cmp	r1, r3
    23fa:	d002      	beq.n	2402 <_fclose_r+0x52>
    23fc:	0028      	movs	r0, r5
    23fe:	f7ff f8e1 	bl	15c4 <_free_r>
    2402:	2300      	movs	r3, #0
    2404:	6323      	str	r3, [r4, #48]	; 0x30
    2406:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2408:	2900      	cmp	r1, #0
    240a:	d004      	beq.n	2416 <_fclose_r+0x66>
    240c:	0028      	movs	r0, r5
    240e:	f7ff f8d9 	bl	15c4 <_free_r>
    2412:	2300      	movs	r3, #0
    2414:	6463      	str	r3, [r4, #68]	; 0x44
    2416:	f7ff f865 	bl	14e4 <__sfp_lock_acquire>
    241a:	2300      	movs	r3, #0
    241c:	81a3      	strh	r3, [r4, #12]
    241e:	f7ff f863 	bl	14e8 <__sfp_lock_release>
    2422:	0030      	movs	r0, r6
    2424:	e7d2      	b.n	23cc <_fclose_r+0x1c>
    2426:	f7ff f855 	bl	14d4 <__sinit>
    242a:	e7ca      	b.n	23c2 <_fclose_r+0x12>
    242c:	2601      	movs	r6, #1
    242e:	4276      	negs	r6, r6
    2430:	e7da      	b.n	23e8 <_fclose_r+0x38>
    2432:	6921      	ldr	r1, [r4, #16]
    2434:	0028      	movs	r0, r5
    2436:	f7ff f8c5 	bl	15c4 <_free_r>
    243a:	e7d8      	b.n	23ee <_fclose_r+0x3e>

0000243c <fclose>:
    243c:	b510      	push	{r4, lr}
    243e:	4b03      	ldr	r3, [pc, #12]	; (244c <fclose+0x10>)
    2440:	0001      	movs	r1, r0
    2442:	6818      	ldr	r0, [r3, #0]
    2444:	f7ff ffb4 	bl	23b0 <_fclose_r>
    2448:	bd10      	pop	{r4, pc}
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	10010d40 	.word	0x10010d40

00002450 <__sflush_r>:
    2450:	b5f0      	push	{r4, r5, r6, r7, lr}
    2452:	4647      	mov	r7, r8
    2454:	b480      	push	{r7}
    2456:	220c      	movs	r2, #12
    2458:	5e8b      	ldrsh	r3, [r1, r2]
    245a:	4680      	mov	r8, r0
    245c:	b29a      	uxth	r2, r3
    245e:	000c      	movs	r4, r1
    2460:	0711      	lsls	r1, r2, #28
    2462:	d440      	bmi.n	24e6 <__sflush_r+0x96>
    2464:	2280      	movs	r2, #128	; 0x80
    2466:	0112      	lsls	r2, r2, #4
    2468:	4313      	orrs	r3, r2
    246a:	6862      	ldr	r2, [r4, #4]
    246c:	81a3      	strh	r3, [r4, #12]
    246e:	2a00      	cmp	r2, #0
    2470:	dc00      	bgt.n	2474 <__sflush_r+0x24>
    2472:	e070      	b.n	2556 <__sflush_r+0x106>
    2474:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2476:	2e00      	cmp	r6, #0
    2478:	d031      	beq.n	24de <__sflush_r+0x8e>
    247a:	4642      	mov	r2, r8
    247c:	4641      	mov	r1, r8
    247e:	6815      	ldr	r5, [r2, #0]
    2480:	2200      	movs	r2, #0
    2482:	b29b      	uxth	r3, r3
    2484:	600a      	str	r2, [r1, #0]
    2486:	04da      	lsls	r2, r3, #19
    2488:	d400      	bmi.n	248c <__sflush_r+0x3c>
    248a:	e069      	b.n	2560 <__sflush_r+0x110>
    248c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    248e:	075b      	lsls	r3, r3, #29
    2490:	d506      	bpl.n	24a0 <__sflush_r+0x50>
    2492:	6863      	ldr	r3, [r4, #4]
    2494:	1ad2      	subs	r2, r2, r3
    2496:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2498:	2b00      	cmp	r3, #0
    249a:	d001      	beq.n	24a0 <__sflush_r+0x50>
    249c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    249e:	1ad2      	subs	r2, r2, r3
    24a0:	2300      	movs	r3, #0
    24a2:	69e1      	ldr	r1, [r4, #28]
    24a4:	4640      	mov	r0, r8
    24a6:	47b0      	blx	r6
    24a8:	1c43      	adds	r3, r0, #1
    24aa:	d03d      	beq.n	2528 <__sflush_r+0xd8>
    24ac:	89a2      	ldrh	r2, [r4, #12]
    24ae:	4b3a      	ldr	r3, [pc, #232]	; (2598 <__sflush_r+0x148>)
    24b0:	4013      	ands	r3, r2
    24b2:	2200      	movs	r2, #0
    24b4:	6062      	str	r2, [r4, #4]
    24b6:	6922      	ldr	r2, [r4, #16]
    24b8:	b21b      	sxth	r3, r3
    24ba:	81a3      	strh	r3, [r4, #12]
    24bc:	6022      	str	r2, [r4, #0]
    24be:	04db      	lsls	r3, r3, #19
    24c0:	d447      	bmi.n	2552 <__sflush_r+0x102>
    24c2:	4643      	mov	r3, r8
    24c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    24c6:	601d      	str	r5, [r3, #0]
    24c8:	2900      	cmp	r1, #0
    24ca:	d008      	beq.n	24de <__sflush_r+0x8e>
    24cc:	0023      	movs	r3, r4
    24ce:	3340      	adds	r3, #64	; 0x40
    24d0:	4299      	cmp	r1, r3
    24d2:	d002      	beq.n	24da <__sflush_r+0x8a>
    24d4:	4640      	mov	r0, r8
    24d6:	f7ff f875 	bl	15c4 <_free_r>
    24da:	2300      	movs	r3, #0
    24dc:	6323      	str	r3, [r4, #48]	; 0x30
    24de:	2000      	movs	r0, #0
    24e0:	bc04      	pop	{r2}
    24e2:	4690      	mov	r8, r2
    24e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24e6:	6926      	ldr	r6, [r4, #16]
    24e8:	2e00      	cmp	r6, #0
    24ea:	d0f8      	beq.n	24de <__sflush_r+0x8e>
    24ec:	6823      	ldr	r3, [r4, #0]
    24ee:	6026      	str	r6, [r4, #0]
    24f0:	1b9d      	subs	r5, r3, r6
    24f2:	2300      	movs	r3, #0
    24f4:	0792      	lsls	r2, r2, #30
    24f6:	d100      	bne.n	24fa <__sflush_r+0xaa>
    24f8:	6963      	ldr	r3, [r4, #20]
    24fa:	60a3      	str	r3, [r4, #8]
    24fc:	2d00      	cmp	r5, #0
    24fe:	dc04      	bgt.n	250a <__sflush_r+0xba>
    2500:	e7ed      	b.n	24de <__sflush_r+0x8e>
    2502:	1836      	adds	r6, r6, r0
    2504:	1a2d      	subs	r5, r5, r0
    2506:	2d00      	cmp	r5, #0
    2508:	dde9      	ble.n	24de <__sflush_r+0x8e>
    250a:	002b      	movs	r3, r5
    250c:	0032      	movs	r2, r6
    250e:	69e1      	ldr	r1, [r4, #28]
    2510:	4640      	mov	r0, r8
    2512:	6a67      	ldr	r7, [r4, #36]	; 0x24
    2514:	47b8      	blx	r7
    2516:	2800      	cmp	r0, #0
    2518:	dcf3      	bgt.n	2502 <__sflush_r+0xb2>
    251a:	2340      	movs	r3, #64	; 0x40
    251c:	2001      	movs	r0, #1
    251e:	89a2      	ldrh	r2, [r4, #12]
    2520:	4240      	negs	r0, r0
    2522:	4313      	orrs	r3, r2
    2524:	81a3      	strh	r3, [r4, #12]
    2526:	e7db      	b.n	24e0 <__sflush_r+0x90>
    2528:	4643      	mov	r3, r8
    252a:	6819      	ldr	r1, [r3, #0]
    252c:	291d      	cmp	r1, #29
    252e:	d8f4      	bhi.n	251a <__sflush_r+0xca>
    2530:	4b1a      	ldr	r3, [pc, #104]	; (259c <__sflush_r+0x14c>)
    2532:	2201      	movs	r2, #1
    2534:	40cb      	lsrs	r3, r1
    2536:	439a      	bics	r2, r3
    2538:	d1ef      	bne.n	251a <__sflush_r+0xca>
    253a:	89a6      	ldrh	r6, [r4, #12]
    253c:	4b16      	ldr	r3, [pc, #88]	; (2598 <__sflush_r+0x148>)
    253e:	6062      	str	r2, [r4, #4]
    2540:	4033      	ands	r3, r6
    2542:	6922      	ldr	r2, [r4, #16]
    2544:	b21b      	sxth	r3, r3
    2546:	81a3      	strh	r3, [r4, #12]
    2548:	6022      	str	r2, [r4, #0]
    254a:	04db      	lsls	r3, r3, #19
    254c:	d5b9      	bpl.n	24c2 <__sflush_r+0x72>
    254e:	2900      	cmp	r1, #0
    2550:	d1b7      	bne.n	24c2 <__sflush_r+0x72>
    2552:	6520      	str	r0, [r4, #80]	; 0x50
    2554:	e7b5      	b.n	24c2 <__sflush_r+0x72>
    2556:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2558:	2a00      	cmp	r2, #0
    255a:	dd00      	ble.n	255e <__sflush_r+0x10e>
    255c:	e78a      	b.n	2474 <__sflush_r+0x24>
    255e:	e7be      	b.n	24de <__sflush_r+0x8e>
    2560:	2200      	movs	r2, #0
    2562:	2301      	movs	r3, #1
    2564:	69e1      	ldr	r1, [r4, #28]
    2566:	4640      	mov	r0, r8
    2568:	47b0      	blx	r6
    256a:	0002      	movs	r2, r0
    256c:	1c43      	adds	r3, r0, #1
    256e:	d002      	beq.n	2576 <__sflush_r+0x126>
    2570:	89a3      	ldrh	r3, [r4, #12]
    2572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2574:	e78b      	b.n	248e <__sflush_r+0x3e>
    2576:	4643      	mov	r3, r8
    2578:	681b      	ldr	r3, [r3, #0]
    257a:	2b00      	cmp	r3, #0
    257c:	d0f8      	beq.n	2570 <__sflush_r+0x120>
    257e:	2b1d      	cmp	r3, #29
    2580:	d001      	beq.n	2586 <__sflush_r+0x136>
    2582:	2b16      	cmp	r3, #22
    2584:	d103      	bne.n	258e <__sflush_r+0x13e>
    2586:	4643      	mov	r3, r8
    2588:	2000      	movs	r0, #0
    258a:	601d      	str	r5, [r3, #0]
    258c:	e7a8      	b.n	24e0 <__sflush_r+0x90>
    258e:	2340      	movs	r3, #64	; 0x40
    2590:	89a1      	ldrh	r1, [r4, #12]
    2592:	430b      	orrs	r3, r1
    2594:	81a3      	strh	r3, [r4, #12]
    2596:	e7a3      	b.n	24e0 <__sflush_r+0x90>
    2598:	fffff7ff 	.word	0xfffff7ff
    259c:	20400001 	.word	0x20400001

000025a0 <_fflush_r>:
    25a0:	b570      	push	{r4, r5, r6, lr}
    25a2:	0004      	movs	r4, r0
    25a4:	000d      	movs	r5, r1
    25a6:	2800      	cmp	r0, #0
    25a8:	d002      	beq.n	25b0 <_fflush_r+0x10>
    25aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
    25ac:	2b00      	cmp	r3, #0
    25ae:	d009      	beq.n	25c4 <_fflush_r+0x24>
    25b0:	220c      	movs	r2, #12
    25b2:	5eab      	ldrsh	r3, [r5, r2]
    25b4:	2000      	movs	r0, #0
    25b6:	2b00      	cmp	r3, #0
    25b8:	d003      	beq.n	25c2 <_fflush_r+0x22>
    25ba:	0029      	movs	r1, r5
    25bc:	0020      	movs	r0, r4
    25be:	f7ff ff47 	bl	2450 <__sflush_r>
    25c2:	bd70      	pop	{r4, r5, r6, pc}
    25c4:	f7fe ff86 	bl	14d4 <__sinit>
    25c8:	e7f2      	b.n	25b0 <_fflush_r+0x10>
    25ca:	46c0      	nop			; (mov r8, r8)

000025cc <fflush>:
    25cc:	b510      	push	{r4, lr}
    25ce:	1e01      	subs	r1, r0, #0
    25d0:	d004      	beq.n	25dc <fflush+0x10>
    25d2:	4b05      	ldr	r3, [pc, #20]	; (25e8 <fflush+0x1c>)
    25d4:	6818      	ldr	r0, [r3, #0]
    25d6:	f7ff ffe3 	bl	25a0 <_fflush_r>
    25da:	bd10      	pop	{r4, pc}
    25dc:	4b03      	ldr	r3, [pc, #12]	; (25ec <fflush+0x20>)
    25de:	4904      	ldr	r1, [pc, #16]	; (25f0 <fflush+0x24>)
    25e0:	6818      	ldr	r0, [r3, #0]
    25e2:	f7ff fa81 	bl	1ae8 <_fwalk_reent>
    25e6:	e7f8      	b.n	25da <fflush+0xe>
    25e8:	10010d40 	.word	0x10010d40
    25ec:	000027c8 	.word	0x000027c8
    25f0:	000025a1 	.word	0x000025a1

000025f4 <_lseek_r>:
    25f4:	b570      	push	{r4, r5, r6, lr}
    25f6:	0005      	movs	r5, r0
    25f8:	0008      	movs	r0, r1
    25fa:	0011      	movs	r1, r2
    25fc:	2200      	movs	r2, #0
    25fe:	4c06      	ldr	r4, [pc, #24]	; (2618 <_lseek_r+0x24>)
    2600:	6022      	str	r2, [r4, #0]
    2602:	001a      	movs	r2, r3
    2604:	f7fe fa8f 	bl	b26 <_lseek>
    2608:	1c43      	adds	r3, r0, #1
    260a:	d000      	beq.n	260e <_lseek_r+0x1a>
    260c:	bd70      	pop	{r4, r5, r6, pc}
    260e:	6823      	ldr	r3, [r4, #0]
    2610:	2b00      	cmp	r3, #0
    2612:	d0fb      	beq.n	260c <_lseek_r+0x18>
    2614:	602b      	str	r3, [r5, #0]
    2616:	e7f9      	b.n	260c <_lseek_r+0x18>
    2618:	10010e6c 	.word	0x10010e6c

0000261c <__swhatbuf_r>:
    261c:	b570      	push	{r4, r5, r6, lr}
    261e:	000c      	movs	r4, r1
    2620:	001e      	movs	r6, r3
    2622:	230e      	movs	r3, #14
    2624:	5ec9      	ldrsh	r1, [r1, r3]
    2626:	b090      	sub	sp, #64	; 0x40
    2628:	0015      	movs	r5, r2
    262a:	2900      	cmp	r1, #0
    262c:	db15      	blt.n	265a <__swhatbuf_r+0x3e>
    262e:	aa01      	add	r2, sp, #4
    2630:	f000 f87c 	bl	272c <_fstat_r>
    2634:	2800      	cmp	r0, #0
    2636:	db10      	blt.n	265a <__swhatbuf_r+0x3e>
    2638:	23f0      	movs	r3, #240	; 0xf0
    263a:	9a02      	ldr	r2, [sp, #8]
    263c:	021b      	lsls	r3, r3, #8
    263e:	4013      	ands	r3, r2
    2640:	4a0d      	ldr	r2, [pc, #52]	; (2678 <__swhatbuf_r+0x5c>)
    2642:	2080      	movs	r0, #128	; 0x80
    2644:	4694      	mov	ip, r2
    2646:	4463      	add	r3, ip
    2648:	425a      	negs	r2, r3
    264a:	4153      	adcs	r3, r2
    264c:	6033      	str	r3, [r6, #0]
    264e:	2380      	movs	r3, #128	; 0x80
    2650:	00db      	lsls	r3, r3, #3
    2652:	602b      	str	r3, [r5, #0]
    2654:	0100      	lsls	r0, r0, #4
    2656:	b010      	add	sp, #64	; 0x40
    2658:	bd70      	pop	{r4, r5, r6, pc}
    265a:	2300      	movs	r3, #0
    265c:	6033      	str	r3, [r6, #0]
    265e:	89a3      	ldrh	r3, [r4, #12]
    2660:	061b      	lsls	r3, r3, #24
    2662:	d503      	bpl.n	266c <__swhatbuf_r+0x50>
    2664:	2340      	movs	r3, #64	; 0x40
    2666:	2000      	movs	r0, #0
    2668:	602b      	str	r3, [r5, #0]
    266a:	e7f4      	b.n	2656 <__swhatbuf_r+0x3a>
    266c:	2380      	movs	r3, #128	; 0x80
    266e:	00db      	lsls	r3, r3, #3
    2670:	602b      	str	r3, [r5, #0]
    2672:	2000      	movs	r0, #0
    2674:	e7ef      	b.n	2656 <__swhatbuf_r+0x3a>
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	ffffe000 	.word	0xffffe000

0000267c <__smakebuf_r>:
    267c:	b570      	push	{r4, r5, r6, lr}
    267e:	898b      	ldrh	r3, [r1, #12]
    2680:	b082      	sub	sp, #8
    2682:	0005      	movs	r5, r0
    2684:	000c      	movs	r4, r1
    2686:	079b      	lsls	r3, r3, #30
    2688:	d507      	bpl.n	269a <__smakebuf_r+0x1e>
    268a:	0023      	movs	r3, r4
    268c:	3343      	adds	r3, #67	; 0x43
    268e:	6023      	str	r3, [r4, #0]
    2690:	6123      	str	r3, [r4, #16]
    2692:	2301      	movs	r3, #1
    2694:	6163      	str	r3, [r4, #20]
    2696:	b002      	add	sp, #8
    2698:	bd70      	pop	{r4, r5, r6, pc}
    269a:	ab01      	add	r3, sp, #4
    269c:	466a      	mov	r2, sp
    269e:	f7ff ffbd 	bl	261c <__swhatbuf_r>
    26a2:	9900      	ldr	r1, [sp, #0]
    26a4:	0006      	movs	r6, r0
    26a6:	0028      	movs	r0, r5
    26a8:	f7fe faee 	bl	c88 <_malloc_r>
    26ac:	2800      	cmp	r0, #0
    26ae:	d01c      	beq.n	26ea <__smakebuf_r+0x6e>
    26b0:	2280      	movs	r2, #128	; 0x80
    26b2:	4b13      	ldr	r3, [pc, #76]	; (2700 <__smakebuf_r+0x84>)
    26b4:	63eb      	str	r3, [r5, #60]	; 0x3c
    26b6:	89a3      	ldrh	r3, [r4, #12]
    26b8:	6020      	str	r0, [r4, #0]
    26ba:	4313      	orrs	r3, r2
    26bc:	9a00      	ldr	r2, [sp, #0]
    26be:	b21b      	sxth	r3, r3
    26c0:	6162      	str	r2, [r4, #20]
    26c2:	9a01      	ldr	r2, [sp, #4]
    26c4:	81a3      	strh	r3, [r4, #12]
    26c6:	6120      	str	r0, [r4, #16]
    26c8:	2a00      	cmp	r2, #0
    26ca:	d102      	bne.n	26d2 <__smakebuf_r+0x56>
    26cc:	4333      	orrs	r3, r6
    26ce:	81a3      	strh	r3, [r4, #12]
    26d0:	e7e1      	b.n	2696 <__smakebuf_r+0x1a>
    26d2:	230e      	movs	r3, #14
    26d4:	5ee1      	ldrsh	r1, [r4, r3]
    26d6:	0028      	movs	r0, r5
    26d8:	f000 f83c 	bl	2754 <_isatty_r>
    26dc:	2800      	cmp	r0, #0
    26de:	d00c      	beq.n	26fa <__smakebuf_r+0x7e>
    26e0:	2201      	movs	r2, #1
    26e2:	89a3      	ldrh	r3, [r4, #12]
    26e4:	431a      	orrs	r2, r3
    26e6:	b213      	sxth	r3, r2
    26e8:	e7f0      	b.n	26cc <__smakebuf_r+0x50>
    26ea:	220c      	movs	r2, #12
    26ec:	5ea3      	ldrsh	r3, [r4, r2]
    26ee:	059a      	lsls	r2, r3, #22
    26f0:	d4d1      	bmi.n	2696 <__smakebuf_r+0x1a>
    26f2:	2202      	movs	r2, #2
    26f4:	4313      	orrs	r3, r2
    26f6:	81a3      	strh	r3, [r4, #12]
    26f8:	e7c7      	b.n	268a <__smakebuf_r+0xe>
    26fa:	220c      	movs	r2, #12
    26fc:	5ea3      	ldrsh	r3, [r4, r2]
    26fe:	e7e5      	b.n	26cc <__smakebuf_r+0x50>
    2700:	000012f9 	.word	0x000012f9

00002704 <_read_r>:
    2704:	b570      	push	{r4, r5, r6, lr}
    2706:	0005      	movs	r5, r0
    2708:	0008      	movs	r0, r1
    270a:	0011      	movs	r1, r2
    270c:	2200      	movs	r2, #0
    270e:	4c06      	ldr	r4, [pc, #24]	; (2728 <_read_r+0x24>)
    2710:	6022      	str	r2, [r4, #0]
    2712:	001a      	movs	r2, r3
    2714:	f7fe fa09 	bl	b2a <_read>
    2718:	1c43      	adds	r3, r0, #1
    271a:	d000      	beq.n	271e <_read_r+0x1a>
    271c:	bd70      	pop	{r4, r5, r6, pc}
    271e:	6823      	ldr	r3, [r4, #0]
    2720:	2b00      	cmp	r3, #0
    2722:	d0fb      	beq.n	271c <_read_r+0x18>
    2724:	602b      	str	r3, [r5, #0]
    2726:	e7f9      	b.n	271c <_read_r+0x18>
    2728:	10010e6c 	.word	0x10010e6c

0000272c <_fstat_r>:
    272c:	2300      	movs	r3, #0
    272e:	b570      	push	{r4, r5, r6, lr}
    2730:	4c07      	ldr	r4, [pc, #28]	; (2750 <_fstat_r+0x24>)
    2732:	0005      	movs	r5, r0
    2734:	0008      	movs	r0, r1
    2736:	0011      	movs	r1, r2
    2738:	6023      	str	r3, [r4, #0]
    273a:	f7fe f9d5 	bl	ae8 <_fstat>
    273e:	1c43      	adds	r3, r0, #1
    2740:	d000      	beq.n	2744 <_fstat_r+0x18>
    2742:	bd70      	pop	{r4, r5, r6, pc}
    2744:	6823      	ldr	r3, [r4, #0]
    2746:	2b00      	cmp	r3, #0
    2748:	d0fb      	beq.n	2742 <_fstat_r+0x16>
    274a:	602b      	str	r3, [r5, #0]
    274c:	e7f9      	b.n	2742 <_fstat_r+0x16>
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	10010e6c 	.word	0x10010e6c

00002754 <_isatty_r>:
    2754:	2300      	movs	r3, #0
    2756:	b570      	push	{r4, r5, r6, lr}
    2758:	4c06      	ldr	r4, [pc, #24]	; (2774 <_isatty_r+0x20>)
    275a:	0005      	movs	r5, r0
    275c:	0008      	movs	r0, r1
    275e:	6023      	str	r3, [r4, #0]
    2760:	f7fe f9df 	bl	b22 <_isatty>
    2764:	1c43      	adds	r3, r0, #1
    2766:	d000      	beq.n	276a <_isatty_r+0x16>
    2768:	bd70      	pop	{r4, r5, r6, pc}
    276a:	6823      	ldr	r3, [r4, #0]
    276c:	2b00      	cmp	r3, #0
    276e:	d0fb      	beq.n	2768 <_isatty_r+0x14>
    2770:	602b      	str	r3, [r5, #0]
    2772:	e7f9      	b.n	2768 <_isatty_r+0x14>
    2774:	10010e6c 	.word	0x10010e6c
    2778:	00004d4c 	.word	0x00004d4c
    277c:	000081a0 	.word	0x000081a0
	...
    2788:	00800000 	.word	0x00800000
    278c:	00000080 	.word	0x00000080
    2790:	00004d4c 	.word	0x00004d4c
    2794:	00008034 	.word	0x00008034
	...
    27a0:	00800000 	.word	0x00800000
    27a4:	00000080 	.word	0x00000080

000027a8 <frmHead>:
    27a8:	0a0dff3a 65440a0d 6c756166 61485f74     :.....Default_Ha
    27b8:	656c646e 0d0a0d72 00000000 0000000a     ndler...........

000027c8 <_global_impure_ptr>:
    27c8:	10010918                                ....
